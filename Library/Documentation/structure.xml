<?xml version="1.0" encoding="utf-8"?>
<project title="Ontology Wrapper" version="2.2.0&#10;">
  <partials/>
  <file path="OntologyWrapper/DatabaseObject.php" generated-path="OntologyWrapper.DatabaseObject.html" hash="8a0398004584bc3541e9b2e62a3d21a0" package="Default">
    <docblock line="0">
      <description>DatabaseObject.php</description>
      <long-description>This file contains the definition of the {@link DatabaseObject} class.</long-description>
    </docblock>
    <class final="false" abstract="true" namespace="OntologyWrapper" line="30" package="Default">
      <extends>\OntologyWrapper\ConnectionObject</extends>
      <name>DatabaseObject</name>
      <full_name>\OntologyWrapper\DatabaseObject</full_name>
      <docblock line="30">
        <description>Database object</description>
        <long-description>This &lt;i&gt;abstract&lt;/i&gt; class is the ancestor of all classes representing database
connection instances, this class extends the {@link ConnectionObject} class to implement
database specific functionality prototypes.</long-description>
        <tag name="author" line="30" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="30" description="1.00 06/02/2014"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="61" package="Default">
        <name>__construct</name>
        <full_name>\OntologyWrapper\DatabaseObject::__construct()</full_name>
        <docblock line="61">
          <description>Instantiate class.</description>
          <long-description>We overload the constructor to instantiate a server from the provided parameter, if
the parent object was not provided, and set it as the parent.</long-description>
          <tag name="param" line="61" description="&lt;p&gt;Data source name or parameters.&lt;/p&gt;" type="mixed" variable="$theParameter">
            <type>mixed</type>
          </tag>
          <tag name="param" line="61" description="&lt;p&gt;Connection parent.&lt;/p&gt;" type="\OntologyWrapper\ConnectionObject" variable="$theParent">
            <type link="ConnectionObject.html">\OntologyWrapper\ConnectionObject</type>
          </tag>
          <tag name="access" line="61" description="public"/>
          <tag name="uses" line="61" description="" link="ServerObject::DefaultOffsets()"/>
          <tag name="uses" line="61" description="" link="newServer()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theParameter</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theParent</name>
          <default>NULL</default>
          <type>\OntologyWrapper\ConnectionObject</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="OntologyWrapper" line="116" package="Default">
        <name>drop</name>
        <full_name>\OntologyWrapper\DatabaseObject::drop()</full_name>
        <docblock line="116">
          <description>Drop the database</description>
          <long-description>This method should drop the current database.</long-description>
          <tag name="access" line="116" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="148" package="Default">
        <name>Collection</name>
        <full_name>\OntologyWrapper\DatabaseObject::Collection()</full_name>
        <docblock line="148">
          <description>Return collection connection</description>
          <long-description>This method can be used to return a collection connection from the current database.

The method expects a single parameter which represents the collection name, the
method should return an instance of a class derived from {@link CollectionObject}.</long-description>
          <tag name="param" line="148" description="&lt;p&gt;Collection name.&lt;/p&gt;" type="string" variable="$theName">
            <type>string</type>
          </tag>
          <tag name="param" line="148" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="148" description="public"/>
          <tag name="return" line="148" description="Collection object." type="\OntologyWrapper\CollectionObject">
            <type link="CollectionObject.html">\OntologyWrapper\CollectionObject</type>
          </tag>
          <tag name="uses" line="148" description="" link="newCollection()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="186" package="Default">
        <name>getCollections</name>
        <full_name>\OntologyWrapper\DatabaseObject::getCollections()</full_name>
        <docblock line="186">
          <description>Return collection names</description>
          <long-description>This method should return the list of collection names of the current database, the
method should return the following retults:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;NULL&lt;/tt&gt;: The operation is not supported.
&lt;li&gt;&lt;tt&gt;FALSE&lt;/tt&gt;: The database is not connected.
&lt;li&gt;&lt;tt&gt;array&lt;/tt&gt;: The database collection names.
&lt;/ul&gt;

We implement the method in this class as a fall-back.</long-description>
          <tag name="access" line="186" description="public"/>
          <tag name="return" line="186" description="Server statistics or &lt;tt&gt;NULL&lt;/tt&gt; if unsupported." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="OntologyWrapper" line="219" package="Default">
        <name>setSequenceNumber</name>
        <full_name>\OntologyWrapper\DatabaseObject::setSequenceNumber()</full_name>
        <docblock line="219">
          <description>Set sequence number</description>
          <long-description>This method should initialise a sequence number associated to the provided parameter.
This operation is equivalent to resetting an auto-number for a database.

Once the sequence is set, the next requested sequence number will hold the value set
by this method, so to start counting from &lt;tt&gt;1&lt;/tt&gt; you should provide this value to
this method.

Derived classes must implement this method.</long-description>
          <tag name="param" line="219" description="&lt;p&gt;Sequence selector.&lt;/p&gt;" type="string" variable="$theSequence">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;Sequence number.&lt;/p&gt;" type="integer" variable="$theNumber">
            <type>integer</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theSequence</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theNumber</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="OntologyWrapper" line="246" package="Default">
        <name>getSequenceNumber</name>
        <full_name>\OntologyWrapper\DatabaseObject::getSequenceNumber()</full_name>
        <docblock line="246">
          <description>Return sequence number</description>
          <long-description>This method should return a sequence number associated to the provided parameter.
This operation is equivalent to requesting an auto-number for a database.

Each time a sequence number is requested, the sequence seed is updated, so use this
method only when the sequence is required.

If the sequence selector is not found, a new one will be created starting with the
number &lt;tt&gt;1&lt;/tt&gt;, so, if you need to start with another number, use the
{@link setSequenceNumber()} before.

Derived classes must implement this method.</long-description>
          <tag name="param" line="246" description="&lt;p&gt;Sequence selector.&lt;/p&gt;" type="string" variable="$theSequence">
            <type>string</type>
          </tag>
          <tag name="access" line="246" description="public"/>
          <tag name="return" line="246" description="Sequence number." type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theSequence</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="270" package="Default">
        <name>DefaultOffsets</name>
        <full_name>\OntologyWrapper\DatabaseObject::DefaultOffsets()</full_name>
        <docblock line="270">
          <description>Return default offsets</description>
          <long-description>In this class we return the {@link kTAG_CONN_BASE} offset.</long-description>
          <tag name="static" line="270" description=""/>
          <tag name="return" line="270" description="List of default offsets." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OntologyWrapper" line="308" package="Default">
        <name>newServer</name>
        <full_name>\OntologyWrapper\DatabaseObject::newServer()</full_name>
        <docblock line="308">
          <description>Return a new server instance</description>
          <long-description>This method should be implemented by concrete derived classes, it expects a list of
offsets or a data source name containing the necessary elements to instantiate a
{@link ServerObject} instance which will be considered the current object's parent.

Derived classes must implement this method.

&lt;em&gt;When implementing this method you should not forget to set the dictionary&lt;/em&gt;.</long-description>
          <tag name="param" line="308" description="&lt;p&gt;Server parameters.&lt;/p&gt;" type="mixed" variable="$theParameter">
            <type>mixed</type>
          </tag>
          <tag name="param" line="308" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="308" description="protected"/>
          <tag name="return" line="308" description="Server instance." type="\OntologyWrapper\ServerObject">
            <type link="ServerObject.html">\OntologyWrapper\ServerObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theParameter</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OntologyWrapper" line="332" package="Default">
        <name>newCollection</name>
        <full_name>\OntologyWrapper\DatabaseObject::newCollection()</full_name>
        <docblock line="332">
          <description>Return a new collection instance</description>
          <long-description>This method should be implemented by concrete derived classes, it expects a list of
offsets which include database information and should use them to instantiate a
{@link CollectionObject} instance.

Derived classes must implement this method.

&lt;em&gt;When implementing this method you should not forget to set the dictionary&lt;/em&gt;.</long-description>
          <tag name="param" line="332" description="&lt;p&gt;Full collection offsets.&lt;/p&gt;" type="array" variable="$theOffsets">
            <type>array</type>
          </tag>
          <tag name="param" line="332" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="332" description="protected"/>
          <tag name="return" line="332" description="Collection instance." type="\OntologyWrapper\CollectionObject">
            <type link="CollectionObject.html">\OntologyWrapper\CollectionObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffsets</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="definitions/Session.inc.php" generated-path="definitions.Session.inc.html" hash="6ad4e8733e7dbb96b7b5b3b05ef53fa6" package="Default">
    <docblock line="0">
      <description>Default session tags.</description>
      <long-description>This file contains the default session offsets, these tags may be changed in case of
conflict.</long-description>
      <tag name="author" line="0" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
      <tag name="version" line="0" description="1.00 18/01/2014"/>
    </docblock>
    <constant namespace="" line="29" package="Default">
      <name>kSESSION_DDICT</name>
      <full_name>\\kSESSION_DDICT</full_name>
      <value>':ddict'</value>
      <docblock line="29">
        <description>Data dictionary.</description>
        <long-description>This constant holds the default data dictionary persistent identifier, it represents the
default session name assigned to the data dictionary.</long-description>
      </docblock>
    </constant>
    <source>eJy9UcFOAjEUPG+/4oULuiHdXePBKAIGOHAQDsvd1N1294Wl3bTFhI/wH/wY/S9fwRgBPeI7NE3mzczLTH/Y1i1jSXx/nmEQR79O/BPJpXNoNEddcLrnj60T/nlOjhMGFEgwgIlUYtN4cPsDwYvKcQICtqzRgcJGQmG0F6gd+FpCeUQxSjnpXS+ATu4UYC228Ey8WuhKloAaCkGYUUGX1FSDhf/yiUZi42tjo+gRm5WBBw4fbyuj8P0V+mvuwrcYFRUKy42tBjvKi7TBPMp4mkJ2k6RZcpVm14QlZy57vJjPp+PlbDHP/7u179KEF1BSgpSAsNuDvihc54X2UJumPCysPKRBGzJ0XtIylvSiQml7gB6sbC11qf1OIGgfl67FWoKgf6WpX2/2Rqd3JYyYqOUFdFb5NM8ptqfJZDZednr7wLq3ZWB04fKOMTYcsE9gwvNK</source>
  </file>
  <file path="OntologyWrapper/MongoServer.php" generated-path="OntologyWrapper.MongoServer.html" hash="730dba306332b2f3b7ca8beebfee7918" package="Default">
    <docblock line="0">
      <description>MongoServer.php</description>
      <long-description>This file contains the definition of the {@link MongoServer} class.</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="OntologyWrapper" line="28" package="Default">
      <extends>\OntologyWrapper\ServerObject</extends>
      <name>MongoServer</name>
      <full_name>\OntologyWrapper\MongoServer</full_name>
      <docblock line="28">
        <description>Mongo server</description>
        <long-description>This class is a &lt;i&gt;concrete&lt;/i&gt; implementation of the {@link ServerObject} wrapping a
{@link MongoClient} class.</long-description>
        <tag name="author" line="28" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="28" description="1.00 06/02/2014"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="53" package="Default">
        <name>isConnected</name>
        <full_name>\OntologyWrapper\MongoServer::isConnected()</full_name>
        <docblock line="53">
          <description>Check if connection is open</description>
          <long-description>We overload this method to assume the object is connected if the resource is a
{@link MongoClient}.</long-description>
          <tag name="access" line="53" description="public"/>
          <tag name="return" line="53" description="&lt;tt&gt;TRUE&lt;/tt&gt; is open." type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="77" package="Default">
        <name>getStatistics</name>
        <full_name>\OntologyWrapper\MongoServer::getStatistics()</full_name>
        <docblock line="77">
          <description>Return statistics</description>
          <long-description>This method will return the following values:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;FALSE&lt;/tt&gt;: The server is not connected.
&lt;li&gt;&lt;tt&gt;array&lt;/tt&gt;: The server statistics.
&lt;/ul&gt;</long-description>
          <tag name="access" line="77" description="public"/>
          <tag name="return" line="77" description="Server statistics or &lt;tt&gt;FALSE&lt;/tt&gt;." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="117" package="Default">
        <name>connectionOpen</name>
        <full_name>\OntologyWrapper\MongoServer::connectionOpen()</full_name>
        <docblock line="117">
          <description>Open connection</description>
          <long-description>This method will instantiate a {@link MongoClient} object and set it in the
mConnection data member.

This method expects the caller to have checked whether the connection is already
open.

If the operation fails, the method will raise an exception.</long-description>
          <tag name="access" line="117" description="protected"/>
          <tag name="return" line="117" description="The native connection." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="159" package="Default">
        <name>connectionClose</name>
        <full_name>\OntologyWrapper\MongoServer::connectionClose()</full_name>
        <docblock line="159">
          <description>Close connection</description>
          <long-description>We overload this method to reset the connection resource.</long-description>
          <tag name="access" line="159" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="190" package="Default">
        <name>newDatabase</name>
        <full_name>\OntologyWrapper\MongoServer::newDatabase()</full_name>
        <docblock line="190">
          <description>Return a new database instance</description>
          <long-description>This method should implemented by concrete derived classes, it expects a list of
offsets which include server information and should use them to instantiate a
{@link DatabaseObject} instance.

Derived classes must implement this method.</long-description>
          <tag name="param" line="190" description="&lt;p&gt;Full database offsets.&lt;/p&gt;" type="array" variable="$theOffsets">
            <type>array</type>
          </tag>
          <tag name="param" line="190" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="190" description="protected"/>
          <tag name="return" line="190" description="Database instance." type="\OntologyWrapper\DatabaseObject">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffsets</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
    </class>
    <source>eJztWN1O4zgUvk6e4qzERUHQMKPVXtAf6JTOCAlaBEVzsbNCbuJQL65dxQlQIR5h32EfZve99thuEidNh71hkFZbzaDEiY/P8fnO9x2ne7ycL30/2NvzYQ8upLiT1zR5oElbj4MZnc6ZgphxCqEUKWFCQTqnENGYCZYyKUDGZuT5hDNx71p5gZATpdpoJvB9QRZULUlIYSJSyeXd6mtClkuadHw/Uxuj36yNyex3GqYd7WTvbX7ondf423Of1DZny1sb89/GZb2dbtJAGcfcjJmdB7wg0GV9TF2Y0JR2A9YHtlhyuqCYzIb0ubv+Ao86F0zcAdGG3QwPOUMLTob1NpyQLJ3LBHeL8XsJgzb8/ee9jNlff0B30Vb6MjwJ7xhJ2jK565spuJpCN7wP7cNDOPwlOPwYfDz88LPBjA3C2XqgTykVkaq46T/7nvfOALm8+XR+NoThZDweDadnkzFcDMaDL6OL0XgKZ+Pp6OrzYDh6X8T4Hvjem+wSWt7zmBpKITAfNGqKzHuL0HRYnq4EtA7DOQ3vgcWaqLQfGtxYAHJJhX5u3vlKQSJwuCQRoh6fLigiFq8lINSyBTW1IA2u9OQwD0nb1Y8SqmSWIInp0jImG6qiXax3QsKQIoaX2Yyz0A5hIWaJgJmUnBKhd6ebpv3p1c2oG+BF7rMxEvienQpxJvKQin1u7fqeBv/aYgt2dEwH/cXQ2QGhUiJCimX+zfERdjs2M0EAvV7f93zvBfDasd5+a8Tc0fRak5BKWajeBTJXduNU4UWRuKkDjkfGOaz3WGMglpzLR02LD4RnVB0Vs7oZ75vQupz1dVY/D86vbVqP0CRdE7VOsZBpia52ZRJJErLanFR62baLBevVXkOasae39LpuCGQCVTe3oa6Sqxx3QWD+bFSeCcg+ZXGBygpwAU0UwN2E7UEfFyxvccU1XAu8eiXujfedOn5qwK4EoKH93pLhXV5NpigWo1NXNmpa8V8Vi5KiJ0h171L7emFHKrZXvmXQlJGUYjfV1ASt9YKICGsVdQP/GaYw9lwyjkhK0PZihl1k44L0aYmv2hY7JJxjtaI0zckD3uoiQyF6nOOrenxOa0pHeEJJtDJGCwUxd2dWvHAwsU1fTBhX+2awQnKEYSdOBPoR0qV+s0HKEpmaIq5wzII9Wd3XhCVwkQfXu4JV8rklsVSRUGeWcy3US5Lg2SHFRrGglR0zpqCXcweW90DT3FAuV0gWa+YxzHd7T1e39AkrX7Xgfjr4cqvr7XZyOb3eh9yQJSS9tLcjTeTGuH36a20a/KYX8DKB2W5tfwmMHy/4n3JFa6bHN+fnHUtjebCfMsYji5F1k6HPTGXMkRJlwLioopM4RhdUqwyjZvIa4RgalJZmNnuEnm4dctd+6lnnLEPjDwCOQdDHSv+AE9Cd/XKa8/bRlrcL77bSfpXEawxeRcqbdyflckMuFX0XjjIrN5HUd/pY7FAx6TV2yNvWV8r5tRI1/rR2TfzPzUgyuEbQ/y+w238/QGCxAk+RSGakAbk/srUmhguitSvFaaRR/NRcZkiAxfcJxOBsBfm3C4hogqoS2U8OFNULdTbXSwIc+R1kbMXP0iJKJQvnuGbIs6jsvUUsk4WVQaPYdlX9CQqLZqFLqKL47iEv39L8+0geTllWp1UnYZGhW0VEbq06pWjIu2zTdWHl1I53nzNU5mIH17G13ZnOUXInknlHVT1Vymq78291vRqx553WM/kdaXcwaA4BeUyoGtZLpAvtINRE/8zZ/jxuRwVzD3oGWkZlGpdpFEOjrhEzDpJktWn2oF8+LY4uztDuhtnJxs46R591oEYdnTV0NkrabNWFMX+xfqipKaKzwR1DKL4VyvpnM9RK/7jv/wMIHsj9</source>
  </file>
  <file path="OntologyWrapper/traits/Label.php" generated-path="OntologyWrapper.traits.Label.html" hash="ffb75c8feef7ac593c0bc5cfedf84820" package="Default">
    <docblock line="0">
      <description>Label.php</description>
      <long-description>This file contains the definition of the {@link Label} trait.</long-description>
    </docblock>
    <source>eJzFVsFu2zgQPUtfMYcc2sCVkqKnxHHjZp0ggJMsEmd3DwssaGlkE6FJQaTiBEU+of+wH7P7Xx0OJVtOnC32EFQnkuI8zrx5M2T/czkv4zjd3Y1hF8ZiiirxK8DzyVxaKKRCyIx2QmoLbo6QYyG1dNJoMAWvfD1WUt8F+ydwlZAuIYA0jrVYoC1FhnClnVFm9vh7JcoSqz95lz30hx+9zUceRFu/3Y0/q6hf2/Dc9G289Wx18xBo7GaCF0AuSoUL1M6CgAW6ucmhMBUshBYzqWecEMUIpigsul6bnrvJ8Oyv8fDLaPyUECJ64AaAjTGkV+pc3su8FirAWJg+0kjPatqSBIeiY1GTYRVFF1LdGRgm8O/fd6aQ/3yD/iKxfpgdZzMpqsRUswGb3GNlSTTRfrK3B/uf0r2P6ce9/U8slBAbBx5/jaPoJ8vi19sv4/MTuDo9vRlNYHhyMrq5ubqG88vJ6Pp0eDL6yTqJI4ijNyGIkHdDRWwNKnqLqHxEkZc+ocMFKxGcmAX1+UX+wSXQyDUTGqYItcUcnAGR5z2o0FUS7xGEzqlFKXQ/kHKPYZdz399WxSOUWhcQVZgvsuXc+BYYzsyN9ge3hfaytBg1VF7ScR5b3/GhxMyFUiuMUmbpsUpRUad0VCEHK6N+rQacj76Sg/50sEMm48b5fjodHAROVqZAfua2cT9so8adY9ulHT44WCJDRkuhnecuVH4C5wX0nRtc3o7H/ZQGPaB6XKDgni+cB6iIUM9HwJEUTe1ABLj2wEPaSJs8WSbL6gpk0WlIbO6vBKh1hUq4Jn+622CeRfybUPX2cGVOXVAWEm3nCHaO2qGhO0b4O4r5jNZkBuxuqAdwja6u9Ebn5ElZGZIPObnp3QridDi+GTUYvwTJ/T8MOTCe2H4qCWFINPAU7n3MwDxazpIlbXt1krSlpthLUjtBCrtKbACNzAbdersHXvTZnFJIYp/6KrFYEVzP88bJ9n8awApL5a9vSig+SOu8G0R79Zg0vKYbKiUqdmborlS+ooXcXUhNSVo2Omorgc+vmPpXkzS5vh29TFLgh9ibIl196Onzcl0SH9QBtKOCV4+wMLlXR/4fSduGKQoXMvJDyHXw69Hzcu8ECSg5u5tiZdY39LiumTZdwjKsNlSSwmXzxgFePOaCaBTiu3S3TTSvm03ttSYL+YB51JpwnbXPoZdltGE5NdQRhWbTkG0/9LkCmgK1oUBnx0uRZWipeuupkllYalhZuUEw/kiNyxfWFrHTY9vh5dnt8GwUZpPRH5P1froZbNPaRuG1dOF5u+K2/O6935TGUXAGilpn/Jrl0N9Bl8AerLiBI/ApopUQMs1ZSkBw/snShLPjG+CHwauHxz7UdSy9zWB662h68fNsdpxZe/H+cHU/pykcHZEK4+gJaBwetvxYiHmh88ii5fjzIP4OdKFkiw==</source>
  </file>
  <file path="OntologyWrapper/Wrapper.php" generated-path="OntologyWrapper.Wrapper.html" hash="c8d38ccc405c1b6661026cfd5298d3d4" package="Default">
    <docblock line="0">
      <description>Wrapper.php</description>
      <long-description>This file contains the definition of the {@link Wrapper} class.</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="OntologyWrapper" line="59" package="Default">
      <extends>\OntologyWrapper\Dictionary</extends>
      <name>Wrapper</name>
      <full_name>\OntologyWrapper\Wrapper</full_name>
      <docblock line="59">
        <description>Wrapper</description>
        <long-description>This class extends its ancestor to wrap an interface around the various components of the
system; the metadata, entities and the units.

The object is considered {@link isInited()} when the metadata, entities and units
databases are set.</long-description>
        <tag name="author" line="59" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="59" description="1.00 10/02/2014"/>
      </docblock>
      <property static="false" visibility="protected" line="75" namespace="OntologyWrapper" package="Default">
        <name>$mMetadata</name>
        <default>NULL</default>
        <docblock line="75">
          <description>Metadata.</description>
          <long-description>This data member holds the metadata {@link DatabaseObject} derived instance.</long-description>
          <tag name="var" line="75" description="" type="\OntologyWrapper\DatabaseObject" variable="">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" line="84" namespace="OntologyWrapper" package="Default">
        <name>$mEntities</name>
        <default>NULL</default>
        <docblock line="84">
          <description>Entities.</description>
          <long-description>This data member holds the entities {@link DatabaseObject} derived instance.</long-description>
          <tag name="var" line="84" description="" type="\OntologyWrapper\DatabaseObject" variable="">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" line="93" namespace="OntologyWrapper" package="Default">
        <name>$mUnits</name>
        <default>NULL</default>
        <docblock line="93">
          <description>Units.</description>
          <long-description>This data member holds the units {@link DatabaseObject} derived instance.</long-description>
          <tag name="var" line="93" description="" type="\OntologyWrapper\DatabaseObject" variable="">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="141" package="Default">
        <name>Metadata</name>
        <full_name>\OntologyWrapper\Wrapper::Metadata()</full_name>
        <docblock line="141">
          <description>Manage metadata database</description>
          <long-description>This method can be used to manage the &lt;i&gt;metadata database&lt;/i&gt;, it accepts a
parameter which represents either the metadata database instance or the requested
operation, depending on its value:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;NULL&lt;/tt&gt;: Return the current value.
&lt;li&gt;&lt;tt&gt;FALSE&lt;/tt&gt;: Delete the current value.
&lt;li&gt;&lt;tt&gt;{@link DatabaseObject}&lt;/tt&gt;: Set the value with the provided parameter.
&lt;/ul&gt;

The second parameter is a boolean which if &lt;tt&gt;TRUE&lt;/tt&gt; will return the &lt;i&gt;old&lt;/i&gt;
value when replacing or resetting; if &lt;tt&gt;FALSE&lt;/tt&gt;, it will return the current
value.</long-description>
          <tag name="param" line="141" description="&lt;p&gt;Metadata database or operation.&lt;/p&gt;" type="mixed" variable="$theValue">
            <type>mixed</type>
          </tag>
          <tag name="param" line="141" description="&lt;tt&gt;TRUE&lt;/tt&gt; get old value." type="boolean" variable="$getOld">
            <type>boolean</type>
          </tag>
          <tag name="param" line="141" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="141" description="public"/>
          <tag name="return" line="141" description="&lt;i&gt;New&lt;/i&gt; or &lt;i&gt;old&lt;/i&gt; metadata database." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="141" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="see" line="141" description="" link="\OntologyWrapper\$mMetadata"/>
          <tag name="uses" line="141" description="" link="manageProperty()"/>
          <tag name="uses" line="141" description="" link="isInited()"/>
          <tag name="uses" line="141" description="" link="isReady()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theValue</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$getOld</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="228" package="Default">
        <name>Entities</name>
        <full_name>\OntologyWrapper\Wrapper::Entities()</full_name>
        <docblock line="228">
          <description>Manage entities database</description>
          <long-description>This method can be used to manage the &lt;i&gt;entities database&lt;/i&gt;, it accepts a
parameter which represents either the entities database instance or the requested
operation, depending on its value:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;NULL&lt;/tt&gt;: Return the current value.
&lt;li&gt;&lt;tt&gt;FALSE&lt;/tt&gt;: Delete the current value.
&lt;li&gt;&lt;tt&gt;{@link DatabaseObject}&lt;/tt&gt;: Set the value with the provided parameter.
&lt;/ul&gt;

The second parameter is a boolean which if &lt;tt&gt;TRUE&lt;/tt&gt; will return the &lt;i&gt;old&lt;/i&gt;
value when replacing or resetting; if &lt;tt&gt;FALSE&lt;/tt&gt;, it will return the current
value.</long-description>
          <tag name="param" line="228" description="&lt;p&gt;Entities database or operation.&lt;/p&gt;" type="mixed" variable="$theValue">
            <type>mixed</type>
          </tag>
          <tag name="param" line="228" description="&lt;tt&gt;TRUE&lt;/tt&gt; get old value." type="boolean" variable="$getOld">
            <type>boolean</type>
          </tag>
          <tag name="param" line="228" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="228" description="public"/>
          <tag name="return" line="228" description="&lt;i&gt;New&lt;/i&gt; or &lt;i&gt;old&lt;/i&gt; entities database." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="228" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="see" line="228" description="" link="\OntologyWrapper\$mEntities"/>
          <tag name="uses" line="228" description="" link="manageProperty()"/>
          <tag name="uses" line="228" description="" link="isInited()"/>
          <tag name="uses" line="228" description="" link="isReady()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theValue</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$getOld</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="307" package="Default">
        <name>Units</name>
        <full_name>\OntologyWrapper\Wrapper::Units()</full_name>
        <docblock line="307">
          <description>Manage units database</description>
          <long-description>This method can be used to manage the &lt;i&gt;units database&lt;/i&gt;, it accepts a
parameter which represents either the units database instance or the requested
operation, depending on its value:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;NULL&lt;/tt&gt;: Return the current value.
&lt;li&gt;&lt;tt&gt;FALSE&lt;/tt&gt;: Delete the current value.
&lt;li&gt;&lt;tt&gt;{@link DatabaseObject}&lt;/tt&gt;: Set the value with the provided parameter.
&lt;/ul&gt;

The second parameter is a boolean which if &lt;tt&gt;TRUE&lt;/tt&gt; will return the &lt;i&gt;old&lt;/i&gt;
value when replacing or resetting; if &lt;tt&gt;FALSE&lt;/tt&gt;, it will return the current
value.</long-description>
          <tag name="param" line="307" description="&lt;p&gt;Units database or operation.&lt;/p&gt;" type="mixed" variable="$theValue">
            <type>mixed</type>
          </tag>
          <tag name="param" line="307" description="&lt;tt&gt;TRUE&lt;/tt&gt; get old value." type="boolean" variable="$getOld">
            <type>boolean</type>
          </tag>
          <tag name="param" line="307" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="307" description="public"/>
          <tag name="return" line="307" description="&lt;i&gt;New&lt;/i&gt; or &lt;i&gt;old&lt;/i&gt; units database." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="307" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="see" line="307" description="" link="\OntologyWrapper\$mUnits"/>
          <tag name="uses" line="307" description="" link="manageProperty()"/>
          <tag name="uses" line="307" description="" link="isInited()"/>
          <tag name="uses" line="307" description="" link="isReady()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theValue</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$getOld</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="376" package="Default">
        <name>isConnected</name>
        <full_name>\OntologyWrapper\Wrapper::isConnected()</full_name>
        <docblock line="376">
          <description>Check if object is connected</description>
          <long-description>This method returns a boolean flag indicating whether the object is connected or not.
In practice this is true if the metadata, entities and units connections are open.</long-description>
          <tag name="access" line="376" description="public"/>
          <tag name="return" line="376" description="&lt;tt&gt;TRUE&lt;/tt&gt; is open." type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="376" description="" link="isInited()"/>
          <tag name="see" line="376" description="$mEntities $mUnits" link="\OntologyWrapper\$mMetadata"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="403" package="Default">
        <name>openConnections</name>
        <full_name>\OntologyWrapper\Wrapper::openConnections()</full_name>
        <docblock line="403">
          <description>Open connection</description>
          <long-description>This method can be used to connect the object's databases.</long-description>
          <tag name="access" line="403" description="public"/>
          <tag name="throws" line="403" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="403" description="" link="isInited()"/>
          <tag name="see" line="403" description="$mEntities $mUnits" link="\OntologyWrapper\$mMetadata"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="458" package="Default">
        <name>closeConnections</name>
        <full_name>\OntologyWrapper\Wrapper::closeConnections()</full_name>
        <docblock line="458">
          <description>Close connection</description>
          <long-description>This method can be used to close the object's database connections.</long-description>
          <tag name="access" line="458" description="public"/>
          <tag name="uses" line="458" description="" link="isConnected()"/>
          <tag name="see" line="458" description="$mEntities $mUnits" link="\OntologyWrapper\$mMetadata"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="517" package="Default">
        <name>resetOntology</name>
        <full_name>\OntologyWrapper\Wrapper::resetOntology()</full_name>
        <docblock line="517">
          <description>Reset databases</description>
          <long-description>This method can be used to reset the ontology, it will &lt;b&gt;erase the current
ontology&lt;/em&gt;, and re-load it from the files in the standards directory.

&lt;b&gt;&lt;em&gt;When you erase the ontology, you might lose tags and terms which are necessary
for the entities and the data databases: be aware that by doing so you might render
these databases useless&lt;/em&gt;&lt;/b&gt;.</long-description>
          <tag name="access" line="517" description="public"/>
          <tag name="throws" line="517" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="567" package="Default">
        <name>loadTagCache</name>
        <full_name>\OntologyWrapper\Wrapper::loadTagCache()</full_name>
        <docblock line="567">
          <description>Reload tag cache</description>
          <long-description>This method can be used to reset the tag cache.

The method will return &lt;tt&gt;TRUE&lt;/tt&gt; if the object is connected and the operation was
executes and &lt;tt&gt;FALSE&lt;/tt&gt; if the object is not connected, or if the metadata is
missing.

Note that although the operation might have been executed, this doesn't mean that the
dictionary was loaded: this depends on the contents of the metadata database.</long-description>
          <tag name="access" line="567" description="public"/>
          <tag name="throws" line="567" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="632" package="Default">
        <name>loadXMLFile</name>
        <full_name>\OntologyWrapper\Wrapper::loadXMLFile()</full_name>
        <docblock line="632">
          <description>Load an XML file</description>
          <long-description>This method can be used to load an XML file containing metadata, entities or units.
The method expects an XML file as the paraneter, any error during the load process
will raise an exception.</long-description>
          <tag name="param" line="632" description="&lt;p&gt;XML file path.&lt;/p&gt;" type="string" variable="$theFile">
            <type>string</type>
          </tag>
          <tag name="access" line="632" description="public"/>
          <tag name="throws" line="632" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theFile</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="709" package="Default">
        <name>loadXMLMetadata</name>
        <full_name>\OntologyWrapper\Wrapper::loadXMLMetadata()</full_name>
        <docblock line="709">
          <description>Parse and load metadata</description>
          <long-description>This method will parse and load the provided metadata XML structure.

It is assumed that the object has its comnnections open and that the provided XML
structure has the correct root element.</long-description>
          <tag name="param" line="709" description="&lt;p&gt;Metadata XML.&lt;/p&gt;" type="\OntologyWrapper\SimpleXMLElement" variable="$theXML">
            <type link="SimpleXMLElement.html">\OntologyWrapper\SimpleXMLElement</type>
          </tag>
          <tag name="access" line="709" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theXML</name>
          <default></default>
          <type>\OntologyWrapper\SimpleXMLElement</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="736" package="Default">
        <name>loadXMLEntities</name>
        <full_name>\OntologyWrapper\Wrapper::loadXMLEntities()</full_name>
        <docblock line="736">
          <description>Parse and load entities</description>
          <long-description>This method will parse and load the provided entities XML structure.

It is assumed that the object has its comnnections open and that the provided XML
structure has the correct root element.</long-description>
          <tag name="param" line="736" description="&lt;p&gt;Entities XML.&lt;/p&gt;" type="\OntologyWrapper\SimpleXMLElement" variable="$theXML">
            <type link="SimpleXMLElement.html">\OntologyWrapper\SimpleXMLElement</type>
          </tag>
          <tag name="access" line="736" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theXML</name>
          <default></default>
          <type>\OntologyWrapper\SimpleXMLElement</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="758" package="Default">
        <name>loadXMLUnits</name>
        <full_name>\OntologyWrapper\Wrapper::loadXMLUnits()</full_name>
        <docblock line="758">
          <description>Parse and load entities</description>
          <long-description>This method will parse and load the provided entities XML structure.

It is assumed that the object has its comnnections open and that the provided XML
structure has the correct root element.</long-description>
          <tag name="param" line="758" description="&lt;p&gt;Entities XML.&lt;/p&gt;" type="\OntologyWrapper\SimpleXMLElement" variable="$theXML">
            <type link="SimpleXMLElement.html">\OntologyWrapper\SimpleXMLElement</type>
          </tag>
          <tag name="access" line="758" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theXML</name>
          <default></default>
          <type>\OntologyWrapper\SimpleXMLElement</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="777" package="Default">
        <name>loadXMLMetadataBlock</name>
        <full_name>\OntologyWrapper\Wrapper::loadXMLMetadataBlock()</full_name>
        <docblock line="777">
          <description>Parse and load metadata block</description>
          <long-description>This method will parse and load the provided metadata transaction block.</long-description>
          <tag name="param" line="777" description="&lt;p&gt;Metadata transaction block.&lt;/p&gt;" type="\OntologyWrapper\SimpleXMLElement" variable="$theXML">
            <type link="SimpleXMLElement.html">\OntologyWrapper\SimpleXMLElement</type>
          </tag>
          <tag name="access" line="777" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theXML</name>
          <default></default>
          <type>\OntologyWrapper\SimpleXMLElement</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="822" package="Default">
        <name>loadXMLTerm</name>
        <full_name>\OntologyWrapper\Wrapper::loadXMLTerm()</full_name>
        <docblock line="822">
          <description>Parse and load XML term</description>
          <long-description>This method will parse and load the provided term XML structure.</long-description>
          <tag name="param" line="822" description="&lt;p&gt;Term XML structure.&lt;/p&gt;" type="\OntologyWrapper\SimpleXMLElement" variable="$theXML">
            <type link="SimpleXMLElement.html">\OntologyWrapper\SimpleXMLElement</type>
          </tag>
          <tag name="param" line="822" description="&lt;p&gt;Objects cache.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theCache">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="822" description="protected"/>
          <tag name="throws" line="822" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theXML</name>
          <default></default>
          <type>\OntologyWrapper\SimpleXMLElement</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theCache</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="922" package="Default">
        <name>loadXMLTag</name>
        <full_name>\OntologyWrapper\Wrapper::loadXMLTag()</full_name>
        <docblock line="922">
          <description>Parse and load XML tag</description>
          <long-description>This method will parse and load the provided tag XML structure.</long-description>
          <tag name="param" line="922" description="&lt;p&gt;Tag XML structure.&lt;/p&gt;" type="\OntologyWrapper\SimpleXMLElement" variable="$theXML">
            <type link="SimpleXMLElement.html">\OntologyWrapper\SimpleXMLElement</type>
          </tag>
          <tag name="param" line="922" description="&lt;p&gt;Objects cache.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theCache">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="922" description="protected"/>
          <tag name="throws" line="922" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theXML</name>
          <default></default>
          <type>\OntologyWrapper\SimpleXMLElement</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theCache</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="998" package="Default">
        <name>loadXMLElement</name>
        <full_name>\OntologyWrapper\Wrapper::loadXMLElement()</full_name>
        <docblock line="998">
          <description>Parse and load XML element</description>
          <long-description>This method will parse and load the provided XML element and return the tag, the
eventual array element key and the value in the provided references.

This method is called recursively, it will first parse the attributes of the element
determining the current tag, then it will traverse eventual embedded structures until
a scalar value is found which will be fed to the {@link castXMLScalarValue()} method
that will cast the value according to the most recent tag's data type.</long-description>
          <tag name="param" line="998" description="&lt;p&gt;Receives tag identifier.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theTag">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="998" description="&lt;p&gt;Receives key identifier.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theKey">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="998" description="&lt;p&gt;Receives tag value.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="998" description="&lt;p&gt;XML element.&lt;/p&gt;" type="\OntologyWrapper\SimpleXMLElement" variable="$theElement">
            <type link="SimpleXMLElement.html">\OntologyWrapper\SimpleXMLElement</type>
          </tag>
          <tag name="access" line="998" description="protected"/>
          <tag name="throws" line="998" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="998" description="" link="castXMLScalarValue()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theTag</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theKey</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theElement</name>
          <default></default>
          <type>\OntologyWrapper\SimpleXMLElement</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1135" package="Default">
        <name>castXMLScalarValue</name>
        <full_name>\OntologyWrapper\Wrapper::castXMLScalarValue()</full_name>
        <docblock line="1135">
          <description>Cast an XML scalar value</description>
          <long-description>This method will cast the provided XML scalar value according to the current offset.
The method accepts the tag reference and the XML element, it will return the cast
value.

Note that this method expects a scalar value, although the provided tag reference
may refer to a list of values.

This method will handle directly a series of default tags, this is necessary when
loading the ontology for the first time, because tags cannot be resolved.</long-description>
          <tag name="param" line="1135" description="&lt;p&gt;Element XML.&lt;/p&gt;" type="\OntologyWrapper\SimpleXMLElement" variable="$theElement">
            <type link="SimpleXMLElement.html">\OntologyWrapper\SimpleXMLElement</type>
          </tag>
          <tag name="param" line="1135" description="&lt;p&gt;Tag reference.&lt;/p&gt;" type="integer" variable="$theTag">
            <type>integer</type>
          </tag>
          <tag name="access" line="1135" description="protected"/>
          <tag name="return" line="1135" description="Cast value." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="1135" description="" link="OntologyObject::castOffsetValue()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theElement</name>
          <default></default>
          <type>\OntologyWrapper\SimpleXMLElement</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theTag</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1206" package="Default">
        <name>isReady</name>
        <full_name>\OntologyWrapper\Wrapper::isReady()</full_name>
        <docblock line="1206">
          <description>Check if object is ready</description>
          <long-description>This method returns a boolean flag indicating whether the object is ready to be
connected, in practice, this is true if the object has the metadata, entities and
units connections.</long-description>
          <tag name="access" line="1206" description="protected"/>
          <tag name="return" line="1206" description="&lt;tt&gt;TRUE&lt;/tt&gt; is ready." type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="see" line="1206" description="$mEntities $mUnits" link="\OntologyWrapper\$mMetadata"/>
        </docblock>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/Tag.php" generated-path="OntologyWrapper.Tag.html" hash="ba589b61d5e886cd1bcf08a2d794ec1f" package="Default">
    <docblock line="0">
      <description>Tag.php</description>
      <long-description>This file contains the definition of the {@link Tag} class.</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="OntologyWrapper" line="142" package="Default">
      <extends>\OntologyWrapper\PersistentObject</extends>
      <name>Tag</name>
      <full_name>\OntologyWrapper\Tag</full_name>
      <docblock line="142">
        <description>Tag</description>
        <long-description>A tag object is used to &lt;i&gt;identify&lt;/i&gt;, &lt;i&gt;document&lt;/i&gt; and &lt;i&gt;share&lt;/i&gt; a data
property, it represents the &lt;i&gt;metadata&lt;/i&gt; of a data property, or its &lt;i&gt;definition&lt;/i&gt;
in an ontology.

This class features a {@link kTAG_TERMS} offset which is an array of {@link Term}
references representing a path of vertex and predicate terms of the ontology graph, this
chain of elements represents a lexical construct, like a phrase, that provides the
explanation or definition of the current object.

Using a chain of terms, rather than a single term, to provide metadata for a data element
gives much more flexibility and reusability when defining a data dictionary. This
sequence is divided in three main sections:

&lt;ul&gt;
&lt;li&gt;&lt;i&gt;Feature&lt;/i&gt;: The first vertex represents the data element feature or trait, this
	term defines &lt;em&gt;what the data element is&lt;/em&gt;.
&lt;li&gt;&lt;i&gt;Method&lt;/i&gt;: The vertices between the first and the last ones represent the
	&lt;em&gt;methodology&lt;/em&gt; or &lt;em&gt;method&lt;/em&gt; by which the described data was obtained.
&lt;li&gt;&lt;i&gt;Scale&lt;/i&gt;: The last vertex of the path represents the &lt;em&gt;unit&lt;/em&gt; or
	&lt;em&gt;scale&lt;/em&gt; in which the described value is expressed in.
&lt;/ul&gt;

The concatenation of these term references, separated by the
{@link kTOKEN_INDEX_SEPARATOR} becomes the object global identifier which is stored in
the object's native identifier offset.

Tags have another offset, {@link kTAG_ID_SEQUENCE}, which is an integer sequence number:
this value must be unique within the tags domain of the current ontology. Unlike global
identifiers, this value may change across implementations, but this is the value used to
uniquely identify tags among the other elements of the ontology and database.

&lt;em&gt;All offsets in all classes, including this one, are tag sequence numbers, which makes
the Tag class key in the structure and behaviour of all the elements implemented in this
library&lt;/em&gt;.

The class features the following default offsets:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;{@link kTAG_NID}&lt;/tt&gt;: &lt;em&gt;Native identifier&lt;/em&gt;. This required attribute holds
	a string value which represents the global identifier of the current object. This
	identifier is immutable and represents the unique key. This string is constituted by
	the concatenation of all term references stored in the current object's branch,
	{@link kTAG_TERMS}. This attribute must be managed with its offset; in derived
	classes it will be automatically assigned end only available as read-only.
&lt;li&gt;&lt;tt&gt;{@link kTAG_ID_SEQUENCE}&lt;/tt&gt;: &lt;em&gt;Sequence&lt;/em&gt;. This required attribute holds
	an integer value which represents the current object's sequence number, as with the
	global identifier, this value must be unique, except that it may change across
	implementations. All offset keys in all objects derived from this class ancestor are
	references to this sequence number. This attribute must be managed with its offset;
	in derived classes it will be automatically assigned end only available as
	read-only.
&lt;li&gt;&lt;tt&gt;{@link kTAG_TERMS}&lt;/tt&gt;: &lt;em&gt;Branch&lt;/em&gt;. This required attribute holds
	the list of terms comprising the current tag: this is an array of term references
	provided as an odd sequence of vertices and predicates forming a path of the
	ontology graph in which the first vertex defines the feature, the middle ones
	define the methodology and the last element indicates the scale or unit. To populate
	the elements of this path, use the {@link TermPush()} amd {@link TermPop()}
	offset accessor methods which respectively add and remove elements of the branch as
	if it was a stack.
&lt;li&gt;&lt;tt&gt;{@link kTAG_DATA_TYPE}&lt;/tt&gt;: &lt;em&gt;Data type&lt;/em&gt;. This attribute is an enumerated
	set of values listing all the &lt;em&gt;data types&lt;/em&gt; that the value of the property
	defined by the current tag may take. To populate and handle individual data types
	use the {@link DataType()} offset accessor method. This property is
	&lt;em&gt;required&lt;/em&gt; by all tag objects.
&lt;li&gt;&lt;tt&gt;{@link kTAG_DATA_KIND}&lt;/tt&gt;: &lt;em&gt;Data kind&lt;/em&gt;. This attribute is an enumerated
	set of values providing the &lt;em&gt;data attributes&lt;/em&gt; of the property defined by the
	current tag. This may be whether the property is a list of values, or if the
	property is required or not. To populate and handle individual data kinds use the
	{@link DataKind()} offset accessor method.
&lt;li&gt;&lt;tt&gt;{@link kTAG_LABEL}&lt;/tt&gt;: &lt;em&gt;Label&lt;/em&gt;. The label represents the &lt;i&gt;name or
	short description&lt;/i&gt; of the data property that the current object defines. All tags
	&lt;em&gt;should&lt;/em&gt; have a label, since this is how human users will be able to identify
	and select them. This attribute has the {@link kTYPE_LANGUAGE_STRINGS} data type,
	which is constituted by a list of elements in which the {@link kTAG_LANGUAGE} item
	holdsthe label language code and the {@link kTAG_TEXT} holds the label text. To
	populate and handle labels by language, use the {@link Label()} offset accessor
	method.
&lt;li&gt;&lt;tt&gt;{@link kTAG_DESCRIPTION}&lt;/tt&gt;: &lt;em&gt;Description&lt;/em&gt;. The description tag
	represents the &lt;i&gt;description or extended definition&lt;/i&gt; of the property that the
	current tag defines. The description is similar to the &lt;em&gt;definition&lt;/em&gt;, except
	that while the definition provides a description of the object it defines unrelated
	to context, the description adds to the definition the elements added by the current
	context. All tags &lt;em&gt;should&lt;/em&gt; have a description, if the tag label is not enough
	to provide a sufficient description or definition. Descriptions have the
	{@link kTYPE_LANGUAGE_STRINGS} data type, which is constituted by a list of elements
	in which the {@link kTAG_LANGUAGE} item holds the description language code and the
	{@link kTAG_TEXT} holds the description text. To populate and handle
	descriptions by language, use the {@link Description()} offset accessor method.
&lt;/ul&gt;

The {@link __toString()} method will return the value stored in the global identifier,
if set, or the computed global identifier which is the concatenation of all term
references stored in the {@link kTAG_TERMS} offset, separated by the
{@link kTOKEN_INDEX_SEPARATOR}.

The class also features a pair of methods, {@link Feature()} and {@link Scale()}, which
respectively return the first and last vertex of the ontology branch this object
represents: the feature is a term that represents the main feature or trait that the
current tag defines, the scale is a term that represents the scale or unit in which
values defined by the current tag are expressed in.

Objects of this class can hold any additional attribute that is considered necessary or
useful to define and share the current tag. In this class we define only those
attributes that constitute the core functionality of the object, derived classes will add
attributes specific to the domain in which the object will operate and eventually
restrict the functionality of other offsets to provide referential integrity.

The object is considered initialised, {@link isInited()}, if it has at least the terms
path, {@link kTAG_TERMS}, with an odd number of elements, the data type,
{@link kTAG_DATA_TYPE}, and the label, {@link kTAG_LABEL}.

In this class we set the sequence number, {@link kTAG_ID_SEQUENCE}, by retrieving a</long-description>
        <tag name="author" line="142" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="142" description="1.00 07/02/2014"/>
      </docblock>
      <constant namespace="OntologyWrapper" line="187" package="Default">
        <name>kSEQ_NAME</name>
        <full_name>\OntologyWrapper\Tag::kSEQ_NAME</full_name>
        <value>'_tags'</value>
        <docblock line="187">
          <description>Sequences selector.</description>
          <long-description>This constant holds the &lt;i&gt;sequences&lt;/i&gt; name for tags; this constant is also used as
the &lt;i&gt;default collection name&lt;/i&gt; in which objects of this class are stored.</long-description>
          <tag name="var" line="187" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="218" package="Default">
        <name>__construct</name>
        <full_name>\OntologyWrapper\Tag::__construct()</full_name>
        <docblock line="218">
          <description>Instantiate class.</description>
          <long-description>In this class we link the inited status with the presence of the terms list, the data
type and the label.</long-description>
          <tag name="param" line="218" description="&lt;p&gt;Persistent store.&lt;/p&gt;" type="\OntologyWrapper\ConnectionObject" variable="$theContainer">
            <type link="ConnectionObject.html">\OntologyWrapper\ConnectionObject</type>
          </tag>
          <tag name="param" line="218" description="&lt;p&gt;Object identifier.&lt;/p&gt;" type="mixed" variable="$theIdentifier">
            <type>mixed</type>
          </tag>
          <tag name="access" line="218" description="public"/>
          <tag name="uses" line="218" description="" link="instantiateObject()"/>
          <tag name="uses" line="218" description="" link="TermCount()"/>
          <tag name="uses" line="218" description="" link="isInited()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theContainer</name>
          <default>NULL</default>
          <type>\OntologyWrapper\ConnectionObject</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="252" package="Default">
        <name>__toString</name>
        <full_name>\OntologyWrapper\Tag::__toString()</full_name>
        <docblock line="252">
          <description>&lt;h4&gt;Return global identifier&lt;/h4&gt;</description>
          <long-description>The global identifier of tags is stored in its {@link kTAG_NID} offset: if set, this
method will return that value. If that offset is not set, the method will concatenate
the value of all the elements of the {@link kTAG_TERMS} separated by the
{@link kTOKEN_INDEX_SEPARATOR} token.

If the {@link kTAG_TERMS} offset is not set, the method will return an empty string.</long-description>
          <tag name="access" line="252" description="public"/>
          <tag name="return" line="252" description="The global identifier." type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="299" package="Default">
        <name>ResolveDatabase</name>
        <full_name>\OntologyWrapper\Tag::ResolveDatabase()</full_name>
        <docblock line="299">
          <description>Resolve the database</description>
          <long-description>In this class we return the metadata database.</long-description>
          <tag name="param" line="299" description="&lt;p&gt;Wrapper.&lt;/p&gt;" type="\OntologyWrapper\Wrapper" variable="$theWrapper">
            <type link="Wrapper.html">\OntologyWrapper\Wrapper</type>
          </tag>
          <tag name="param" line="299" description="&lt;p&gt;Raise exception if unable.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="param" line="299" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="static" line="299" description=""/>
          <tag name="return" line="299" description="Database or &lt;tt&gt;NULL&lt;/tt&gt;." type="\OntologyWrapper\DatabaseObject">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
          <tag name="throws" line="299" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theWrapper</name>
          <default></default>
          <type>\OntologyWrapper\Wrapper</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="353" package="Default">
        <name>preCommitIdentify</name>
        <full_name>\OntologyWrapper\Tag::preCommitIdentify()</full_name>
        <docblock line="353">
          <description>Set object identifiers before commit</description>
          <long-description>In this class we set the native identifier, if not yet filled, with the global
identifier generated by the {@link __toString()} method and we set the sequence
number, {@link kTAG_ID_SEQUENCE}, if it is not yet set, by requesting it from the
database of the current object's container.</long-description>
          <tag name="access" line="353" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="401" package="Default">
        <name>postCommit</name>
        <full_name>\OntologyWrapper\Tag::postCommit()</full_name>
        <docblock line="401">
          <description>Cleanup object after commit</description>
          <long-description>In this class we set the newly inserted or updated tag into the cache, or delete it
from the cache if deleting.</long-description>
          <tag name="param" line="401" description="&lt;p&gt;Operation code.&lt;/p&gt;" type="\OntologyWrapper\bitfield" variable="$theOperation">
            <type link="bitfield.html">\OntologyWrapper\bitfield</type>
          </tag>
          <tag name="access" line="401" description="protected"/>
          <tag name="see" line="401" description="kTAG_ID_SEQUENCE" link="\OntologyWrapper\kTAG_NID"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOperation</name>
          <default>0</default>
          <type>\OntologyWrapper\bitfield</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="450" package="Default">
        <name>isReady</name>
        <full_name>\OntologyWrapper\Tag::isReady()</full_name>
        <docblock line="450">
          <description>Check if object is ready</description>
          <long-description>In this class we ensure the object has the sequence number, {@link kTAG_ID_SEQUENCE}
and the native identifier, {@link kTAG_NID}.</long-description>
          <tag name="access" line="450" description="protected"/>
          <tag name="return" line="450" description="&lt;tt&gt;TRUE&lt;/tt&gt; means ready." type="Boolean">
            <type>Boolean</type>
          </tag>
          <tag name="see" line="450" description="kTAG_ID_SEQUENCE" link="\OntologyWrapper\kTAG_NID"/>
          <tag name="uses" line="450" description="" link="isInited()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="485" package="Default">
        <name>preOffsetSet</name>
        <full_name>\OntologyWrapper\Tag::preOffsetSet()</full_name>
        <docblock line="485">
          <description>Handle offset and value before setting it</description>
          <long-description>In this class we cast the value of the sequence number into an integer.</long-description>
          <tag name="param" line="485" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="485" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="485" description="protected"/>
          <tag name="return" line="485" description="&lt;tt&gt;NULL&lt;/tt&gt; set offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="see" line="485" description="" link="\OntologyWrapper\kTAG_NAMESPACE"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="525" package="Default">
        <name>postOffsetSet</name>
        <full_name>\OntologyWrapper\Tag::postOffsetSet()</full_name>
        <docblock line="525">
          <description>Handle offset and value after setting it</description>
          <long-description>In this class we link the inited status with the presence of the terms list, the data
type and the label.</long-description>
          <tag name="param" line="525" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="525" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="525" description="protected"/>
          <tag name="see" line="525" description="kTAG_LABEL" link="\OntologyWrapper\kTAG_DATA_TYPE"/>
          <tag name="uses" line="525" description="" link="TermCount()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="560" package="Default">
        <name>postOffsetUnset</name>
        <full_name>\OntologyWrapper\Tag::postOffsetUnset()</full_name>
        <docblock line="560">
          <description>Handle offset after deleting it</description>
          <long-description>In this class we link the inited status with the presence of the terms list, the data
type and the label.</long-description>
          <tag name="param" line="560" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="560" description="protected"/>
          <tag name="see" line="560" description="kTAG_LABEL" link="\OntologyWrapper\kTAG_DATA_TYPE"/>
          <tag name="uses" line="560" description="" link="TermCount()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="601" package="Default">
        <name>lockedOffsets</name>
        <full_name>\OntologyWrapper\Tag::lockedOffsets()</full_name>
        <docblock line="601">
          <description>Return list of locked offsets</description>
          <long-description>In this class we return the {@link kTAG_ID_SEQUENCE}, {@link kTAG_TERMS},
{@link kTAG_DATA_TYPE} and the {@link kTAG_DATA_KIND} offsets.</long-description>
          <tag name="access" line="601" description="protected"/>
          <tag name="return" line="601" description="List of locked offsets." type="array">
            <type>array</type>
          </tag>
          <tag name="see" line="601" description="kTAG_TERMS kTAG_DATA_TYPE kTAG_DATA_KIND" link="\OntologyWrapper\kTAG_ID_SEQUENCE"/>
        </docblock>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/Dictionary.php" generated-path="OntologyWrapper.Dictionary.html" hash="d486aa76158e06bc15d5121139a3d2bc" package="Default">
    <docblock line="0">
      <description>Dictionary.php</description>
      <long-description>This file contains the definition of the {@link Dictionary} class.</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="OntologyWrapper" line="31" package="Default">
      <extends>\OntologyWrapper\DictionaryObject</extends>
      <name>Dictionary</name>
      <full_name>\OntologyWrapper\Dictionary</full_name>
      <docblock line="31">
        <description>Dictionary</description>
        <long-description>This class implements a &lt;em&gt;concrete&lt;/em&gt; instance of the {@link DictionaryObject} class
which uses the {@link MemcachedDictionary} trait to implement the dictionary cache.

This class implements a constructor which expects the {@link Memcached} persistent
identifier and the list of servers.</long-description>
        <tag name="author" line="31" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="31" description="1.00 16/02/2014"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="91" package="Default">
        <name>__construct</name>
        <full_name>\OntologyWrapper\Dictionary::__construct()</full_name>
        <docblock line="91">
          <description>Instantiate class.</description>
          <long-description>The constructor accepts two parameters:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;$theIdentifier&lt;/b&gt;: This string parameter represents the {@limk Memcached}
	persistent identifier provided to its constructor, the parameter is required,
	since the cache should be active across sessions.
&lt;li&gt;&lt;b&gt;$theServers&lt;/b&gt;: This array parameter represents the list of servers that
	serve the cache, it is equivalent to the parameter of the
	{@link Memcached::addServers()} method, it is a list of elements comprised by
	three parameters:
 &lt;ul&gt;
	&lt;li&gt;&lt;i&gt;Host&lt;/i&gt;: The server host.
	&lt;li&gt;&lt;i&gt;Port&lt;/i&gt;: The server port.
	&lt;li&gt;&lt;i&gt;Weight&lt;/i&gt;: The weight of the server relative to the total weight of all
		the servers in the pool.
 &lt;/ul&gt;
	This parameter may be omitted if the cache has been instantiate elsewhere with
	the same persistent identifier.
&lt;/ul&gt;

The constructor will first instantiate the {@link Memcached} object, then it will
check if the connection resource has already a list of servers associated, if that is
the case we assume the cache is already initialised; if that is not the case, we
will add the servers provided in the second parameter.</long-description>
          <tag name="param" line="91" description="&lt;p&gt;Persistent identifier.&lt;/p&gt;" type="mixed" variable="$theIdentifier">
            <type>mixed</type>
          </tag>
          <tag name="param" line="91" description="&lt;p&gt;List of servers.&lt;/p&gt;" type="array" variable="$theServers">
            <type>array</type>
          </tag>
          <tag name="access" line="91" description="public"/>
          <tag name="throws" line="91" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="91" description="" link="init()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theServers</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <source>eJzFV9tu4zYQfZa+YgLkwQ6ycrJY9MFxtAmyvQRIdoN2i7wsENASbbGhRJWk4gSLfEL/oR/T/leHQ13oS9q+pPVDYpEzhzPnzIzo2fu6qON4cnAQwwF8EJkVqmL6KXHLQIufC2FgISSHTFWWicqALTjkfCEq4cxBLWjl65kU1X0A8gyZZMYkiDKJ44qV3NQs4/Cpskqq5dOtZnXN9UkcN2Zr9cuA82n+C8/siQvz9HU+GGG083MQ7qzT84LRlvvrROwY3VItVIyoB1HWkpe8sgYYzHiZooaZ5pbPJvgAKKZlFUrykoSe+lZIh70qRFYA6mVCh2teZiwreB6KbzUTFqwagvCF05sA+ST/EDVGbKxuMqt0ezp/rDGo3QE8A9aOEcait0MVOX4RC8E1sConF4m7LmHD9QPatudHZ6yxhdJRdC3kvYLzBP78/V4txB+/waxMjPuanWVLwXSi9DIlF+ePuUTHydERHH8zOXo7eXt0/I4K3qcyEIJhY1C52WI3/hpHTsoIw+3zCGkiIhO3Tza33PGPqSBf/5rjyIUUoV9ELubLDsmww6Lof++y6Pr8+8uLF3f/u/ZCzpwwr4Du1Iju7vrK3pVZ9BqpubT6Wruk5reCWd4N6q7EPhd8re9YlvHaddxKQc00TnKLlT/t7WeNTCmpmRTpbJ7uYxFe9p03m8zTqe9vRBTVcsAAzWvNDbV6185l2M6EGg09HTZ0rdUDPuZU/wgQRHxIaMMxeLTmvzZC8/zQQxrh5p6zopPAFKqROcw5JmvFg/unFTYwTjrX4p6cML+f/PgIkmNas6eXc9uYO7jGbBuLWxliOcRsXMQu4AcmqanVRkJ+YHv3zRk4nbI8b8MbjZ8BPQqVd6isD4R3QzZTZa2FQSbnTx7SFprzTamjQWdPhEh/UMbOJoIY4G1mUOBismZ2o/S2WY2L62a3XCyLwHBFz93LqXXTXDISqOXEKstkYMqk9KDR4ISvlMoTqJRM2lwmfTKk3sBtiSpiHahSWIuciEVQJgUzuMer9tXpu4dLw1cF1xixsEXHIB6OgLCzdhPfNl0IO5tuJaTEi5dGscLDdr/1FL1KqOwrJ7RzJlTczu77HFRVcRr3SKNRjc58RkxqzvKnoDY63nAsqMyd6+pnQTWLRUTInhTjZHJmTRm2kxhA6ZrIpKuvkwADKmV7jEMEIVBKGssXQvH6Rm9VNBwTyQfFhsF1RmtQikee0yBdn0RRdPOyGq0vdXHv27YRPl1tXhv6M910xElRN3MpsmEZe0itDHz76GYnUj7s0PXJ0TIaty9m7wuLpvLqBC+HEazncAhBXHAKH3++ugLEwVtENJnQH7jAJnD0uDSDkko6E781nYbHjE/c23/AuMT44ObyQ++0724cb9LyRuR47MiP8vFGdLtAulLbQrqgUjmFiq9guJBQwv1JO8PqLjV+VSxGsId5NpUdfAn7Tbrk1lPl5BuNYeyoIq68L7FFLTLo2m05XGHuqCBGa6x7FA/TGjugc6zbEKbb8gFuRBbM6F3YLXi0n6nccbSd14/cNNJe4LbXzhnjTyzDln9nf+0teheqUq9AX6kYUAuExUbnj0+iNse9sz04PU2dMwE8Ay5+x/D3YZ50i7R20zVtyEjcbn5UNpwLCV5LaP0iLFZ3AYtpefMujXvx+zT+C3ayRgg=</source>
  </file>
  <file path="OntologyWrapper/Term.php" generated-path="OntologyWrapper.Term.html" hash="ff79d82404d32ce80f500f4563fc6902" package="Default">
    <docblock line="0">
      <description>Term.php</description>
      <long-description>This file contains the definition of the {@link Term} class.</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="OntologyWrapper" line="85" package="Default">
      <extends>\OntologyWrapper\PersistentObject</extends>
      <name>Term</name>
      <full_name>\OntologyWrapper\Term</full_name>
      <docblock line="85">
        <description>Term</description>
        <long-description>A term object holds the necessary information to &lt;i&gt;uniquely identify&lt;/i&gt;,
&lt;i&gt;document&lt;/i&gt; and &lt;i&gt;share&lt;/i&gt; a &lt;i&gt;generic term or concept&lt;/i&gt; which is &lt;i&gt;not related
to a specific context&lt;/i&gt;.

For instance, a &lt;tt&gt;name&lt;/tt&gt; is defined as a string or text that identifies something,
this is true for both a person name or an object name, however, the term &lt;tt&gt;name&lt;/tt&gt;
will bare a different meaning depending on what context it is used in: the term object
holds the definition of that will not change with its context.

The class features the following default offsets:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;{@link kTAG_NID}&lt;/tt&gt;: &lt;em&gt;Native identifier&lt;/em&gt;. This required attribute holds
	the term global identifier. By convention this value is the combination of the
	namespace, {@link kTAG_NAMESPACE}, and the local identifier, {@link kTAG_ID_LOCAL},
	separated by the {@link kTOKEN_NAMESPACE_SEPARATOR} token. In practice, the global
	identifier may be manually set. This attribute must be managed with its offset.
&lt;li&gt;&lt;tt&gt;{@link kTAG_NAMESPACE}&lt;/tt&gt;: &lt;em&gt;Namespace&lt;/em&gt;. This optional attribute is a
	reference to another term object that represents the namespace of the current term.
	It is by definition the global identifier of the namespace term. This attribute must
	be managed with its offset.
&lt;li&gt;&lt;tt&gt;{@link kTAG_ID_LOCAL}&lt;/tt&gt;: &lt;em&gt;Local identifier&lt;/em&gt;. This required attribute
	is a string that represents the current term unique identifier within its namespace.
	The combination of the current term's namespace and this attribute form the term's
	global identifier. This attribute must be managed with its offset.
&lt;li&gt;&lt;tt&gt;{@link kTAG_LABEL}&lt;/tt&gt;: &lt;em&gt;Label&lt;/em&gt;. The label represents the &lt;i&gt;name or
	short description&lt;/i&gt; of the term that the current object defines. All terms
	&lt;em&gt;should&lt;/em&gt; have a label, since this is how human users will be able to identify
	and select them. This attribute has the {@link kTYPE_LANGUAGE_STRINGS} data type,
	which is constituted by a list of elements in which the {@link kTAG_LANGUAGE} item
	holds the label language code and the {@link kTAG_TEXT} holds the label text. To
	populate and handle labels by language, use the {@link Label()} offset accessor
	method. Some terms may not have a language element, for instance the number
	&lt;tt&gt;2&lt;/tt&gt; may not need to be expressed in other ways.
&lt;li&gt;&lt;tt&gt;{@link kTAG_DEFINITION}&lt;/tt&gt;: &lt;em&gt;Definition&lt;/em&gt;. The definition represents the
	&lt;i&gt;description or extended definition&lt;/i&gt; of the term that the current object object
	defines. The definition is similar to the &lt;em&gt;description&lt;/em&gt;, except that while
	the description provides context specific information, the definition should not.
	All terms &lt;em&gt;should&lt;/em&gt; have a definition, if the object label is not enough to
	provide a sufficient definition. Definitions have the {@link kTYPE_LANGUAGE_STRINGS}
	data type in which the {@link kTAG_LANGUAGE} element holds the definition language
	code and the {@link kTAG_TEXT} holds the definition text. To populate and handle
	definitions by language, use the {@link Definition()} offset accessor method.
&lt;/ul&gt;

The {@link __toString()} method will return the value stored in the native identifier,
if set, or the computed global identifier if at least the local identifier is set; if the
latter is not set, the method will fail.

Objects of this class can hold any additional attribute that is considered necessary or
useful to define and share the current term. In this class we define only those
attributes that constitute the core functionality of the object, derived classes will add
attributes specific to the domain in which the object will operate.

The object is considered initialised, {@link isInited()}, if it has at least the local
identifier, {@link kTAG_ID_LOCAL}, and the label, {@link kTAG_LABEL}.</long-description>
        <tag name="author" line="85" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="85" description="1.00 07/02/2014"/>
      </docblock>
      <constant namespace="OntologyWrapper" line="109" package="Default">
        <name>kSEQ_NAME</name>
        <full_name>\OntologyWrapper\Term::kSEQ_NAME</full_name>
        <value>'_terms'</value>
        <docblock line="109">
          <description>Default collection name.</description>
          <long-description>This constant provides the &lt;i&gt;default collection name&lt;/i&gt; in which objects of this
class are stored.</long-description>
          <tag name="var" line="109" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="140" package="Default">
        <name>__construct</name>
        <full_name>\OntologyWrapper\Term::__construct()</full_name>
        <docblock line="140">
          <description>Instantiate class.</description>
          <long-description>In this class we link the inited status with the presence of the local identifier and
the label.</long-description>
          <tag name="param" line="140" description="&lt;p&gt;Persistent store.&lt;/p&gt;" type="\OntologyWrapper\ConnectionObject" variable="$theContainer">
            <type link="ConnectionObject.html">\OntologyWrapper\ConnectionObject</type>
          </tag>
          <tag name="param" line="140" description="&lt;p&gt;Object identifier.&lt;/p&gt;" type="mixed" variable="$theIdentifier">
            <type>mixed</type>
          </tag>
          <tag name="access" line="140" description="public"/>
          <tag name="uses" line="140" description="" link="isInited()"/>
          <tag name="see" line="140" description="kTAG_LABEL" link="\OntologyWrapper\kTAG_ID_LOCAL"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theContainer</name>
          <default>NULL</default>
          <type>\OntologyWrapper\ConnectionObject</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="174" package="Default">
        <name>__toString</name>
        <full_name>\OntologyWrapper\Term::__toString()</full_name>
        <docblock line="174">
          <description>&lt;h4&gt;Return global identifier&lt;/h4&gt;</description>
          <long-description>If the native identifier, {@link kTAG_NID}, is set, this method will return its
value. If that offset is not yet set, the method will compute the global identifier
by concatenating the object's namespace, {@link kTAG_NAMESPACE}, with the object's
local identifier, {@link kTAG_ID_LOCAL}, separated by the
{@link kTOKEN_NAMESPACE_SEPARATOR} token. This will only occur if the object has the
local identifier, if that is not the case, the method will return an empty string to
prevent the method from causing an error.</long-description>
          <tag name="access" line="174" description="public"/>
          <tag name="return" line="174" description="The global identifier." type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="224" package="Default">
        <name>ResolveDatabase</name>
        <full_name>\OntologyWrapper\Term::ResolveDatabase()</full_name>
        <docblock line="224">
          <description>Resolve the database</description>
          <long-description>In this class we return the metadata database.</long-description>
          <tag name="param" line="224" description="&lt;p&gt;Wrapper.&lt;/p&gt;" type="\OntologyWrapper\Wrapper" variable="$theWrapper">
            <type link="Wrapper.html">\OntologyWrapper\Wrapper</type>
          </tag>
          <tag name="param" line="224" description="&lt;p&gt;Raise exception if unable.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="param" line="224" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="static" line="224" description=""/>
          <tag name="return" line="224" description="Database or &lt;tt&gt;NULL&lt;/tt&gt;." type="\OntologyWrapper\DatabaseObject">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
          <tag name="throws" line="224" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theWrapper</name>
          <default></default>
          <type>\OntologyWrapper\Wrapper</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="282" package="Default">
        <name>DefaultOffsets</name>
        <full_name>\OntologyWrapper\Term::DefaultOffsets()</full_name>
        <docblock line="282">
          <description>Return default offsets</description>
          <long-description>This method will return the current object list of default offsets, these offsets
represent the default offsets of the object, which means that all objects derived
from this class may feature these offsets. This method is used to exclude these
offsets from statistical procedures, such as {@link CollectOffsets()}, since it is
implied that these offsets will be there.

In this class we return an empty array.</long-description>
          <tag name="static" line="282" description=""/>
          <tag name="return" line="282" description="List of default offsets." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="312" package="Default">
        <name>preCommitIdentify</name>
        <full_name>\OntologyWrapper\Term::preCommitIdentify()</full_name>
        <docblock line="312">
          <description>Set object identifiers before commit</description>
          <long-description>In this class we set the native identifier, if not yet filled, with the global
identifier generated by the {@link __toString()} method.</long-description>
          <tag name="access" line="312" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="354" package="Default">
        <name>isReady</name>
        <full_name>\OntologyWrapper\Term::isReady()</full_name>
        <docblock line="354">
          <description>Check if object is ready</description>
          <long-description>In this class we ensure the object is initialised, {@link isInited()} and has the
native identifier.</long-description>
          <tag name="access" line="354" description="protected"/>
          <tag name="return" line="354" description="&lt;tt&gt;TRUE&lt;/tt&gt; means ready." type="Boolean">
            <type>Boolean</type>
          </tag>
          <tag name="see" line="354" description="" link="\OntologyWrapper\kTAG_NID"/>
          <tag name="uses" line="354" description="" link="isInited()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="391" package="Default">
        <name>preOffsetSet</name>
        <full_name>\OntologyWrapper\Term::preOffsetSet()</full_name>
        <docblock line="391">
          <description>Handle offset and value before setting it</description>
          <long-description>In this class we cast the value of the namespace into a term reference, ensuring
that if an object is provided this is a term.</long-description>
          <tag name="param" line="391" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="391" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="391" description="protected"/>
          <tag name="return" line="391" description="&lt;tt&gt;NULL&lt;/tt&gt; set offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="391" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="see" line="391" description="" link="\OntologyWrapper\kTAG_NAMESPACE"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="435" package="Default">
        <name>postOffsetSet</name>
        <full_name>\OntologyWrapper\Term::postOffsetSet()</full_name>
        <docblock line="435">
          <description>Handle offset and value after setting it</description>
          <long-description>In this class we set the {@link isInited()} status if the object has the local
identifier and the label.</long-description>
          <tag name="param" line="435" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="435" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="435" description="protected"/>
          <tag name="see" line="435" description="kTAG_LABEL" link="\OntologyWrapper\kTAG_ID_LOCAL"/>
          <tag name="uses" line="435" description="" link="isInited()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="469" package="Default">
        <name>postOffsetUnset</name>
        <full_name>\OntologyWrapper\Term::postOffsetUnset()</full_name>
        <docblock line="469">
          <description>Handle offset after deleting it</description>
          <long-description>In this class we reset the {@link isInited()} status if the object is missing the
local identifier or the label.</long-description>
          <tag name="param" line="469" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="469" description="protected"/>
          <tag name="see" line="469" description="kTAG_LABEL" link="\OntologyWrapper\kTAG_ID_LOCAL"/>
          <tag name="uses" line="469" description="" link="isInited()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="509" package="Default">
        <name>lockedOffsets</name>
        <full_name>\OntologyWrapper\Term::lockedOffsets()</full_name>
        <docblock line="509">
          <description>Return list of locked offsets</description>
          <long-description>In this class we return the {@link kTAG_NAMESPACE} and the {@link kTAG_ID_LOCAL}
offsets.</long-description>
          <tag name="access" line="509" description="protected"/>
          <tag name="return" line="509" description="List of locked offsets." type="array">
            <type>array</type>
          </tag>
          <tag name="see" line="509" description="kTAG_ID_LOCAL" link="\OntologyWrapper\kTAG_NAMESPACE"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="549" package="Default">
        <name>validateNewNamespace</name>
        <full_name>\OntologyWrapper\Term::validateNewNamespace()</full_name>
        <docblock line="549">
          <description>Validate new namespace</description>
          <long-description>This method is called by the {@link preOffsetSet()} method when provided a new
namespace, {@link kTAG_NAMESPACE}: its duty is to:

&lt;ul&gt;
&lt;li&gt;If provided an object, check whether it is a term.
&lt;li&gt;If provided an object and the object is committed, get its native identifier.
&lt;/ul&gt;</long-description>
          <tag name="param" line="549" description="&lt;p&gt;Namespace reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="549" description="protected"/>
          <tag name="return" line="549" description="List of locked offsets." type="array">
            <type>array</type>
          </tag>
          <tag name="see" line="549" description="kTAG_ID_LOCAL" link="\OntologyWrapper\kTAG_NAMESPACE"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="616" package="Default">
        <name>test</name>
        <full_name>\OntologyWrapper\Term::test()</full_name>
        <docblock line="616">
          <description>Validate new namespace</description>
          <long-description>This method is called by the {@link preOffsetSet()} method when provided a new
namespace, {@link kTAG_NAMESPACE}: its duty is to:

&lt;ul&gt;
&lt;li&gt;If provided an object, check whether it is a term.
&lt;li&gt;If provided an object and the object is committed, get its native identifier.
&lt;/ul&gt;</long-description>
          <tag name="param" line="616" description="&lt;p&gt;Namespace reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="616" description="protected"/>
          <tag name="return" line="616" description="List of locked offsets." type="array">
            <type>array</type>
          </tag>
          <tag name="see" line="616" description="kTAG_ID_LOCAL" link="\OntologyWrapper\kTAG_NAMESPACE"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIterator</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theWrapper</name>
          <default></default>
          <type>\OntologyWrapper\Wrapper</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/traits/MemcachedDictionary.php" generated-path="OntologyWrapper.traits.MemcachedDictionary.html" hash="9f49bbaa426c09718059499fda630062" package="Default">
    <docblock line="0">
      <description>MemcachedDictionary.php</description>
      <long-description>This file contains the definition of the {@link MemcachedDictionary} trait.</long-description>
    </docblock>
    <source>eJztWd1O40YUvraf4uyKC0Csw66qXkDIkoawiwphBaFVVapqYo+dKbYnHY9h0YpH6Dv0Ydr36jkz/olNsiWrpaxWRYjYM2e+Ob/fmQzd17PpzHU7m5subMIJT3zmT3lwIHwtZMrUrUfzYGbHU5FBKGIOvkw1E2kGesoh4KFIBYmDDM3Ih/1YpFeL0O5AKya0h3Ad101ZwrMZ8zmcplrGMrr9UbHZjKtLI5XtkmJ7j/ODGjgLfzbnZpb4Y6HsfZTHUZwc1w4XBJV+YEbmI2Z8CSKZxTzhqbZBuxZK5ywGkWquQgpBM3a1waeT37iv7yDPRBqRCAG3I3wHfsyyzLu/r+K/50JxuyvmTaZV7muptnBrO0YL8YlpuBFxDBNebCX0FmgJsWSBEdQ3krADjisU2cw0g4QnE64yYGlAwlP8xPwk8Yyra5wpVHL2Wa6nUmFMRXwloe/B339eyVD89Qd0Ey+jR3/fjwRTnlRRzyyh9egE56W3vQ3b33a2X3Vebb/8xiSvtW5BgrgfXMd54sR9d3Y6Hg7GwwM4OBqMj05H/bOf4Gg0Hp4d9gfDp85e1wHXeRT/IPKmk3E9TLW6XWSW8xh2kU0OlSSiwznXwObrkZMuNGWmjyjpq+K4oVznCzlzZwftWN+4wwzHvDXJzYLAoAmqJmlKkSDrvTxbeMUKU02K+1xcm+KBK5EGGdW5NCWd7VRadfO4Z3zXjUWvy5PeUYAbiVBgAXQ7+L5TKe6zQmESu+K3gGMMsKqxZI0objnDeqf1BV8QsDOjWso0DoOowEkZBppFW7aAC9hrFufcAKeGoCKuDLRFauNDyjSZ2IQ1jMEir2HWmEUPsqe57RKLPrbtUnOs60EqYEqxW4O/tcQuwrHyno1SpwiTeRujRBFp/n5G8TSLZkxhV9XEiZgjE+JchUmgY+oM6P/AqxD2jSwk4j0PTH2sIcD33BSOqSBAf3jLRX8guypZY2VDuvBhKX4swlo6xhctEj6nDfN9jp1gpqRGfXlQz+ipkjcZDN/7fEapTqMd16kkIcxTUwNQ1v46FLZsQaWpfSQtYMN1iKU7HfMHjqnFcNsevXJchOvwjJaI7EUvGVBRvuhRTf4LNIEbdGfNlwGHvTZGxPUZz/JYD3B6fWPXiOJBKGPRx6RPrESxwLgEUn4Dl5VbULMCBvUxe2/sFsyHRj7bfwZ7ez1qTo5zBzhyyPAsR/ng2vfSed5jM3T0pAz95rMxdNRmaMWJnZEUSpoOlUweRtQZ5h8SwxfO009Ep5/Cf5+R/pbzE+xjyHOV1ihzZEgs39W6N7o4Pu528MH7FEqL2pTWZi8UuJfNFYutWU0W0coc4K5lhRKRKiTTTOcYT6SRGuzBhDYH9tYeyUOZp0GDXAu0PbicK6mz4fmv5xeDwfD83BCpU/jX2rHboguEryittV8q9Sp7jk7Hh6cXo4PGphS4h2xZEWnhphXJfEUub5B5Qd3Rf0XdAY+/CupGO5AkmuxtxxrcbWDNJcf/3P043F18SzH11tXj3vjsYmjIEoSFMCGGG5YV8Qm2DKke9o/PG4IGuBau6t8cxTEh0DY0hpcFBvjL0luQuFQBV0oq7wvtLRMpY85SWkuW1x5a5hCyPWGaMv0BLSefxMKv+01Z4Uv7zYEtE2vAR87KRYnVMPXJ2CxqdhqvHl/h3NwAW8T8xewK3F+Sv/Fnk/0r7rdWrH5qX5HqG6d2Y2vz3N6yv59lXOnl9geykNhYrouZcZ5fpEX+QBTLCd0T1qX9cxHQX7znpaYLv16MUI8iQ+vvGGV2UaN64luydxffHR8N5m/ITvqj/pvhyXA0vndZ9pXeldVt7TDOs+mTNHWz81yD/ZR2HhJG3c3vEXHrKgIpjBEXm09k8lAqPKESxgJONvy4jCyb/rNkZ1H3YLtkzhY5hG1RIoeyPpqA9jznmil7Ub7oXxKYJq977j+YuhqI</source>
  </file>
  <file path="OntologyWrapper/ContainerObject.php" generated-path="OntologyWrapper.ContainerObject.html" hash="26c083df561f625c4cbd30429883ad9a" package="Default">
    <docblock line="0">
      <description>ContainerObject.php</description>
      <long-description>This file contains the definition of the {@link ContainerObject} class.</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="OntologyWrapper" line="92" package="Default">
      <extends>\ArrayObject</extends>
      <name>ContainerObject</name>
      <full_name>\OntologyWrapper\ContainerObject</full_name>
      <docblock line="92">
        <description>Container object</description>
        <long-description>This class is the ancestor of classes that define objects that handle structured data and
that are persistent.

The class extends &lt;code&gt;{@link ArrayObject}&lt;/code&gt; by treating the inherited array as the
persistent store and all other data members as run-time data. The convention is that
items stored in the array part of the object are called &lt;em&gt;offsets&lt;/em&gt; and are
considered &lt;em&gt;persistent&lt;/em&gt;, while all other data members are called &lt;em&gt;members&lt;/em&gt;
and are considered &lt;em&gt;run-time&lt;/em&gt; data.

This class implements a framework that governs tha management of the object's persistent
data. No offset may hold the &lt;tt&gt;NULL&lt;/tt&gt; value, setting an offset with &lt;tt&gt;NULL&lt;/tt&gt;
value is equivalent to &lt;em&gt;deleting the offset&lt;/em&gt;.

Retrieving non-existant offsets will &lt;em&gt;not&lt;/em&gt; generate a warning, but only return
&lt;tt&gt;NULL&lt;/tt&gt;.

The class features a series of methods that derived classes may use to customise the
behaviour of the offset management methods:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;{@link preOffsetExists()}&lt;/tt&gt;: This method is called &lt;i&gt;before&lt;/i&gt; the
	{@link offsetExists()} method with the offset passed as a reference parameter, the
	method can be used to change the value of the offset or to provide a custom result:
	if the method returns &lt;tt&gt;NULL&lt;/tt&gt;, {@link offsetExists()} will be called; if the
	method returns any other type of value, this will be returned and
	{@link offsetExists()} will be skipped.
&lt;li&gt;&lt;tt&gt;{@link preOffsetGet()}&lt;/tt&gt;: This is called &lt;i&gt;before&lt;/i&gt; the
	{@link offsetGet()} method with the offset passed as a reference parameter, the
	method can be used to change the value of the offset or to provide a custom result:
	if the method returns &lt;tt&gt;NULL&lt;/tt&gt;, {@link offsetGet()} will be called; if the
	method returns any other type of value, this will be returned and
	{@link offsetGet()} will be skipped.
&lt;li&gt;&lt;tt&gt;{@link preOffsetSet()}&lt;/tt&gt;: This is called &lt;i&gt;before&lt;/i&gt; the
	{@link offsetSet()} method with the offset and value passed as reference parameters,
	the method can be used to change the offset or the value: if the method returns
	&lt;tt&gt;NULL&lt;/tt&gt;, {@link offsetSet()} will be called; if the method returns any other
	type of value, the {@link offsetSet()} will be skipped.
&lt;li&gt;&lt;tt&gt;{@link postOffsetSet()}&lt;/tt&gt;: This is called &lt;i&gt;after&lt;/i&gt; the
	{@link offsetSet()} method with the offset and value passed as reference parameters,
	the method can be used to set status or statistical variables, it will only be
	called if the {@link offsetSet()} method was called.
&lt;li&gt;&lt;tt&gt;{@link preOffsetUnset()}&lt;/tt&gt;: This is called &lt;i&gt;before&lt;/i&gt; the
	{@link offsetUnset()} method with the offset passed as a reference parameter, the
	method can be used to change the offset: if the method returns &lt;tt&gt;NULL&lt;/tt&gt;,
	{@link offsetUnset()} will be called; if the method returns any other type of value,
	the {@link offsetUnset()} will be skipped.
&lt;li&gt;&lt;tt&gt;{@link postOffsetUnset()}&lt;/tt&gt;: This is called &lt;i&gt;after&lt;/i&gt; the
	{@link offsetUnset()} method with the offset passed as a reference parameter, the
	method can be used to set status or statistical variables, it will only be called if
	the {@link offsetUnset()} method was called.
&lt;/ul&gt;

The class features a series of methods that are useful for handling the persistent data
as a whole:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;{@link arrayKeys()}&lt;/em&gt;: This method is the equivalent of the
	{@link array_keys()} function.
&lt;li&gt;&lt;em&gt;{@link arrayValues()}&lt;/em&gt;: This method is the equivalent of the
	{@link array_values()} function.
&lt;/ul&gt;

The class features a static method, {@link Object2Array}, that can be used to
convert a structure of nested {@link ArrayObject} instances into a nested array, this
will be useful when normalising objects before persisting.

This class uses the {@link Accessors} trait to provide a common framework to methods that
manage data properties and offsets.</long-description>
        <tag name="author" line="92" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="92" description="1.00 10/01/2014"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="129" package="Default">
        <name>offsetExists</name>
        <full_name>\OntologyWrapper\ContainerObject::offsetExists()</full_name>
        <docblock line="129">
          <description>Check if an offset exists</description>
          <long-description>We overload this method to call the preflight method: if it returns &lt;tt&gt;NULL&lt;/tt&gt; we
call the parent method; if not, we return the received value.</long-description>
          <tag name="param" line="129" description="&lt;p&gt;Offset.&lt;/p&gt;" type="mixed" variable="$theOffset">
            <type>mixed</type>
          </tag>
          <tag name="access" line="129" description="public"/>
          <tag name="return" line="129" description="&lt;tt&gt;TRUE&lt;/tt&gt; the offset exists." type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="129" description="" link="preOffsetExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="163" package="Default">
        <name>offsetGet</name>
        <full_name>\OntologyWrapper\ContainerObject::offsetGet()</full_name>
        <docblock line="163">
          <description>Return a value at a given offset</description>
          <long-description>We overload this method to call the preflight method: if it returns &lt;tt&gt;NULL&lt;/tt&gt; we
call the parent method; if not, we return the received value.

We also overload this method to handle unmatched offsets: we prevent warnings from
being issued and return &lt;tt&gt;NULL&lt;/tt&gt;.</long-description>
          <tag name="param" line="163" description="&lt;p&gt;Offset.&lt;/p&gt;" type="mixed" variable="$theOffset">
            <type>mixed</type>
          </tag>
          <tag name="access" line="163" description="public"/>
          <tag name="return" line="163" description="Offset value or &lt;tt&gt;NULL&lt;/tt&gt;." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="163" description="" link="preOffsetGet()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="205" package="Default">
        <name>offsetSet</name>
        <full_name>\OntologyWrapper\ContainerObject::offsetSet()</full_name>
        <docblock line="205">
          <description>Set a value at a given offset</description>
          <long-description>We overload this method to call the preflight and postflight methods: if the
preflight method returns &lt;tt&gt;NULL&lt;/tt&gt; we call the parent method; if not, we stop.

We also overload this method to handle &lt;tt&gt;NULL&lt;/tt&gt; &lt;em&gt;values&lt;/em&gt;: in that case we
delete the offset.</long-description>
          <tag name="param" line="205" description="&lt;p&gt;Offset.&lt;/p&gt;" type="string" variable="$theOffset">
            <type>string</type>
          </tag>
          <tag name="param" line="205" description="&lt;p&gt;Value to set at offset.&lt;/p&gt;" type="mixed" variable="$theValue">
            <type>mixed</type>
          </tag>
          <tag name="access" line="205" description="public"/>
          <tag name="uses" line="205" description="" link="preOffsetSet()"/>
          <tag name="uses" line="205" description="" link="postOffsetSet()"/>
          <tag name="uses" line="205" description="" link="offsetUnset()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theValue</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="259" package="Default">
        <name>offsetUnset</name>
        <full_name>\OntologyWrapper\ContainerObject::offsetUnset()</full_name>
        <docblock line="259">
          <description>Reset a value at a given offset</description>
          <long-description>We overload this method to call the preflight and postflight methods: if the
preflight method returns &lt;tt&gt;NULL&lt;/tt&gt; we call the parent method; if not, we stop.

We also overload this method to prevent warnings on unmatched offsets.</long-description>
          <tag name="param" line="259" description="&lt;p&gt;Offset.&lt;/p&gt;" type="string" variable="$theOffset">
            <type>string</type>
          </tag>
          <tag name="access" line="259" description="public"/>
          <tag name="uses" line="259" description="" link="preOffsetUnset()"/>
          <tag name="uses" line="259" description="" link="postOffsetUnset()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="306" package="Default">
        <name>arrayKeys</name>
        <full_name>\OntologyWrapper\ContainerObject::arrayKeys()</full_name>
        <docblock line="306">
          <description>Return object's offsets</description>
          <long-description>This method has the same function as the PHP function {@link array_keys()}, it will
return all the object's offset keys as an array.</long-description>
          <tag name="access" line="306" description="public"/>
          <tag name="return" line="306" description="List of object offsets." type="array">
            <type>array</type>
          </tag>
          <tag name="uses" line="306" description="" link="getArrayCopy()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="324" package="Default">
        <name>arrayValues</name>
        <full_name>\OntologyWrapper\ContainerObject::arrayValues()</full_name>
        <docblock line="324">
          <description>Return object's offset values</description>
          <long-description>This method has the same function as the PHP function {@link array_values()}, it
will return all the object's offset values as an array.</long-description>
          <tag name="access" line="324" description="public"/>
          <tag name="return" line="324" description="List of object offset values." type="array">
            <type>array</type>
          </tag>
          <tag name="uses" line="324" description="" link="getArrayCopy()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="363" package="Default">
        <name>Object2Array</name>
        <full_name>\OntologyWrapper\ContainerObject::Object2Array()</full_name>
        <docblock line="363">
          <description>&lt;h4&gt;Convert object to array&lt;/h4&gt;</description>
          <long-description>This method can be used to obtain an array of arrays from a nested structure.

The method expects as the first parameter a reference to an {@link ArrayObject} or to
an array, it will convert the provided parameter to an array and traverse it,
converting recursively any {@link ArrayObject} instance into an array.

The method accepts the following parameters:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;$theSource&lt;/tt&gt;: Source structure reference (&lt;em&gt;read-only&lt;/em&gt;).
&lt;li&gt;&lt;tt&gt;$theDestination&lt;/tt&gt;: Destination array reference.
&lt;/ul&gt;</long-description>
          <tag name="param" line="363" description="&lt;p&gt;Reference to the source structure.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theSource">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="363" description="&lt;p&gt;Reference to the destination array.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theDestination">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="static" line="363" description=""/>
          <tag name="throws" line="363" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theSource</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theDestination</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="440" package="Default">
        <name>preOffsetExists</name>
        <full_name>\OntologyWrapper\ContainerObject::preOffsetExists()</full_name>
        <docblock line="440">
          <description>Handle offset before checking it</description>
          <long-description>This method can be used to manage the offset before passing it to the inherited
{@link ArrayObject::OffsetExists()} method.

The method provides the offset as a reference, if the method returns &lt;tt&gt;NULL&lt;/tt&gt;
it means that the offset must be passed to the inherited
{@link ArrayObject::OffsetExists()}; if the method returns any other value, this will
be returned and the inherited {@link ArrayObject::OffsetExists()} will be skipped.

In this class we do nothing.</long-description>
          <tag name="param" line="440" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="440" description="protected"/>
          <tag name="return" line="440" description="&lt;tt&gt;NULL&lt;/tt&gt; check offset, other, return." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="465" package="Default">
        <name>preOffsetGet</name>
        <full_name>\OntologyWrapper\ContainerObject::preOffsetGet()</full_name>
        <docblock line="465">
          <description>Handle offset before getting it</description>
          <long-description>This method can be used to manage the offset before passing it to the inherited
{@link ArrayObject::OffsetGet()} method.

The method provides the offset as a reference, if the method returns &lt;tt&gt;NULL&lt;/tt&gt;
it means that the offset must be passed to the inherited
{@link ArrayObject::OffsetGet()}; if the method returns any other value, this must be
returned and the inherited {@link ArrayObject::OffsetGet()} skipped.

In this class we do nothing.</long-description>
          <tag name="param" line="465" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="465" description="protected"/>
          <tag name="return" line="465" description="&lt;tt&gt;NULL&lt;/tt&gt; get offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="491" package="Default">
        <name>preOffsetSet</name>
        <full_name>\OntologyWrapper\ContainerObject::preOffsetSet()</full_name>
        <docblock line="491">
          <description>Handle offset and value before setting it</description>
          <long-description>This method can be used to manage the offset before passing it to the inherited
{@link ArrayObject::OffsetSet()} method.

The method provides the offset and value as references, if the method returns
&lt;tt&gt;NULL&lt;/tt&gt; it means that the offset and value must be passed to the inherited
{@link ArrayObject::OffsetSet()}; if the method returns any other value, this means
that the inherited {@link ArrayObject::OffsetSet()} should be skipped.

In this class we do nothing.</long-description>
          <tag name="param" line="491" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="491" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="491" description="protected"/>
          <tag name="return" line="491" description="&lt;tt&gt;NULL&lt;/tt&gt; set offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="511" package="Default">
        <name>postOffsetSet</name>
        <full_name>\OntologyWrapper\ContainerObject::postOffsetSet()</full_name>
        <docblock line="511">
          <description>Handle offset and value after setting it</description>
          <long-description>This method can be used to manage the object after calling the
{@link ArrayObject::OffsetSet()} method.

In this class we do nothing.</long-description>
          <tag name="param" line="511" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="511" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="511" description="protected"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="536" package="Default">
        <name>preOffsetUnset</name>
        <full_name>\OntologyWrapper\ContainerObject::preOffsetUnset()</full_name>
        <docblock line="536">
          <description>Handle offset and value before deleting it</description>
          <long-description>This method can be used to manage the offset before passing it to the inherited
{@link ArrayObject::OffsetUnset()} method.

The method provides the offset as reference, if the method returns &lt;tt&gt;NULL&lt;/tt&gt; it
means that the offset and value must be passed to the inherited
{@link ArrayObject::OffsetUnset()}; if the method returns any other value, this means
that the inherited {@link ArrayObject::OffsetUnset()} should be skipped.

In this class we do nothing.</long-description>
          <tag name="param" line="536" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="536" description="protected"/>
          <tag name="return" line="536" description="&lt;tt&gt;NULL&lt;/tt&gt; delete offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="555" package="Default">
        <name>postOffsetUnset</name>
        <full_name>\OntologyWrapper\ContainerObject::postOffsetUnset()</full_name>
        <docblock line="555">
          <description>Handle offset after deleting it</description>
          <long-description>This method can be used to manage the object after calling the
{@link ArrayObject::OffsetUnset()} method.

In this class we do nothing.</long-description>
          <tag name="param" line="555" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="555" description="protected"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/MongoDatabase.php" generated-path="OntologyWrapper.MongoDatabase.html" hash="ac6687c7f789e45e645934d9da0ceec2" package="Default">
    <docblock line="0">
      <description>MongoDatabase.php</description>
      <long-description>This file contains the definition of the {@link MongoDatabase} class.</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="OntologyWrapper" line="29" package="Default">
      <extends>\OntologyWrapper\DatabaseObject</extends>
      <name>MongoDatabase</name>
      <full_name>\OntologyWrapper\MongoDatabase</full_name>
      <docblock line="29">
        <description>Mongo database</description>
        <long-description>This class is a &lt;i&gt;concrete&lt;/i&gt; implementation of the {@link DatabaseObject} wrapping a
{@link MongoDB} class.</long-description>
        <tag name="author" line="29" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="29" description="1.00 06/02/2014"/>
      </docblock>
      <constant namespace="OntologyWrapper" line="38" package="Default">
        <name>kSEQ_COLLECTION</name>
        <full_name>\OntologyWrapper\MongoDatabase::kSEQ_COLLECTION</full_name>
        <value>'_sequence'</value>
        <docblock line="38">
          <description>Sequences collection name.</description>
          <long-description>This constant holds the &lt;i&gt;sequences&lt;/i&gt; collection name.</long-description>
          <tag name="var" line="38" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OntologyWrapper" line="47" package="Default">
        <name>kSEQ_OFFSET</name>
        <full_name>\OntologyWrapper\MongoDatabase::kSEQ_OFFSET</full_name>
        <value>'_seq'</value>
        <docblock line="47">
          <description>Sequences offset name.</description>
          <long-description>This constant holds the &lt;i&gt;sequences&lt;/i&gt; offset name.</long-description>
          <tag name="var" line="47" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="72" package="Default">
        <name>drop</name>
        <full_name>\OntologyWrapper\MongoDatabase::drop()</full_name>
        <docblock line="72">
          <description>Drop the database</description>
          <long-description>This method will drop the current database.</long-description>
          <tag name="access" line="72" description="public"/>
          <tag name="throws" line="72" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="109" package="Default">
        <name>isConnected</name>
        <full_name>\OntologyWrapper\MongoDatabase::isConnected()</full_name>
        <docblock line="109">
          <description>Check if connection is open</description>
          <long-description>We overload this method to assume the object is connected if the resource is a
{@link MongoDB}.</long-description>
          <tag name="access" line="109" description="public"/>
          <tag name="return" line="109" description="&lt;tt&gt;TRUE&lt;/tt&gt; is open." type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="137" package="Default">
        <name>getCollections</name>
        <full_name>\OntologyWrapper\MongoDatabase::getCollections()</full_name>
        <docblock line="137">
          <description>Return collection names</description>
          <long-description>In this class we use the {@link \MongoDB::listCollections()} method, we extract only
the name to conform with the method prototype: one should always instantiate an
object derived from {@link CollectionObject} when dealing wit collections.

This method will return the following retults:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;FALSE&lt;/tt&gt;: The database is not connected.
&lt;li&gt;&lt;tt&gt;array&lt;/tt&gt;: The database collection names.
&lt;/ul&gt;</long-description>
          <tag name="access" line="137" description="public"/>
          <tag name="return" line="137" description="List of collection names." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="189" package="Default">
        <name>setSequenceNumber</name>
        <full_name>\OntologyWrapper\MongoDatabase::setSequenceNumber()</full_name>
        <docblock line="189">
          <description>Set sequence number</description>
          <long-description>In this class we match the provided parameter string with an entry in the
{@link kSEQ_COLLECTION} collection in the database, the native identifier of the
record is the sequence selector, while the sequence number will be found at the
{@link kSEQ_OFFSET} offset.</long-description>
          <tag name="param" line="189" description="&lt;p&gt;Sequence selector.&lt;/p&gt;" type="string" variable="$theSequence">
            <type>string</type>
          </tag>
          <tag name="param" line="189" description="&lt;p&gt;Sequence number.&lt;/p&gt;" type="integer" variable="$theNumber">
            <type>integer</type>
          </tag>
          <tag name="access" line="189" description="public"/>
          <tag name="throws" line="189" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theSequence</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theNumber</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="234" package="Default">
        <name>getSequenceNumber</name>
        <full_name>\OntologyWrapper\MongoDatabase::getSequenceNumber()</full_name>
        <docblock line="234">
          <description>Return sequence number</description>
          <long-description>In this class we match the provided parameter string with an entry in the
{@link kSEQ_COLLECTION} collection in the database, the native identifier of the
record is the sequence selector, while the sequence number will be found at the
{@link kSEQ_OFFSET} offset.</long-description>
          <tag name="param" line="234" description="&lt;p&gt;Sequence selector.&lt;/p&gt;" type="string" variable="$theSequence">
            <type>string</type>
          </tag>
          <tag name="access" line="234" description="public"/>
          <tag name="return" line="234" description="Sequence number." type="integer">
            <type>integer</type>
          </tag>
          <tag name="throws" line="234" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theSequence</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="303" package="Default">
        <name>connectionOpen</name>
        <full_name>\OntologyWrapper\MongoDatabase::connectionOpen()</full_name>
        <docblock line="303">
          <description>Open connection</description>
          <long-description>This method will instantiate a {@link MongoDB} object and set it in the
{@link Connection()} data member.

This method expects the caller to have checked whether the connection is already
open.

If the operation fails, the method will raise an exception.</long-description>
          <tag name="access" line="303" description="protected"/>
          <tag name="return" line="303" description="The native connection." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="303" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="352" package="Default">
        <name>connectionClose</name>
        <full_name>\OntologyWrapper\MongoDatabase::connectionClose()</full_name>
        <docblock line="352">
          <description>Close connection</description>
          <long-description>We overload this method to reset the connection resource.</long-description>
          <tag name="access" line="352" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="380" package="Default">
        <name>newServer</name>
        <full_name>\OntologyWrapper\MongoDatabase::newServer()</full_name>
        <docblock line="380">
          <description>Return a new server instance</description>
          <long-description>We implement the method to return a {@link MongoServer} instance and set the current
object dictionary in it.</long-description>
          <tag name="param" line="380" description="&lt;p&gt;Server parameters.&lt;/p&gt;" type="mixed" variable="$theParameter">
            <type>mixed</type>
          </tag>
          <tag name="param" line="380" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="380" description="protected"/>
          <tag name="return" line="380" description="Server instance." type="\OntologyWrapper\MongoServer">
            <type link="MongoServer.html">\OntologyWrapper\MongoServer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theParameter</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="418" package="Default">
        <name>newCollection</name>
        <full_name>\OntologyWrapper\MongoDatabase::newCollection()</full_name>
        <docblock line="418">
          <description>Return a new collection instance</description>
          <long-description>We implement this method to return a {@link MongoCollection} instance.</long-description>
          <tag name="param" line="418" description="&lt;p&gt;Full collection offsets.&lt;/p&gt;" type="array" variable="$theOffsets">
            <type>array</type>
          </tag>
          <tag name="param" line="418" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="418" description="protected"/>
          <tag name="return" line="418" description="Collection instance." type="\OntologyWrapper\CollectionObject">
            <type link="CollectionObject.html">\OntologyWrapper\CollectionObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffsets</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/ConnectionObject.php" generated-path="OntologyWrapper.ConnectionObject.html" hash="f697f8037ab968d8148a3a143300fd6e" package="Default">
    <docblock line="0">
      <description>ConnectionObject.php</description>
      <long-description>This file contains the definition of the {@link ConnectionObject} class.</long-description>
    </docblock>
    <class final="false" abstract="true" namespace="OntologyWrapper" line="116" package="Default">
      <extends>\OntologyWrapper\OntologyObject</extends>
      <name>ConnectionObject</name>
      <full_name>\OntologyWrapper\ConnectionObject</full_name>
      <docblock line="116">
        <description>Connection object</description>
        <long-description>This &lt;i&gt;abstract&lt;/i&gt; class is the ancestor of all classes representing connection
instances, such as servers, databases and collections.

The main purpose of this class is to wrap a common interface around concrete instances of
specific server, database or collection or engines.

The class features the following properties:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;{@link $mDSN}&lt;/tt&gt;: The &lt;i&gt;data source name&lt;/i&gt;, it is an URL that represents
	the connection string.
&lt;li&gt;&lt;tt&gt;{@link $mConnection}&lt;/tt&gt;: The &lt;i&gt;connection resource&lt;/i&gt;, it represents the
	native connection.
&lt;li&gt;&lt;tt&gt;{@link $mParent}&lt;/tt&gt;: The &lt;i&gt;parent connection&lt;/i&gt;, it represents the instance
	derived from this class that instantiated the current object.
&lt;/ul&gt;

The object is instantiated by providing a parameter that may either be a connection URL,
such as a string that may be parsed by the {@link parse_url()} function, or an array
containing the connection parameters.

The public interface of this class, as well as for many other abstract classes, is
implemented as templates in which protected methods do the actual work, so derived
concrete classes should only need to implement the protected interface.

This class declares three methods for managing the connection:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;{@link isConnected()}&lt;/tt&gt;: Returns &lt;tt&gt;TRUE&lt;/tt&gt; if the connection is open.
&lt;li&gt;&lt;tt&gt;{@link openConnection()}&lt;/tt&gt;: Create and open the connection.
&lt;li&gt;&lt;tt&gt;{@link closeConnection()}&lt;/tt&gt;: Close and reset the connection.
&lt;/ul&gt;

When the object goes out of context it will close the connection, if open, and re-open it
once it gets back into context:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;{@link __sleep()}&lt;/tt&gt;: This method will close the connection, if open, and
	set the {@link $mConnection connection} property to &lt;tt&gt;TRUE&lt;/tt&gt; as an indication
	that the connection must be opened once the object gets back into scope.
&lt;li&gt;&lt;tt&gt;{@link __wakeup()}&lt;/tt&gt;: This method will open the connection, if the object
	went out of scope while the connection was open.
&lt;/ul&gt;

The class provides accessor methods for the object properties: the {@link $mDSN} data
member can be managed with the {@link DSN()} method, the {@link $mConnection} data
member can be retrieved with the {@link Connection()} method and the {@link $mParent}
data member can be retrieved with the {@link Parent()} method.

When setting the connection string, {@link DSN()}, the object's connection parameters
will be synchronised. When setting offsets, the data source name will not be changed.
When the connection is opened, {@link openConnection()}, the data source name will be
re-constituted using the object's offsets. This means that the object offsets represent
the actual connection parameters, although setting the DSN will reset these parameters to
match the connection URL.

When the connection is {@link isConnected() open}, any attempt to modify the object
offsets will raise an exception: this is to prevent changing the connection properties
while connected.

In this class we make use of the {@link Status} trait, here we set the
{@link isDirty()} flag whenever we modify an object offset, and we reset it whenever we
open the connection; we reset the status bitfield data member after calling the parent
constructor.

This object represents the building block for all concrete instances that represent
servers, databases, data collections and caches.
+
+ When parsing the data source name, using the {@link parse_url()} function,, this class
will perform the following associations:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;scheme&lt;/tt&gt;: &lt;tt&gt;{@link kTAG_CONN_PROTOCOL}&lt;/tt&gt;. This corresponds to the server
	and database protocols, which must be the same.
&lt;li&gt;&lt;tt&gt;host&lt;/tt&gt;: &lt;tt&gt;{@link kTAG_CONN_HOST}&lt;/tt&gt;. This corresponds to the server
	object connection host.
&lt;li&gt;&lt;tt&gt;port&lt;/tt&gt;: &lt;tt&gt;{@link kTAG_CONN_PORT}&lt;/tt&gt;. This corresponds to the server
	object connection port.
&lt;li&gt;&lt;tt&gt;user&lt;/tt&gt;: &lt;tt&gt;{@link kTAG_CONN_USER}&lt;/tt&gt;. This corresponds to the server
	object connection user code.
&lt;li&gt;&lt;tt&gt;pass&lt;/tt&gt;: &lt;tt&gt;{@link kTAG_CONN_PASS}&lt;/tt&gt;. This corresponds to the server
	object connection user password.
&lt;li&gt;&lt;tt&gt;path&lt;/tt&gt;: &lt;tt&gt;{@link kTAG_CONN_BASE}&lt;/tt&gt;. This corresponds to the database
	object name.
&lt;li&gt;&lt;tt&gt;fragment&lt;/tt&gt;: &lt;tt&gt;{@link kTAG_CONN_COLL}&lt;/tt&gt;. This corresponds to the
	collection object name.
&lt;/ul&gt;

The above associations are stored in the object's offsets, which means that a collection
will hold its database name and all the parameters of the server connection.</long-description>
        <tag name="author" line="116" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="116" description="1.00 16/01/2014"/>
      </docblock>
      <property static="false" visibility="protected" line="134" namespace="OntologyWrapper" package="Default">
        <name>$mDSN</name>
        <default>NULL</default>
        <docblock line="134">
          <description>Data source name.</description>
          <long-description>This data member holds the &lt;i&gt;data source name&lt;/i&gt;, or &lt;tt&gt;DSN&lt;/tt&gt;, it is an URL
connection string that should be compatible with the {@link parse_url()} function.
This string should hold all the connection parameters.</long-description>
          <tag name="var" line="134" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" line="145" namespace="OntologyWrapper" package="Default">
        <name>$mParent</name>
        <default>NULL</default>
        <docblock line="145">
          <description>Parent connection.</description>
          <long-description>This data member holds the &lt;i&gt;parent connection object&lt;/i&gt;, this value should be an
instance derived from this class which is used to instantiate the current object's
connection resource.</long-description>
          <tag name="var" line="145" description="" type="\OntologyWrapper\ConnectionObject" variable="">
            <type link="ConnectionObject.html">\OntologyWrapper\ConnectionObject</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" line="155" namespace="OntologyWrapper" package="Default">
        <name>$mConnection</name>
        <default>NULL</default>
        <docblock line="155">
          <description>Connection resource.</description>
          <long-description>This data member holds the &lt;i&gt;connection resource&lt;/i&gt;, or &lt;i&gt;native connection&lt;/i&gt;,
this property represents the actual connection resource.</long-description>
          <tag name="var" line="155" description="" type="mixed" variable="">
            <type>mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="201" package="Default">
        <name>__construct</name>
        <full_name>\OntologyWrapper\ConnectionObject::__construct()</full_name>
        <docblock line="201">
          <description>Instantiate class.</description>
          <long-description>The object may be instantiated as an empty object, by omitting both parameters; with
a &lt;i&gt;data source name&lt;/i&gt; in the form of a connection URL; or by providing an array
of tag/value parameters which will constitute the object's offsets.

If you provide a data source name, this must be parsable by the {@link parse_url()}
function, if this is not the case, you should use the parameters list.

If the first parameter was provided, the method will synchronise both the data source
name and the connection parameters.

The second parameter represents the &lt;i&gt;connection parent&lt;/i&gt;, it must be an instance
derived from this class and will only be set by the constructor.

When overloading the constructor in derived classes you should always first call the
parent method and then perform custom actions.</long-description>
          <tag name="param" line="201" description="&lt;p&gt;Data source name or parameters.&lt;/p&gt;" type="mixed" variable="$theParameter">
            <type>mixed</type>
          </tag>
          <tag name="param" line="201" description="&lt;p&gt;Connection parent.&lt;/p&gt;" type="\OntologyWrapper\ConnectionObject" variable="$theParent">
            <type link="ConnectionObject.html">\OntologyWrapper\ConnectionObject</type>
          </tag>
          <tag name="access" line="201" description="public"/>
          <tag name="throws" line="201" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="201" description="" link="DSN()"/>
          <tag name="uses" line="201" description="" link="parseOffsets()"/>
          <tag name="uses" line="201" description="" link="statusReset()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theParameter</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theParent</name>
          <default>NULL</default>
          <type>\OntologyWrapper\ConnectionObject</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="279" package="Default">
        <name>__destruct</name>
        <full_name>\OntologyWrapper\ConnectionObject::__destruct()</full_name>
        <docblock line="279">
          <description>Destruct instance.</description>
          <long-description>The destructor will close the connection if open.</long-description>
          <tag name="access" line="279" description="public"/>
          <tag name="uses" line="279" description="" link="closeConnection()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="297" package="Default">
        <name>__sleep</name>
        <full_name>\OntologyWrapper\ConnectionObject::__sleep()</full_name>
        <docblock line="297">
          <description>Sleep</description>
          <long-description>This method will close the connection and replace the connection resource with
&lt;tt&gt;TRUE&lt;/tt&gt; if the connection was open.</long-description>
          <tag name="access" line="297" description="public"/>
          <tag name="uses" line="297" description="" link="isConnected()"/>
          <tag name="uses" line="297" description="" link="closeConnection()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="339" package="Default">
        <name>__wakeup</name>
        <full_name>\OntologyWrapper\ConnectionObject::__wakeup()</full_name>
        <docblock line="339">
          <description>Wake up</description>
          <long-description>This method will re-open the connection if it was closed by the {@link __sleep()}
method.</long-description>
          <tag name="access" line="339" description="public"/>
          <tag name="uses" line="339" description="" link="openConnection()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="366" package="Default">
        <name>__toString</name>
        <full_name>\OntologyWrapper\ConnectionObject::__toString()</full_name>
        <docblock line="366">
          <description>&lt;h4&gt;Return connection name&lt;/h4&gt;</description>
          <long-description>In this class we consider the data source name as the global identifier; here we
return it as is, in derived classes you should be careful to shadow sensitive data.

Note that this method cannot return the &lt;tt&gt;NULL&lt;/tt&gt; value, which means that it
cannot be used until there is a data source name for the object.</long-description>
          <tag name="access" line="366" description="public"/>
          <tag name="return" line="366" description="The global identifier." type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="425" package="Default">
        <name>DSN</name>
        <full_name>\OntologyWrapper\ConnectionObject::DSN()</full_name>
        <docblock line="425">
          <description>Manage data source name</description>
          <long-description>This method can be used to manage the &lt;i&gt;data source name&lt;/i&gt;, it accepts a parameter
which represents either the data source name or the requested operation, depending on
its value:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;NULL&lt;/tt&gt;: Return the current value.
&lt;li&gt;&lt;tt&gt;FALSE&lt;/tt&gt;: Delete the current value.
&lt;li&gt;&lt;i&gt;other&lt;/i&gt;: Set the value with the provided parameter.
&lt;/ul&gt;

The second parameter is a boolean which if &lt;tt&gt;TRUE&lt;/tt&gt; will return the &lt;i&gt;old&lt;/i&gt;
value when replacing or resetting; if &lt;tt&gt;FALSE&lt;/tt&gt;, it will return the current
value.

The last parameter is a switch that determines whether the object offsets should be
synchronised: if &lt;tt&gt;TRUE&lt;/tt&gt;, the object offsets will be reset and populated with
the elements parsed from the data source name; if &lt;tt&gt;FALSE&lt;/tt&gt;, the object offsets
will not be modified. This parameter is set to &lt;tt&gt;FALSE&lt;/tt&gt; by the constructor,
since using all offsets may produce an invalid URL and is &lt;tt&gt;TRUE&lt;/tt&gt; by default,
since setting a connection URL generally means changing the parameters.

Whenever a new value is set or the value is deleted, the method will synchronise the
object offsets.</long-description>
          <tag name="param" line="425" description="&lt;p&gt;Data source name or operation.&lt;/p&gt;" type="mixed" variable="$theValue">
            <type>mixed</type>
          </tag>
          <tag name="param" line="425" description="&lt;tt&gt;TRUE&lt;/tt&gt; get old value." type="boolean" variable="$getOld">
            <type>boolean</type>
          </tag>
          <tag name="param" line="425" description="&lt;tt&gt;TRUE&lt;/tt&gt; will sync offsets." type="boolean" variable="$doSync">
            <type>boolean</type>
          </tag>
          <tag name="access" line="425" description="public"/>
          <tag name="return" line="425" description="&lt;i&gt;New&lt;/i&gt; or &lt;i&gt;old&lt;/i&gt; data source name." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="425" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="see" line="425" description="" link="\OntologyWrapper\$mDSN"/>
          <tag name="uses" line="425" description="" link="isConnected()"/>
          <tag name="uses" line="425" description="" link="manageProperty()"/>
          <tag name="uses" line="425" description="" link="parseDSN()"/>
          <tag name="uses" line="425" description="" link="isDirty()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theValue</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$getOld</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doSync</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="480" package="Default">
        <name>Connection</name>
        <full_name>\OntologyWrapper\ConnectionObject::Connection()</full_name>
        <docblock line="480">
          <description>Return connection resource.</description>
          <long-description>This method can be used to retrieve the &lt;i&gt;connection resource&lt;/i&gt;, this method is
read-only, since the connection resource should only be set by the object's
connection methods.

The connection resource represents the native connection.</long-description>
          <tag name="access" line="480" description="public"/>
          <tag name="return" line="480" description="Connection resource." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="see" line="480" description="" link="\OntologyWrapper\$mConnection"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="501" package="Default">
        <name>Parent</name>
        <full_name>\OntologyWrapper\ConnectionObject::Parent()</full_name>
        <docblock line="501">
          <description>Return connection parent.</description>
          <long-description>This method can be used to retrieve the &lt;i&gt;parent connection&lt;/i&gt;, this method is
read-only, since the connection parent can only be set by the constructor and cannot
be changed once the object has been instantiated.

The connection parent represents the connection creator as the server for a database.</long-description>
          <tag name="access" line="501" description="public"/>
          <tag name="return" line="501" description="Parent connection." type="\OntologyWrapper\ConnectionObject">
            <type link="ConnectionObject.html">\OntologyWrapper\ConnectionObject</type>
          </tag>
          <tag name="see" line="501" description="" link="\OntologyWrapper\$mParent"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="525" package="Default">
        <name>isConnected</name>
        <full_name>\OntologyWrapper\ConnectionObject::isConnected()</full_name>
        <docblock line="525">
          <description>Check if connection is open</description>
          <long-description>This method returns a boolean flag indicating whether the connection is open or not.</long-description>
          <tag name="access" line="525" description="public"/>
          <tag name="return" line="525" description="&lt;tt&gt;TRUE&lt;/tt&gt; is open." type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="559" package="Default">
        <name>openConnection</name>
        <full_name>\OntologyWrapper\ConnectionObject::openConnection()</full_name>
        <docblock line="559">
          <description>Open connection</description>
          <long-description>This method can be used to create and open the connection.

We first check if the connection is already set: if so we do nothing.

We call the protected {@link connectionOpen()} method which will open the connection
and return the connection resource which will be set in the data member,
{@link mConnection}.

The method will return the connection resource.</long-description>
          <tag name="access" line="559" description="public"/>
          <tag name="return" line="559" description="Depends on implementation." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="559" description="" link="isConnected()"/>
          <tag name="uses" line="559" description="" link="isDirty()"/>
          <tag name="uses" line="559" description="" link="DSN()"/>
          <tag name="uses" line="559" description="" link="parseOffsets()"/>
          <tag name="uses" line="559" description="" link="connectionOpen()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="608" package="Default">
        <name>closeConnection</name>
        <full_name>\OntologyWrapper\ConnectionObject::closeConnection()</full_name>
        <docblock line="608">
          <description>Close connection</description>
          <long-description>If the connection is open, this method will close the connection and reset the
{@link Connection} data member.

The method will return &lt;tt&gt;TRUE&lt;/tt&gt; if the connection was open and &lt;tt&gt;FALSE&lt;/tt&gt; if
not.</long-description>
          <tag name="access" line="608" description="public"/>
          <tag name="return" line="608" description="&lt;tt&gt;TRUE&lt;/tt&gt; if closed, &lt;tt&gt;FALSE&lt;/tt&gt; if was closed." type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="608" description="" link="isConnected()"/>
          <tag name="uses" line="608" description="" link="connectionClose()"/>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OntologyWrapper" line="661" package="Default">
        <name>connectionOpen</name>
        <full_name>\OntologyWrapper\ConnectionObject::connectionOpen()</full_name>
        <docblock line="661">
          <description>Open connection</description>
          <long-description>This method should open the actual connection and set the {@link mConnection} data
member; in this class the method is virtual.

This method expects the caller to have checked whether the connection is already
open.

If the operation fails, the method should raise an exception.</long-description>
          <tag name="access" line="661" description="protected"/>
          <tag name="return" line="661" description="The native connection." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OntologyWrapper" line="681" package="Default">
        <name>connectionClose</name>
        <full_name>\OntologyWrapper\ConnectionObject::connectionClose()</full_name>
        <docblock line="681">
          <description>Open connection</description>
          <long-description>This method should close the actual connection, in this class the method is virtual.

This method expects the caller to have checked whether the connection is open.

If the operation fails, the method should raise an exception.</long-description>
          <tag name="param" line="681" description="&lt;p&gt;Connection.&lt;/p&gt;" type="mixed" variable="$theConnection">
            <type>mixed</type>
          </tag>
          <tag name="access" line="681" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="720" package="Default">
        <name>parseDSN</name>
        <full_name>\OntologyWrapper\ConnectionObject::parseDSN()</full_name>
        <docblock line="720">
          <description>Parse data source name</description>
          <long-description>This method will parse the provided data source name, extract the connection
parameters and set them in the current object.

The method will make use of the {@link parse_url()} function and pass each key/value
pair to the protected {@link loadDSNParameter()} method which has the responsibility
of matching the {@link parse_url()} keys to {@link Tag} instances.

If the {@link parse_url()} function fails to parse the DSN, the method will raise an
exception.

Derived classes should overload the {@link loadDSNParameter()} method.</long-description>
          <tag name="param" line="720" description="&lt;p&gt;Data source name.&lt;/p&gt;" type="string" variable="$theDSN">
            <type>string</type>
          </tag>
          <tag name="access" line="720" description="protected"/>
          <tag name="throws" line="720" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="720" description="" link="loadDSNParameter()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theDSN</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="777" package="Default">
        <name>parseOffsets</name>
        <full_name>\OntologyWrapper\ConnectionObject::parseOffsets()</full_name>
        <docblock line="777">
          <description>Parse connection parameters</description>
          <long-description>This method will parse the provided key/value array and generate a connection URL.

The method will iterate the provided offsets and feed them to the protected
{@link parseOffset()} method which will populate an array structured as the result of
the {@link parse_url()} function, it will be the duty of this method to generate a
data source name from that array.

Derived classes should overload the called methods and not this one.

If the resulting data source name is empty, the method will return &lt;tt&gt;FALSE&lt;/tt&gt;.</long-description>
          <tag name="param" line="777" description="&lt;p&gt;Offsets.&lt;/p&gt;" type="array" variable="$theOffsets">
            <type>array</type>
          </tag>
          <tag name="access" line="777" description="protected"/>
          <tag name="return" line="777" description="Data source name or &lt;tt&gt;FALSE&lt;/tt&gt; if empty." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="777" description="" link="parseOffset()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffsets</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="921" package="Default">
        <name>parseOffset</name>
        <full_name>\OntologyWrapper\ConnectionObject::parseOffset()</full_name>
        <docblock line="921">
          <description>Parse offset</description>
          <long-description>This method will parse the provided offset and populate the provided parameters.
The main duty is to load the offset values into the provided parameters array so to
create the same result as the {@link parse_url()} function.

The resulting array can have the following elements:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;&lt;code&gt;scheme&lt;/code&gt;&lt;/tt&gt;: The protocol or scheme.
&lt;li&gt;&lt;tt&gt;&lt;code&gt;host&lt;/code&gt;&lt;/tt&gt;: The connection host.
&lt;li&gt;&lt;tt&gt;&lt;code&gt;port&lt;/code&gt;&lt;/tt&gt;: The connection port.
&lt;li&gt;&lt;tt&gt;&lt;code&gt;user&lt;/code&gt;&lt;/tt&gt;: The user code.
&lt;li&gt;&lt;tt&gt;&lt;code&gt;pass&lt;/code&gt;&lt;/tt&gt;: The user password.
&lt;li&gt;&lt;tt&gt;&lt;code&gt;path&lt;/code&gt;&lt;/tt&gt;: The connection path.
&lt;li&gt;&lt;tt&gt;&lt;code&gt;query&lt;/code&gt;&lt;/tt&gt;: The connection options.
&lt;li&gt;&lt;tt&gt;&lt;code&gt;fragment&lt;/code&gt;&lt;/tt&gt;: The URL fragment.
&lt;/ul&gt;

In this class we handle the following offsets:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;{@link kTAG_CONN_PROTOCOL}&lt;/tt&gt;: The &lt;code&gt;scheme&lt;/code&gt;.
&lt;li&gt;&lt;tt&gt;{@link kTAG_CONN_HOST}&lt;/tt&gt;: The connection &lt;code&gt;host&lt;/code&gt;.
&lt;li&gt;&lt;tt&gt;{@link kTAG_CONN_PORT}&lt;/tt&gt;: The connection &lt;code&gt;port&lt;/code&gt;.
&lt;li&gt;&lt;tt&gt;{@link kTAG_CONN_USER}&lt;/tt&gt;: The &lt;code&gt;user&lt;/code&gt; code.
&lt;li&gt;&lt;tt&gt;{@link kTAG_CONN_PASS}&lt;/tt&gt;: The user &lt;code&gt;pass&lt;/code&gt;word.
&lt;li&gt;&lt;tt&gt;{@link kTAG_CONN_BASE}&lt;/tt&gt;: The user &lt;code&gt;path&lt;/code&gt;word.
&lt;li&gt;&lt;tt&gt;{@link kTAG_CONN_COLL}&lt;/tt&gt;: The user &lt;code&gt;fragment&lt;/code&gt;word.
&lt;li&gt;&lt;tt&gt;{@link kTAG_CONN_OPTS}&lt;/tt&gt;: The connection options, &lt;code&gt;query&lt;/code&gt;.
&lt;/ul&gt;

Derived classes can overload this method to customise the parameters.</long-description>
          <tag name="param" line="921" description="&lt;p&gt;Receives parsed offset.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theParameters">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="921" description="&lt;p&gt;Offset.&lt;/p&gt;" type="string" variable="$theOffset">
            <type>string</type>
          </tag>
          <tag name="param" line="921" description="&lt;p&gt;Offset value.&lt;/p&gt;" type="mixed" variable="$theValue">
            <type>mixed</type>
          </tag>
          <tag name="access" line="921" description="protected"/>
          <tag name="uses" line="921" description="" link="parseOption()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theParameters</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theValue</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="987" package="Default">
        <name>parseOption</name>
        <full_name>\OntologyWrapper\ConnectionObject::parseOption()</full_name>
        <docblock line="987">
          <description>Parse option</description>
          <long-description>This method will parse the provided option and populate the query parameters.
The main duty is to load the option into the &lt;code&gt;query&lt;/code&gt; element of the
provided parameters list as the result of the {@link parse_url()} function.

In this class we load what we find.

Derived classes can overload this method to customise the options.</long-description>
          <tag name="param" line="987" description="&lt;p&gt;Receives parsed offset.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theParameters">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="987" description="&lt;p&gt;Option.&lt;/p&gt;" type="string" variable="$theOption">
            <type>string</type>
          </tag>
          <tag name="param" line="987" description="&lt;p&gt;Option value.&lt;/p&gt;" type="mixed" variable="$theValue">
            <type>mixed</type>
          </tag>
          <tag name="access" line="987" description="protected"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theParameters</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theOption</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theValue</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1056" package="Default">
        <name>loadDSNParameter</name>
        <full_name>\OntologyWrapper\ConnectionObject::loadDSNParameter()</full_name>
        <docblock line="1056">
          <description>Load connection parameters from DSN</description>
          <long-description>This method will load the parameters parsed from the data source name into the
current object's offsets, it expects three parameters:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;$theParameters&lt;/b&gt;: This array is the result of the {@link parse_url()}
	function on the data source name:
 &lt;ul&gt;
	&lt;li&gt;&lt;tt&gt;&lt;code&gt;scheme&lt;/code&gt;&lt;/tt&gt;: We set it in {@link kTAG_CONN_PROTOCOL}.
	&lt;li&gt;&lt;tt&gt;&lt;code&gt;host&lt;/code&gt;&lt;/tt&gt;: We set it in {@link kTAG_CONN_HOST}.
	&lt;li&gt;&lt;tt&gt;&lt;code&gt;port&lt;/code&gt;&lt;/tt&gt;: We set it in {@link kTAG_CONN_PORT}.
	&lt;li&gt;&lt;tt&gt;&lt;code&gt;user&lt;/code&gt;&lt;/tt&gt;: We set it in {@link kTAG_CONN_USER}.
	&lt;li&gt;&lt;tt&gt;&lt;code&gt;pass&lt;/code&gt;&lt;/tt&gt;: We set it in {@link kTAG_CONN_PASS}.
	&lt;li&gt;&lt;tt&gt;&lt;code&gt;path&lt;/code&gt;&lt;/tt&gt;: We set it in {@link kTAG_CONN_BASE}.
	&lt;li&gt;&lt;tt&gt;&lt;code&gt;fragment&lt;/code&gt;&lt;/tt&gt;: We set it in {@link kTAG_CONN_COLL}.
	&lt;li&gt;&lt;tt&gt;&lt;code&gt;query&lt;/code&gt;&lt;/tt&gt;: We load the key/value pairs into
		{@link kTAG_CONN_OPTS} array.
 &lt;/ul&gt;
&lt;li&gt;&lt;b&gt;$theKey&lt;/b&gt;: This parameter represents the offset.
&lt;li&gt;&lt;b&gt;$theValue&lt;/b&gt;: This parameter represents the offset value.
&lt;/ul&gt;

This is the method that derived classes may overload to customise the parameters.</long-description>
          <tag name="param" line="1056" description="&lt;p&gt;Original parameters list.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theParameters">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1056" description="&lt;p&gt;Parameter key.&lt;/p&gt;" type="string" variable="$theKey">
            <type>string</type>
          </tag>
          <tag name="param" line="1056" description="&lt;p&gt;Parameter value.&lt;/p&gt;" type="string" variable="$theValue">
            <type>string</type>
          </tag>
          <tag name="access" line="1056" description="protected"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theParameters</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theKey</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theValue</name>
          <default>NULL</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1144" package="Default">
        <name>preOffsetSet</name>
        <full_name>\OntologyWrapper\ConnectionObject::preOffsetSet()</full_name>
        <docblock line="1144">
          <description>Handle offset and value before setting it</description>
          <long-description>We overload this method to prevent setting values while the connection is open.</long-description>
          <tag name="param" line="1144" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1144" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="1144" description="protected"/>
          <tag name="return" line="1144" description="&lt;tt&gt;NULL&lt;/tt&gt; set offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="1144" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="1144" description="" link="isConnected()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1174" package="Default">
        <name>postOffsetSet</name>
        <full_name>\OntologyWrapper\ConnectionObject::postOffsetSet()</full_name>
        <docblock line="1174">
          <description>Handle offset and value after setting it</description>
          <long-description>We set the {@link isDirty()} status.</long-description>
          <tag name="param" line="1174" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1174" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="1174" description="protected"/>
          <tag name="uses" line="1174" description="" link="isDirty()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1205" package="Default">
        <name>preOffsetUnset</name>
        <full_name>\OntologyWrapper\ConnectionObject::preOffsetUnset()</full_name>
        <docblock line="1205">
          <description>Handle offset and value before deleting it</description>
          <long-description>We overload this method to prevent deleting values while the connection is open.</long-description>
          <tag name="param" line="1205" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="1205" description="protected"/>
          <tag name="return" line="1205" description="&lt;tt&gt;NULL&lt;/tt&gt; delete offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="1205" description="" link="isConnected()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1235" package="Default">
        <name>postOffsetUnset</name>
        <full_name>\OntologyWrapper\ConnectionObject::postOffsetUnset()</full_name>
        <docblock line="1235">
          <description>Handle offset and value after deleting it</description>
          <long-description>We set the {@link isDirty()} status.</long-description>
          <tag name="param" line="1235" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1235" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="1235" description="protected"/>
          <tag name="uses" line="1235" description="" link="isDirty()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
    </class>
    <source></source>
  </file>
  <file path="OntologyWrapper/traits/Terms.php" generated-path="OntologyWrapper.traits.Terms.html" hash="d339575dae57af610c7bc88220c25e96" package="Default">
    <docblock line="0">
      <description>Terms.php</description>
      <long-description>This file contains the definition of the {@link Terms} trait.</long-description>
    </docblock>
    <source>eJzFV9tu4zYQfZa+YjZYoE6QlZPFPuXixHW9uwFyQ5xgH5oioCXKViOTKknngkU+of/Qj2n/q8OLZEqRUbdoEj8kFsU5nMuZM/TeQTEtwrC7sRHCBlxSMZORXgH7PM0kpFlOIeZMkYxJUFMKCU0zlqmMM+CpWfl+mGfs1to/gRIkUxECdMOQkRmVBYkpnDHFcz55/CZIUVBxbXbJXX34/st80IOg9bNRe1NFvWxD0/RlvNXZ8utg0+hXwixANityOqNMSSAwo2rKE0i5gBlhZJKxiSmIMgh5JhWWKJVUbWoUV6bby/6Xm8vhxcnoKUJkWqKQPOf3tsQGzJxSlpiWh7pnjR1Z74JDMkcAEQQnWX7LoR/BX3/c8jT783fYm0VSf40P40lGRMTFpGdM7qiQyKBgO9ragu1P3a2P3Y9b258Ma2ygJgvh9zAI3pgj51c/Hh8N4Ozz59HwEvqDwXA0OruAo1PM4ef+YPjGpAkDCIMXSRAib5j2OJ/LaVtYwUvEpWMKdCcgOvSTBBR3fC6ImupV88a0hGNuTBiMKcwlNbu1wLBkQVkNgJTl419prH6QHtomINHuszwHkiQGVm8sBL/LElohlAAa1NFfG0eVL0cpPPJ5aYd96QniExDpTASKIZ69aVvMuq4PNxjORNCUCspi2ll/Ai2ji3hrNrhRzQUzUGw+G1OhXatCzliLm4fGBZhlDzQxFXyPe7SPTgUXhwMKik2XZ03imErM23ycZ7Fdck5kTNEJFRrytNWXhh+SUk+FFutYQOm0Z2itT4iKp2dGwjrrelM3DKwDkM5ZbIZQydAOlPEAbtXC0e2aP/CVsCQvCSCj8k2WdiCTN3bZt9b2BsDu0xBYYk2bTZhQ1GCMqspVtNinASsUHJeK4HtMxXVz+JVOejWA/cr0Q89jwa4WwIYnjCskmfUn5jgQcDZ7btBcUoOtpoLfA6P3cD18iGmh09Uxb4K1K0bGmBPdLkmd6VV37MCa2QwA0VrVFNhrNmPA0V+BPMMVbRStwfquAUcv3x2+g/39Xqh9fwJcOCvp5NVlQKQ5EqsrcHRVhSkD8HLTkWbLepUkl5cS6guWJZ4LoYNwbLPv3usnDQDXfSHIo/VjZ8fOxeEDzjHZ8djoqo9BH7Ra4EH17XbzDpi9Vb1Kv/qL5NZd+vkXr+JtwfC5b2Ie0cL8R5aZqJqHjWg57xeGCnXyQ8+ujuq+bzZgXDfbs3abco/4rqCmnmXXRa8ygHjRdOeVBhCe7DoiFXy28ggq0My7MqXN+bFkFhlYJ+8zfkftVUt3SdmgTtgl/W3uxMc5821KmZlCyyy9yfVsAuHdT3LfsmLRP08fa1WxfBeyxUEor0BnhXpsn3kOZU+p3unV8fFeF7+sNHCsGGgOXNRP14NrGdwLTB1edBqjZqkO6dnwrxSoPn/acN3bUuFWUivd6vV5cr6gqg9aJnQfiIa9QUbXZKcOclUkRJk7zrQxD+uCtRh6q6lS/ZSf0CnlkfPZwKvhXjG5NPpS6krStktdNby+4h1uLHCam+gWUqlptpJQ8uJVdHKgk/02QmmO9uSskr9WuVz9CtuilP/PnbQV77lGLGl9E26z+QdTGt96RPlvjV+Sy3XOSm3t3bwq5jqYrWcEbWPowF43NEdDs+j9CMfl8KAX/g1g18sA</source>
  </file>
  <file path="OntologyWrapper/PersistentObject.php" generated-path="OntologyWrapper.PersistentObject.html" hash="ef87727f9c94bdac23712460399306a4" package="Default">
    <docblock line="0">
      <description>PersistentObject.php</description>
      <long-description>This file contains the definition of the {@link PersistentObject} class.</long-description>
    </docblock>
    <class final="false" abstract="true" namespace="OntologyWrapper" line="56" package="Default">
      <extends>\OntologyWrapper\OntologyObject</extends>
      <name>PersistentObject</name>
      <full_name>\OntologyWrapper\PersistentObject</full_name>
      <docblock line="56">
        <description>Persistent object</description>
        <long-description>This &lt;i&gt;abstract&lt;/i&gt; class is the ancestor of all classes representing objects that can
persist in a container and that are constituted by ontology offsets.

The main purpose of this class is to add the status and persistence traits providing the
prototypes needed to implement concrete persistent objects.

The class makes use of the {@link Status} and {@link Persistence} traits:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;{@link Status}&lt;/tt&gt;: This class handles a bitfirld data member that keeps
	track of the object's status:
 &lt;ul&gt;
	&lt;li&gt;&lt;tt&gt;{@link isDirty()}&lt;/tt&gt;: This flag is set whenever any offset is modified,
		this status can be tested whenever the object should be stored in a persistent
		container: if set, it means the object has been modified, if not set, it means
		that the object is identical to the persistent copy.
	&lt;li&gt;&lt;tt&gt;{@link isCommitted()}&lt;/tt&gt;: This flag is set whenever the object has been
		loaded or stored into a persistent container. This status can be useful to lock
		properties that cannot change once the object is stored.
 &lt;/ul&gt;
&lt;li&gt;&lt;tt&gt;{@link Persistence}&lt;/tt&gt;: This class handles the object persistence.
&lt;/ul&gt;

Objects derived from this class &lt;em&gt;must&lt;/em&gt; define a constant called &lt;em&gt;kSEQ_NAME&lt;/em&gt;
which provides a &lt;em&lt;string&lt;/em&gt; representing the &lt;em&gt;default collection name&lt;/em&gt; for
the current object: methods that commit or read objects of a specific class can then
resolve the collection given a database.</long-description>
        <tag name="author" line="56" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="56" description="1.00 14/02/2014"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="123" package="Default">
        <name>__construct</name>
        <full_name>\OntologyWrapper\PersistentObject::__construct()</full_name>
        <docblock line="123">
          <description>Instantiate class.</description>
          <long-description>Objects derived from this class share the same constructor prototype, they should not
overload this method. The method accepts two parameters:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;$theContainer&lt;/b&gt;: This may either be an array containing the object's
	persistent attributes, or a reference to a {@link Wrapper} object. If this
	parameter is &lt;tt&gt;NULL&lt;/tt&gt;, the next parameter will be ignored.
&lt;li&gt;&lt;b&gt;$theIdentifier&lt;/b&gt;: This parameter represents the object identifier or the
	object persistent attributes: in the first case it will used to select the
	object from the provided container, in the second case, it is assumed that the
	provided array holds the persistent attributes of an object committed in the
	provided container.
&lt;/ul&gt;

The workflow is as follows:

&lt;ul&gt;
&lt;li&gt;&lt;i&gt;Empty object&lt;/i&gt;: Both parameters are omitted.
&lt;li&gt;&lt;i&gt;Filled non committed object&lt;/i&gt;: The first parameter is an array.
&lt;li&gt;&lt;i&gt;Load object from container&lt;/i&gt;: The first parameter is a {@link Wrapper}
	object and the second parameter is a scalar identifier.
&lt;li&gt;&lt;i&gt;Filled committed object&lt;/i&gt;: The first parameter is {@link Wrapper} object
	and the second parameter is an array holding the object's persistent data.
&lt;/ul&gt;

Any other combination will raise an exception.

This constructor sets the committed flag, derived classes should first call the
parent constructor, then they should set the inited flag.</long-description>
          <tag name="param" line="123" description="&lt;p&gt;Persistent store.&lt;/p&gt;" type="\OntologyWrapper\ConnectionObject" variable="$theContainer">
            <type link="ConnectionObject.html">\OntologyWrapper\ConnectionObject</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Object identifier.&lt;/p&gt;" type="mixed" variable="$theIdentifier">
            <type>mixed</type>
          </tag>
          <tag name="access" line="123" description="public"/>
          <tag name="throws" line="123" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="123" description="" link="ResolveDatabase()"/>
          <tag name="uses" line="123" description="" link="ResolveCollection()"/>
          <tag name="uses" line="123" description="" link="isCommitted()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theContainer</name>
          <default>NULL</default>
          <type>\OntologyWrapper\ConnectionObject</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="276" package="Default">
        <name>commit</name>
        <full_name>\OntologyWrapper\PersistentObject::commit()</full_name>
        <docblock line="276">
          <description>Insert the object</description>
          <long-description>This method should commit the current object into the provided persistent store.

In this method we perform the following steps:

&lt;ul&gt;
&lt;li&gt;We resolve the eventually provided persistent store into a collection object,
	or we use the current object's collection; if this is not set, or if the
	collection canot be resolved, the method will raise an exception.
&lt;li&gt;We call the &lt;tt&gt;{@link preCommit()}&lt;/tt&gt; method that is responsible for
	preparing the object for being committed.
&lt;li&gt;If the object is not ready, {@link isReady()}, we raise an exception.
&lt;li&gt;We pass the current object to the collection's commit method and recuperate the
	identifier.
&lt;li&gt;We call the &lt;tt&gt;{@link postCommit()}&lt;/tt&gt; method that is responsible of cleaning
	up the objecxt after the commit.
&lt;li&gt;We return the object's identifier.
&lt;/ul&gt;

If any of the above steps fail the method must raise an exception.</long-description>
          <tag name="param" line="276" description="&lt;p&gt;Persistent store.&lt;/p&gt;" type="\OntologyWrapper\Wrapper" variable="$theWrapper">
            <type link="Wrapper.html">\OntologyWrapper\Wrapper</type>
          </tag>
          <tag name="access" line="276" description="public"/>
          <tag name="return" line="276" description="The object's native identifier." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="276" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="276" description="" link="isDirty()"/>
          <tag name="uses" line="276" description="" link="isCommitted()"/>
          <tag name="uses" line="276" description="" link="dictionary()"/>
          <tag name="uses" line="276" description="" link="ResolveDatabase()"/>
          <tag name="uses" line="276" description="" link="ResolveCollection()"/>
          <tag name="uses" line="276" description="" link="preCommit()"/>
          <tag name="uses" line="276" description="" link="isReady()"/>
          <tag name="uses" line="276" description="" link="postCommit()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theWrapper</name>
          <default></default>
          <type>\OntologyWrapper\Wrapper</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="367" package="Default">
        <name>ResolveDatabase</name>
        <full_name>\OntologyWrapper\PersistentObject::ResolveDatabase()</full_name>
        <docblock line="367">
          <description>Resolve the database</description>
          <long-description>This method should return a {@link DatabaseObject} instance corresponding to the
default database of the current class extracted from the provided {@link Wrapper}
instance.

Since we cannot declare this method abstract, we raise an exception.</long-description>
          <tag name="param" line="367" description="&lt;p&gt;Wrapper.&lt;/p&gt;" type="\OntologyWrapper\Wrapper" variable="$theWrapper">
            <type link="Wrapper.html">\OntologyWrapper\Wrapper</type>
          </tag>
          <tag name="param" line="367" description="&lt;p&gt;Raise exception if unable.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="param" line="367" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="static" line="367" description=""/>
          <tag name="return" line="367" description="Database or &lt;tt&gt;NULL&lt;/tt&gt;." type="\OntologyWrapper\DatabaseObject">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
          <tag name="throws" line="367" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theWrapper</name>
          <default></default>
          <type>\OntologyWrapper\Wrapper</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="397" package="Default">
        <name>ResolveCollection</name>
        <full_name>\OntologyWrapper\PersistentObject::ResolveCollection()</full_name>
        <docblock line="397">
          <description>Resolve the collection</description>
          <long-description>This method should return a {@link CollectionObject} instance corresponding to the
persistent store in which the current object was either read or will be inserted.

The method expects the object to feature a constant, {@link kSEQ_NAME}, which serves
the double purpose of providing the default collection name and the eventual sequence
number index: the method will use this constant and the provided database reference
to return the default {@link CollectionObject} instance.</long-description>
          <tag name="param" line="397" description="&lt;p&gt;Database reference.&lt;/p&gt;" type="\OntologyWrapper\DatabaseObject" variable="$theDatabase">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
          <tag name="param" line="397" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="static" line="397" description=""/>
          <tag name="return" line="397" description="Collection or &lt;tt&gt;NULL&lt;/tt&gt;." type="\OntologyWrapper\CollectionObject">
            <type link="CollectionObject.html">\OntologyWrapper\CollectionObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theDatabase</name>
          <default></default>
          <type>\OntologyWrapper\DatabaseObject</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="459" package="Default">
        <name>preCommit</name>
        <full_name>\OntologyWrapper\PersistentObject::preCommit()</full_name>
        <docblock line="459">
          <description>Prepare object for commit</description>
          <long-description>This method should prepare the object for being committed, it should compute the
eventual identifiers and commit the eventual related objects.

The method accepts a single bitfield parameter that indicates the current operation:
the first bit is set if the object is committed and the second bit is set if we are
storing the object.

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;0x01&lt;/tt&gt;: &lt;em&gt;Insert&lt;/em&gt;
 &lt;ul&gt;
	&lt;li&gt;Check if the object is {@link isInited()}.
	&lt;li&gt;&lt;tt&gt;{@link preCommitValidate()&lt;/tt&gt;: Validate object.
	&lt;li&gt;&lt;tt&gt;{@link preCommitIdentify()&lt;/tt&gt;: Set object identifiers.
	&lt;li&gt;&lt;tt&gt;{@link isReady()&lt;/tt&gt;: Check if object is ready.
	&lt;li&gt;&lt;tt&gt;{@link preCommitRelated()&lt;/tt&gt;: Commit related objects.
 &lt;/ul&gt;
&lt;li&gt;&lt;tt&gt;0x11&lt;/tt&gt;: &lt;em&gt;Update&lt;/em&gt;
 &lt;ul&gt;
	&lt;li&gt;Nothing yet (this operation should not be implemented).
 &lt;/ul&gt;
&lt;li&gt;&lt;tt&gt;0x10&lt;/tt&gt;: &lt;em&gt;Delete&lt;/em&gt;
 &lt;ul&gt;
	&lt;li&gt;Check if the object has its native identifier, {@link kTAG_NID}.
 &lt;/ul&gt;
&lt;/ul&gt;

Derived classes should not overload this method, they should, instead, overload the
called methods.</long-description>
          <tag name="param" line="459" description="&lt;p&gt;Operation code.&lt;/p&gt;" type="\OntologyWrapper\bitfield" variable="$theOperation">
            <type link="bitfield.html">\OntologyWrapper\bitfield</type>
          </tag>
          <tag name="access" line="459" description="protected"/>
          <tag name="throws" line="459" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="see" line="459" description="" link="\OntologyWrapper\kTAG_NID"/>
          <tag name="uses" line="459" description="" link="isInited()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOperation</name>
          <default>0</default>
          <type>\OntologyWrapper\bitfield</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="524" package="Default">
        <name>preCommitValidate</name>
        <full_name>\OntologyWrapper\PersistentObject::preCommitValidate()</full_name>
        <docblock line="524">
          <description>Validate object before commit</description>
          <long-description>This method should validate the object before being committed, if the object is not
valid, the method should raise an exception. Derived classes should call the parent
method and do the specific checks.

In this class we check whether the object is initialised.</long-description>
          <tag name="access" line="524" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="550" package="Default">
        <name>preCommitIdentify</name>
        <full_name>\OntologyWrapper\PersistentObject::preCommitIdentify()</full_name>
        <docblock line="550">
          <description>Set object identifiers before commit</description>
          <long-description>This method should set the object identifiers.

In this class we do nothing.</long-description>
          <tag name="access" line="550" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="566" package="Default">
        <name>preCommitRelated</name>
        <full_name>\OntologyWrapper\PersistentObject::preCommitRelated()</full_name>
        <docblock line="566">
          <description>Commit related objects</description>
          <long-description>This method should commit related objects before the current object is committed.

In this class we do nothing.</long-description>
          <tag name="access" line="566" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="596" package="Default">
        <name>postCommit</name>
        <full_name>\OntologyWrapper\PersistentObject::postCommit()</full_name>
        <docblock line="596">
          <description>Cleanup object after commit</description>
          <long-description>This method should cleanup the object after it was committed, it should perform
eventual identifiers and commit the eventual related objects.

The method accepts a single bitfield parameter that indicates the current operation:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;0x01&lt;/tt&gt;: Insert.
&lt;li&gt;&lt;tt&gt;0x11&lt;/tt&gt;: Update.
&lt;li&gt;&lt;tt&gt;0x10&lt;/tt&gt;: Delete.
&lt;/ul&gt;

The first bit is set if the object is committed and the second bit is set if we are
storing the object.

In this class we do nothing.</long-description>
          <tag name="param" line="596" description="&lt;p&gt;Operation code.&lt;/p&gt;" type="\OntologyWrapper\bitfield" variable="$theOperation">
            <type link="bitfield.html">\OntologyWrapper\bitfield</type>
          </tag>
          <tag name="access" line="596" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOperation</name>
          <default>0</default>
          <type>\OntologyWrapper\bitfield</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="622" package="Default">
        <name>isReady</name>
        <full_name>\OntologyWrapper\PersistentObject::isReady()</full_name>
        <docblock line="622">
          <description>Check if object is ready</description>
          <long-description>This method should return &lt;tt&gt;TRUE&lt;/tt&gt; if the object is ready to be committed.

In this class we ensure the object is initialised and that it holds the dictionary.</long-description>
          <tag name="access" line="622" description="protected"/>
          <tag name="return" line="622" description="&lt;tt&gt;TRUE&lt;/tt&gt; means ready." type="Boolean">
            <type>Boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="660" package="Default">
        <name>preOffsetSet</name>
        <full_name>\OntologyWrapper\PersistentObject::preOffsetSet()</full_name>
        <docblock line="660">
          <description>Handle offset and value before setting it</description>
          <long-description>We overload this method to prevent modifying the global and native identifiers if the
object is committed, {@link isCommitted()}.</long-description>
          <tag name="param" line="660" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="660" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="660" description="protected"/>
          <tag name="return" line="660" description="&lt;tt&gt;NULL&lt;/tt&gt; set offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="660" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="660" description="" link="isCommitted()"/>
          <tag name="uses" line="660" description="" link="InternalOffsets()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="708" package="Default">
        <name>postOffsetSet</name>
        <full_name>\OntologyWrapper\PersistentObject::postOffsetSet()</full_name>
        <docblock line="708">
          <description>Handle offset and value after setting it</description>
          <long-description>We overload the parent method to set the {@link isDirty()} status.

In this class we do nothing.</long-description>
          <tag name="param" line="708" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="708" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="708" description="protected"/>
          <tag name="uses" line="708" description="" link="isDirty()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="742" package="Default">
        <name>preOffsetUnset</name>
        <full_name>\OntologyWrapper\PersistentObject::preOffsetUnset()</full_name>
        <docblock line="742">
          <description>Handle offset and value before deleting it</description>
          <long-description>We overload this method to prevent modifying the global and native identifiers if the
object is committed, {@link isCommitted()}.</long-description>
          <tag name="param" line="742" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="742" description="protected"/>
          <tag name="return" line="742" description="&lt;tt&gt;NULL&lt;/tt&gt; delete offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="742" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="742" description="" link="isCommitted()"/>
          <tag name="uses" line="742" description="" link="lockedOffsets()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="790" package="Default">
        <name>postOffsetUnset</name>
        <full_name>\OntologyWrapper\PersistentObject::postOffsetUnset()</full_name>
        <docblock line="790">
          <description>Handle offset after deleting it</description>
          <long-description>This method can be used to manage the object after calling the
{@link ArrayObject::OffsetUnset()} method.

In this class we do nothing.</long-description>
          <tag name="param" line="790" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="790" description="protected"/>
          <tag name="uses" line="790" description="" link="isDirty()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="830" package="Default">
        <name>lockedOffsets</name>
        <full_name>\OntologyWrapper\PersistentObject::lockedOffsets()</full_name>
        <docblock line="830">
          <description>Return list of locked offsets</description>
          <long-description>This method should return the list of locked offsets, that is, the offsets which
cannot be modified once the object has been committed.

In this class we return the list of internal tags.</long-description>
          <tag name="access" line="830" description="protected"/>
          <tag name="return" line="830" description="List of locked offsets." type="array">
            <type>array</type>
          </tag>
          <tag name="uses" line="830" description="" link="InternalOffsets()"/>
        </docblock>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/traits/Definition.php" generated-path="OntologyWrapper.traits.Definition.html" hash="2457d622018fd6e13a717921dae59b73" package="Default">
    <docblock line="0">
      <description>Definition.php</description>
      <long-description>This file contains the definition of the {@link Definition} trait.</long-description>
    </docblock>
    <source>eJzFVttu4zYQfZa+Yh72YddwrWSxT1nHGzexAwOOXSRO24cCBS2NbCI0KZB0HGORT9h/6Me0/9UhKcvybQsUCFZPEi9HM2fOGbL9pZgXcZw0GjE04AZzLrnlSrbcMPjByZwbyLlASJW0jEsDdo6QVWtB5X7k65Xg8qkG8gpWM25bhJLEsWQLNAVLEcbSKqFm6980KwrUf/hV5rML4/JtHoogOvo06jO76Z9YdLD9bSJ2jB1UJfBZr4sfAL4oBC5QWgMMFmjnKoNcaVgwyWZczg4Llhu0TYdSFu1p0r3986bXH4wGk8F49NoieNxAeRgMZecy4888WzJRAzQwXYNgcrakda0QX3TFlrRbR9EdF08Kui34568nlfO/v0F70TLuNb1KZ5zpltKzjt/yjNoQXnTeOjuD80/J2cfk49n5Jy+gkOqWjPhrHEU/WDO/PP48HFzDuN9/6E2ge33de3gY38NgNOnd97vXvR8soDiCOHoTggi5UfPLscSit8jMZRU5XxA63HldgkW9IDGaVPPCC4Pm/Lx3SKnhlEmYIiwNZmAVsCxrgkarOT4jMJkRgED7HX17xI3Gm7Cau45YGYwJsWcysqJz42quXOcMf8+UdCGUjvSIJ/xXWrRVy6WyI74UmNpgx1wJoVYOsGCaGixxYS6qTe2l6PhKtQXvtKedd7RlWKbQTqadi0BRtRUo2CwAbzKlpp/hpsNbfLGw8oFH0YpJ66gM3SE0jLa1ndHjcNhO6AWemVgimLlaigyUFOuqAjwvfzJFARSBVDaAahTMliUCQ3ly6hK11rKXzK/uD0cz4Rm1Q9qMB6eVT4Kao6Kjh7kRz1e0JSv8oJ7JBdyjXWp54uArtCLJUNS7cVY4/e7woVcC3QSZ/Q8g3lG0RrcTTjBduQb/WZJMuafM+HoYErVTJGmaS6KiIJkTJDNVCQNoVP60FgaXx8Nwak/nsOKk8qnziEFNmE1Ho52zDaCf11gId8iT4vGFG+tioVLodaukOdkRJZHyboZ2LLKKIOdnLqlwK4L2AZXCL/FdJU7WbHL/2DusWSCJKJwinYvoOAQ6TFZECvlfWrI7qXOhMqeY7DvlO4bJchvK8p+Q2+S3b/vuriUJyH2JjwjYU7/rtspToWYe10VD3iKP2nReRuEnrrxTSq24fl1vDfWb0K4UN/sW/AWzaLPPu3Dn/nRosp3tU0VNkflToyy+e3WlA/oEakKB3Vq8LE3RkMGXU8HTMFSSVMUydl1Gg8TVwW6DuN9iw/ewO7p97N72wtek9/tku4k6lSm7Wy9cr+4cjWPfmd9/cIuSOAoRQb6Uqc98S8J7qJPahIoquARXNhoJydO31xgQprvUlInRem5+6pyMIHZJ72XV3E2ruc2rGe+XuRbRNpQPn6sjPEng8pI0GkevQO+127G/WMR+dP9WRnPxl078L/lsjDI=</source>
  </file>
  <file path="definitions/Types.inc.php" generated-path="definitions.Types.inc.html" hash="d170cacdcc2bb90337815199d0bc5dc1" package="Default">
    <docblock line="0">
      <description>Type definitions.</description>
      <long-description>This file contains the default data and cardinality types.

Each entry defines the &lt;i&gt;global identifier&lt;/i&gt; of a term.</long-description>
      <tag name="author" line="0" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
      <tag name="version" line="0" description="1.00 25/11/2012"/>
    </docblock>
    <constant namespace="" line="29" package="Default">
      <name>kTYPE_MIXED</name>
      <full_name>\\kTYPE_MIXED</full_name>
      <value>':type:mixed'</value>
      <docblock line="29">
        <description>Mixed.</description>
        <long-description>A &lt;i&gt;mixed&lt;/i&gt; data type indicates that the referred property may take any data type.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="37" package="Default">
      <name>kTYPE_STRING</name>
      <full_name>\\kTYPE_STRING</full_name>
      <value>':type:string'</value>
      <docblock line="37">
        <description>String.</description>
        <long-description>A &lt;i&gt;string&lt;/i&gt; data type indicates that the referred property may hold &lt;i&gt;UNICODE&lt;/i&gt;
characters, this type &lt;i&gt;does not include binary data&lt;/i&gt;</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="45" package="Default">
      <name>kTYPE_INT</name>
      <full_name>\\kTYPE_INT</full_name>
      <value>':type:int'</value>
      <docblock line="45">
        <description>Integer.</description>
        <long-description>An &lt;i&gt;integer&lt;/i&gt; data type indicates that the referred property may hold a &lt;i&gt;32 or 64
bit integral numeric value&lt;/i&gt;</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="54" package="Default">
      <name>kTYPE_FLOAT</name>
      <full_name>\\kTYPE_FLOAT</full_name>
      <value>':type:float'</value>
      <docblock line="54">
        <description>Float.</description>
        <long-description>A &lt;i&gt;float&lt;/i&gt; data type indicates that the referred property may hold a &lt;i&gt;floating
point number&lt;/i&gt;, also known as &lt;i&gt;double&lt;/i&gt; or &lt;i&gt;real&lt;/i&gt;. The precision of such value
is not inferred, in general it will be a &lt;i&gt;32 or 64 bit real&lt;/i&gt;</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="68" package="Default">
      <name>kTYPE_ARRAY</name>
      <full_name>\\kTYPE_ARRAY</full_name>
      <value>':type:array'</value>
      <docblock line="68">
        <description>Array.</description>
        <long-description>This data type defines a &lt;em&gt;list of key/value pairs&lt;/em&gt;, the key will be in general a
string, while the value type is not inferred. This data type usually applies to arrays in
which the key part is the discriminant and determines the type of the value, while
traditional arrays are better defined by a fixed data type and a list data kind.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="76" package="Default">
      <name>kTYPE_STRUCT</name>
      <full_name>\\kTYPE_STRUCT</full_name>
      <value>':type:struct'</value>
      <docblock line="76">
        <description>Struct.</description>
        <long-description>This data type defines a &lt;em&gt;structure&lt;/em&gt;, this means that the value will be an
&lt;em&gt;object&lt;/em&gt; or an array of objects if the data kind is a list.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="88" package="Default">
      <name>kTYPE_LANGUAGE_STRINGS</name>
      <full_name>\\kTYPE_LANGUAGE_STRINGS</full_name>
      <value>':type:language-strings'</value>
      <docblock line="88">
        <description>Language string elements list.</description>
        <long-description>This data type defines a &lt;em&gt;list of strings expressed in different languages&lt;/em&gt;. The
list elements are composed by &lt;em&gt;two key/value pairs&lt;/em&gt;. The first pair has the
{@link kTAG_LANGUAGE} tag as its key and the value represents the language code. The
second pair has the {@link kTAG_TEXT} as its key and the value represents the text
expressed in the language defined by the first pair. No two elements may share the same
language and only one element may omit the language pair.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="101" package="Default">
      <name>kTYPE_ENUM</name>
      <full_name>\\kTYPE_ENUM</full_name>
      <value>':type:enum'</value>
      <docblock line="101">
        <description>Enumeration.</description>
        <long-description>An &lt;i&gt;enumerated&lt;/i&gt; data type indicates that the referred property may only hold &lt;i&gt;a
term reference&lt;/i&gt;, that is, the &lt;i&gt;global identifier of a term object&lt;/i&gt;. Enumerated
values are by default strings and must reference a term object.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="110" package="Default">
      <name>kTYPE_SET</name>
      <full_name>\\kTYPE_SET</full_name>
      <value>':type:enum-set'</value>
      <docblock line="110">
        <description>Enumerated set.</description>
        <long-description>An &lt;i&gt;enumerated set&lt;/i&gt; data type indicates that the referred property may only hold
&lt;i&gt;a list of term reference&lt;/i&gt;, that is, an array of &lt;i&gt;term native identifiers&lt;/i&gt;. All
the elements of this list must be unique.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="122" package="Default">
      <name>kTYPE_REF_TERM</name>
      <full_name>\\kTYPE_REF_TERM</full_name>
      <value>':type:ref:term'</value>
      <docblock line="122">
        <description>Term reference.</description>
        <long-description>A &lt;i&gt;term reference&lt;/i&gt; is a &lt;em&gt;string&lt;/em&gt; that must correspond to the identifier of a
{@link Term} object.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="130" package="Default">
      <name>kTYPE_REF_TAG</name>
      <full_name>\\kTYPE_REF_TAG</full_name>
      <value>':type:ref:tag'</value>
      <docblock line="130">
        <description>Tag reference.</description>
        <long-description>A &lt;i&gt;tag reference&lt;/i&gt; is a &lt;em&gt;string&lt;/em&gt; that must correspond to the native identifier
of a {@link Tag} object.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="138" package="Default">
      <name>kTYPE_REF_NODE</name>
      <full_name>\\kTYPE_REF_NODE</full_name>
      <value>':type:ref:node'</value>
      <docblock line="138">
        <description>Node reference.</description>
        <long-description>A &lt;i&gt;node reference&lt;/i&gt; is an &lt;em&gt;integer&lt;/em&gt; that must correspond to the native
identifier of a {@link Node} object.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="146" package="Default">
      <name>kTYPE_REF_EDGE</name>
      <full_name>\\kTYPE_REF_EDGE</full_name>
      <value>':type:ref:edge'</value>
      <docblock line="146">
        <description>Edge reference.</description>
        <long-description>An &lt;i&gt;edge reference&lt;/i&gt; is a &lt;em&gt;string&lt;/em&gt; that must correspond to the native
identifier of an {@link Edge} object.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="154" package="Default">
      <name>kTYPE_REF_ENTITY</name>
      <full_name>\\kTYPE_REF_ENTITY</full_name>
      <value>':type:ref:entity'</value>
      <docblock line="154">
        <description>Entity reference.</description>
        <long-description>An &lt;i&gt;entity reference&lt;/i&gt; is a &lt;em&gt;string&lt;/em&gt; that must correspond to the native
identifier of an {@link Entity} object.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="162" package="Default">
      <name>kTYPE_REF_UNIT</name>
      <full_name>\\kTYPE_REF_UNIT</full_name>
      <value>':type:ref:unit'</value>
      <docblock line="162">
        <description>Unit reference.</description>
        <long-description>A &lt;i&gt;unit reference&lt;/i&gt; is a &lt;em&gt;string&lt;/em&gt; that must correspond to the native
identifier of a {@link Unit} object.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="175" package="Default">
      <name>kTYPE_LIST</name>
      <full_name>\\kTYPE_LIST</full_name>
      <value>':type:list'</value>
      <docblock line="175">
        <description>List.</description>
        <long-description>A &lt;i&gt;list&lt;/i&gt; cardinality type indicates that the referred property will hold a &lt;i&gt;list
of values&lt;/i&gt; whose elements will have the data type defined by the &lt;i&gt;data type&lt;/i&gt;
property.</long-description>
      </docblock>
    </constant>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/DictionaryObject.php" generated-path="OntologyWrapper.DictionaryObject.html" hash="176e135b9604fa794569cdc5b35f1aff" package="Default">
    <docblock line="0">
      <description>DictionaryObject.php</description>
      <long-description>This file contains the definition of the {@link DictionaryObject} class.</long-description>
    </docblock>
    <class final="false" abstract="true" namespace="OntologyWrapper" line="45" package="Default">
      <extends>\OntologyWrapper\ContainerObject</extends>
      <name>DictionaryObject</name>
      <full_name>\OntologyWrapper\DictionaryObject</full_name>
      <docblock line="45">
        <description>Dictionary object</description>
        <long-description>A &lt;em&gt;dictionary&lt;/em&gt; is used to &lt;em&gt;identify&lt;/em&gt; and &lt;em&gt;document&lt;/em&gt; data properties.
The dictionary stores a set of objects called &lt;em&gt;tags&lt;/em&gt;, which contain all the
necessary information needed to understand what a specific data property is, how it can
be used, what data types it can take and all the information necessary to manage it.

Tags are identified in two ways: with their &lt;em&gt;persistent identifier&lt;/em&gt;, which is a
&lt;em&gt;string&lt;/em&gt; that uniquely identifies the tag across all dictionaries, and with their
&lt;em&gt;serial identifier&lt;/em&gt;, which is an &lt;em&gt;integer&lt;/em&gt; that uniquely identifies the tag
only within the current dictionary.

All persistent data properties of all objects of this library are &lt;em&gt;serial identifiers
of tag objects&lt;/em&gt;. This dictionary provides the abiliti to convert among persistent and
serial identifiers, and it provides the ability to retrieve tag objects.

The dictionary is essentially a cache that allows fast access to the tag elements of the
ontology, the dictionary allows retrieving the serial identifier given a persistent
identifier, or retrieve a tag object given a serial identifier.

Derived classes must implement the constructor and the protected dictionary interface.</long-description>
        <tag name="author" line="45" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="45" description="1.00 16/02/2014"/>
      </docblock>
      <property static="false" visibility="protected" line="54" namespace="OntologyWrapper" package="Default">
        <name>$mPid</name>
        <default>NULL</default>
        <docblock line="54">
          <description>Dictionary identifier.</description>
          <long-description>This data member holds the dictionary identifier.</long-description>
          <tag name="var" line="54" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" line="63" namespace="OntologyWrapper" package="Default">
        <name>$mCache</name>
        <default>NULL</default>
        <docblock line="63">
          <description>Cache connection.</description>
          <long-description>This data member holds the dictionary cache connection.</long-description>
          <tag name="var" line="63" description="" type="\OntologyWrapper\Memcached" variable="">
            <type link="Memcached.html">\OntologyWrapper\Memcached</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="86" package="Default">
        <name>cache</name>
        <full_name>\OntologyWrapper\DictionaryObject::cache()</full_name>
        <docblock line="86">
          <description>Return cache</description>
          <long-description>This method will return the current cache.</long-description>
          <tag name="access" line="86" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="125" package="Default">
        <name>setTag</name>
        <full_name>\OntologyWrapper\DictionaryObject::setTag()</full_name>
        <docblock line="125">
          <description>Set tag</description>
          <long-description>This method should either commit the provided tag object, if it doesn't yet exist, or
replace an existing tag object.

The method expects the following parameters:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;$theTag&lt;/b&gt;: Tag object, if derived from an array object, it will be
	converted into an array, before it is set into the dictionary.
&lt;li&gt;&lt;b&gt;$theLife&lt;/b&gt;: Lifetime of the dictionary entry in seconds, 0 means permanent.
&lt;/ul&gt;</long-description>
          <tag name="param" line="125" description="&lt;p&gt;Tag object.&lt;/p&gt;" type="mixed" variable="$theTag">
            <type>mixed</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;Element lifetime.&lt;/p&gt;" type="integer" variable="$theLife">
            <type>integer</type>
          </tag>
          <tag name="access" line="125" description="public&#10;+&#10;+ @throws Exception"/>
          <tag name="uses" line="125" description="" link="setEntry()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theTag</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theLife</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="196" package="Default">
        <name>getIdentifier</name>
        <full_name>\OntologyWrapper\DictionaryObject::getIdentifier()</full_name>
        <docblock line="196">
          <description>Get identifier</description>
          <long-description>This method should return the serial identifier corresponding to the provided
persistent identifier.

The second parameter represents a boolean flag: if &lt;tt&gt;TRUE&lt;/tt&gt; and the provided
identifier is not matched, the method will raise an exception; if &lt;tt&gt;FALSE&lt;/tt&gt;, the
method will return &lt;tt&gt;NULL&lt;/tt&gt; on a mismatch. By default this option is
&lt;tt&gt;TRUE&lt;/tt&gt;.</long-description>
          <tag name="param" line="196" description="&lt;p&gt;Persistent identifier.&lt;/p&gt;" type="string" variable="$theIdentifier">
            <type>string</type>
          </tag>
          <tag name="param" line="196" description="&lt;p&gt;If &lt;tt&gt;TRUE&lt;/tt&gt; assert match.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="access" line="196" description="public"/>
          <tag name="return" line="196" description="Native identifier or &lt;tt&gt;NULL&lt;/tt&gt;.&#10;+&#10;+ @throws Exception" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="196" description="" link="getEntry()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="242" package="Default">
        <name>getObject</name>
        <full_name>\OntologyWrapper\DictionaryObject::getObject()</full_name>
        <docblock line="242">
          <description>Get object</description>
          <long-description>This method should return the tag object corresponding to the provided serial
identifier.

The second parameter represents a boolean flag: if &lt;tt&gt;TRUE&lt;/tt&gt; and the provided
identifier is not matched, the method will raise an exception; if &lt;tt&gt;FALSE&lt;/tt&gt;, the
method will return &lt;tt&gt;NULL&lt;/tt&gt; on a mismatch. By default this option is
&lt;tt&gt;TRUE&lt;/tt&gt;.</long-description>
          <tag name="param" line="242" description="&lt;p&gt;Serial identifier.&lt;/p&gt;" type="integer" variable="$theIdentifier">
            <type>integer</type>
          </tag>
          <tag name="param" line="242" description="&lt;p&gt;If &lt;tt&gt;TRUE&lt;/tt&gt; assert match.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="access" line="242" description="public"/>
          <tag name="return" line="242" description="Tag object array or &lt;tt&gt;NULL&lt;/tt&gt;.&#10;+&#10;+ @throws Exception" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="242" description="" link="getEntry()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="289" package="Default">
        <name>delTag</name>
        <full_name>\OntologyWrapper\DictionaryObject::delTag()</full_name>
        <docblock line="289">
          <description>Delete tag</description>
          <long-description>This method should delete a tag entry corresponding to the provided persistent or
serial identifier. This means that the method will delete both the identifier and the
object entries.

Note that an integer identifier is assumed to be the serial identifier and anything
else will be cast to string and assumed to be the persistent identifier.

The second parameter rperesents a boolean flag: if &lt;tt&gt;TRUE&lt;/tt&gt; and the provided
identifier is not matched, the method will raise an exception. By default this option
is &lt;tt&gt;FALSE&lt;/tt&gt;.</long-description>
          <tag name="param" line="289" description="&lt;p&gt;Persistent or serial identifier.&lt;/p&gt;" type="mixed" variable="$theIdentifier">
            <type>mixed</type>
          </tag>
          <tag name="param" line="289" description="&lt;p&gt;If &lt;tt&gt;TRUE&lt;/tt&gt; assert match.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="access" line="289" description="public"/>
          <tag name="uses" line="289" description="" link="delEntry()"/>
          <tag name="return" line="289" description="&lt;tt&gt;TRUE&lt;/tt&gt; deleted, &lt;tt&gt;FALSE&lt;/tt&gt; not found." type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="392" package="Default">
        <name>dictionaryFilled</name>
        <full_name>\OntologyWrapper\DictionaryObject::dictionaryFilled()</full_name>
        <docblock line="392">
          <description>Check if dictionary is filled</description>
          <long-description>This method will return &lt;tt&gt;TRUE&lt;/tt&gt; if the current dictionary can resolve the
&lt;tt&gt;kTAG_DOMAIN&lt;/tt&gt; identifier.

We assume that if the dictionary can resolve this identifier, it means it must be
filled.</long-description>
          <tag name="access" line="392" description="public"/>
          <tag name="return" line="392" description="&lt;tt&gt;TRUE&lt;/tt&gt; means filled." type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="OntologyWrapper" line="420" package="Default">
        <name>dictionaryFlush</name>
        <full_name>\OntologyWrapper\DictionaryObject::dictionaryFlush()</full_name>
        <docblock line="420">
          <description>Flush dictionary elements</description>
          <long-description>This method should invalidate all the elements of the dictionary.

The method expects one parameter that corresponds to the delay in seconds before the
elements will be invalidated.</long-description>
          <tag name="param" line="420" description="&lt;p&gt;Delay before flush.&lt;/p&gt;" type="integer" variable="$theDelay">
            <type>integer</type>
          </tag>
          <tag name="access" line="420" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theDelay</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OntologyWrapper" line="458" package="Default">
        <name>setEntry</name>
        <full_name>\OntologyWrapper\DictionaryObject::setEntry()</full_name>
        <docblock line="458">
          <description>Set a dictionary entry</description>
          <long-description>This method should commit a new entry in the dictionary, if it doesn't exist yet, or
replace the matching entry if it already exists.

The method expects the following parameters:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;$theKey&lt;/b&gt;: Entry key.
&lt;li&gt;&lt;b&gt;$theValue&lt;/b&gt;: Entry value.
&lt;li&gt;&lt;b&gt;$theLife&lt;/b&gt;: Entry lifetime in seconds, 0 means permanent.
&lt;/ul&gt;

If the operation fails the method should raise an exception.</long-description>
          <tag name="param" line="458" description="&lt;p&gt;Entry key.&lt;/p&gt;" type="mixed" variable="$theKey">
            <type>mixed</type>
          </tag>
          <tag name="param" line="458" description="&lt;p&gt;Entry value.&lt;/p&gt;" type="mixed" variable="$theValue">
            <type>mixed</type>
          </tag>
          <tag name="param" line="458" description="&lt;p&gt;Entry lifetime.&lt;/p&gt;" type="integer" variable="$theLife">
            <type>integer</type>
          </tag>
          <tag name="access" line="458" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theKey</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theValue</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theLife</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OntologyWrapper" line="478" package="Default">
        <name>getEntry</name>
        <full_name>\OntologyWrapper\DictionaryObject::getEntry()</full_name>
        <docblock line="478">
          <description>Get a dictionary entry</description>
          <long-description>This method should return the dictionary entry corresponding to the provided key; if
the entry is not matched, the method should return &lt;tt&gt;NULL&lt;/tt&gt;.

If the operation fails the method should raise an exception.</long-description>
          <tag name="param" line="478" description="&lt;p&gt;Entry key.&lt;/p&gt;" type="mixed" variable="$theKey">
            <type>mixed</type>
          </tag>
          <tag name="access" line="478" description="protected"/>
          <tag name="return" line="478" description="Entry value or &lt;tt&gt;NULL&lt;/tt&gt;." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theKey</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OntologyWrapper" line="499" package="Default">
        <name>delEntry</name>
        <full_name>\OntologyWrapper\DictionaryObject::delEntry()</full_name>
        <docblock line="499">
          <description>Get a dictionary entry</description>
          <long-description>This method should delete the dictionary entry corresponding to the provided key; if
the entry was deleted, the method should return &lt;tt&gt;TRUE&lt;/tt&gt;, if the entry was not
found, the method should return &lt;tt&gt;FALSE&lt;/tt&gt;.

If the operation fails the method should raise an exception.</long-description>
          <tag name="param" line="499" description="&lt;p&gt;Entry key.&lt;/p&gt;" type="mixed" variable="$theKey">
            <type>mixed</type>
          </tag>
          <tag name="access" line="499" description="protected"/>
          <tag name="return" line="499" description="&lt;tt&gt;TRUE&lt;/tt&gt; deleted, &lt;tt&gt;FALSE&lt;/tt&gt; not matched." type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theKey</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/Node.php" generated-path="OntologyWrapper.Node.html" hash="b73d301cd22eb76a279e244c374a91a7" package="Default">
    <docblock line="0">
      <description>Node.php</description>
      <long-description>This file contains the definition of the {@link Node} class.</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="OntologyWrapper" line="72" package="Default">
      <extends>\OntologyWrapper\PersistentObject</extends>
      <name>Node</name>
      <full_name>\OntologyWrapper\Node</full_name>
      <docblock line="72">
        <description>Node</description>
        <long-description>A node is a &lt;em&gt;vertex in a graph structure&lt;/em&gt;, nodes reference
&lt;em&gt;{@link Term}&lt;/em&gt; and &lt;em&gt;{@link Tag&lt;/em&gt; instances, when referencing a
term, nodes are used to build &lt;em&gt;ontologies&lt;/em&gt;, &lt;em&gt;type definitions&lt;/em&gt; and
&lt;em&gt;controlloed vocabularies&lt;/em&gt;; when referencing tags they are used to build &lt;em&gt;data
structures&lt;/em&gt;, &lt;em&gt;input and output templates&lt;/em&gt; and &lt;em&gt;search forms&lt;/em&gt;.

Node objects, along with edge objects, represent the presentation layer of the ontology,
users compose and consult network structures through these objects.

The class features the following default offsets:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;{@link kTAG_NID}&lt;/tt&gt;: &lt;em&gt;Native identifier&lt;/em&gt;. This required attribute holds
	an &lt;em&gt;integer serial number&lt;/em&gt;, nodes do not have a unique persistent identifier,
	since they act as references and because you may have more than one node referencing
	the same term or property. The native identifier is assigned automatically.
&lt;li&gt;&lt;tt&gt;{@link kTAG_TERM}&lt;/tt&gt;: &lt;em&gt;Term&lt;/em&gt;. This attribute is a &lt;em&gt;string&lt;/em&gt; that
	holds a reference to the &lt;em&gt;term object&lt;/em&gt; that the current node &lt;em&gt;represents
	in a graph structure&lt;/em&gt;. If this offset is set, the {@link kTAG_TAG} offset must
	be omitted. This attribute must be managed with its offset.
&lt;li&gt;&lt;tt&gt;{@link kTAG_TAG}&lt;/tt&gt;: &lt;em&gt;Tag&lt;/em&gt;. This attribute is a &lt;em&gt;string&lt;/em&gt; that
	holds a reference to the &lt;em&gt;tag object&lt;/em&gt; that the current node &lt;em&gt;represents
	in a graph structure&lt;/em&gt;. If this offset is set, the {@link kTAG_TERM} offset must
	be omitted. This attribute must be managed with its offset.
&lt;/ul&gt;

The {@link __toString()} method will return the value stored in the {@link kTAG_TERM} or
the {@link kTAG_TAG} offset. This value represents the node persistent identifier, which
is not, however, unique.

Nodes cannot be uniquely identified via a persistent identifier, because more than one
node may share the same term or tag, this means that when searching for nodes you should
rely more on traversing a graph path, rather than selecting an object from a list.

Objects of this class can hold any additional attribute that is considered necessary or
useful to define and share the current node. In this class we define only those
attributes that constitute the core functionality of the object, derived classes will add
attributes specific to the domain in which the object will operate.

The object is considered initialised, {@link isInited()}, if it has at least the term
reference, {@link kTAG_TERM}, or the tag reference, {@link kTAG_TAG}.</long-description>
        <tag name="author" line="72" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="72" description="1.00 07/02/2014"/>
      </docblock>
      <constant namespace="OntologyWrapper" line="82" package="Default">
        <name>kSEQ_NAME</name>
        <full_name>\OntologyWrapper\Node::kSEQ_NAME</full_name>
        <value>'_nodes'</value>
        <docblock line="82">
          <description>Default collection name.</description>
          <long-description>This constant provides the &lt;i&gt;default collection name&lt;/i&gt; in which objects of this
class are stored.</long-description>
          <tag name="var" line="82" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="112" package="Default">
        <name>__construct</name>
        <full_name>\OntologyWrapper\Node::__construct()</full_name>
        <docblock line="112">
          <description>Instantiate class.</description>
          <long-description>In this class we link the inited status with the presence of the tag or the term.</long-description>
          <tag name="param" line="112" description="&lt;p&gt;Persistent store.&lt;/p&gt;" type="\OntologyWrapper\ConnectionObject" variable="$theContainer">
            <type link="ConnectionObject.html">\OntologyWrapper\ConnectionObject</type>
          </tag>
          <tag name="param" line="112" description="&lt;p&gt;Object identifier.&lt;/p&gt;" type="mixed" variable="$theIdentifier">
            <type>mixed</type>
          </tag>
          <tag name="access" line="112" description="public"/>
          <tag name="see" line="112" description="kTAG_TERM" link="\OntologyWrapper\kTAG_TAG"/>
          <tag name="uses" line="112" description="" link="isInited()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theContainer</name>
          <default>NULL</default>
          <type>\OntologyWrapper\ConnectionObject</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="142" package="Default">
        <name>__toString</name>
        <full_name>\OntologyWrapper\Node::__toString()</full_name>
        <docblock line="142">
          <description>&lt;h4&gt;Return global identifier&lt;/h4&gt;</description>
          <long-description>If the object holds the term reference, this will be returned; if it holds the tag
reference, it will be returned; if none of these are set, the method will return an
empty string.</long-description>
          <tag name="access" line="142" description="public"/>
          <tag name="return" line="142" description="The persistent identifier." type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="188" package="Default">
        <name>ResolveDatabase</name>
        <full_name>\OntologyWrapper\Node::ResolveDatabase()</full_name>
        <docblock line="188">
          <description>Resolve the database</description>
          <long-description>In this class we return the metadata database.</long-description>
          <tag name="param" line="188" description="&lt;p&gt;Wrapper.&lt;/p&gt;" type="\OntologyWrapper\Wrapper" variable="$theWrapper">
            <type link="Wrapper.html">\OntologyWrapper\Wrapper</type>
          </tag>
          <tag name="param" line="188" description="&lt;p&gt;Raise exception if unable.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="param" line="188" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="static" line="188" description=""/>
          <tag name="return" line="188" description="Database or &lt;tt&gt;NULL&lt;/tt&gt;." type="\OntologyWrapper\DatabaseObject">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
          <tag name="throws" line="188" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theWrapper</name>
          <default></default>
          <type>\OntologyWrapper\Wrapper</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="239" package="Default">
        <name>preCommitIdentify</name>
        <full_name>\OntologyWrapper\Node::preCommitIdentify()</full_name>
        <docblock line="239">
          <description>Set object identifiers before commit</description>
          <long-description>In this class we set the native identifier with the sequence number.</long-description>
          <tag name="access" line="239" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="289" package="Default">
        <name>isReady</name>
        <full_name>\OntologyWrapper\Node::isReady()</full_name>
        <docblock line="289">
          <description>Check if object is ready</description>
          <long-description>In this class we ensure the object has the native identifier, {@link kTAG_NID}.</long-description>
          <tag name="access" line="289" description="protected"/>
          <tag name="return" line="289" description="&lt;tt&gt;TRUE&lt;/tt&gt; means ready." type="Boolean">
            <type>Boolean</type>
          </tag>
          <tag name="uses" line="289" description="" link="isReady()"/>
          <tag name="uses" line="289" description="" link="isInited()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="327" package="Default">
        <name>preOffsetSet</name>
        <full_name>\OntologyWrapper\Node::preOffsetSet()</full_name>
        <docblock line="327">
          <description>Handle offset and value before setting it</description>
          <long-description>In this class we cast the value of the term into a term reference, or the value of a
tag in a tag reference; we also ensure that provided objects are of the correct
class.</long-description>
          <tag name="param" line="327" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="327" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="327" description="protected"/>
          <tag name="return" line="327" description="&lt;tt&gt;NULL&lt;/tt&gt; set offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="327" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="see" line="327" description="kTAG_TERM" link="\OntologyWrapper\kTAG_TAG"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="428" package="Default">
        <name>postOffsetSet</name>
        <full_name>\OntologyWrapper\Node::postOffsetSet()</full_name>
        <docblock line="428">
          <description>Handle offset and value after setting it</description>
          <long-description>In this class we delete the tag when we set the term and vice-versa.</long-description>
          <tag name="param" line="428" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="428" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="428" description="protected"/>
          <tag name="see" line="428" description="kTAG_TERM" link="\OntologyWrapper\kTAG_TAG"/>
          <tag name="uses" line="428" description="" link="isInited()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="468" package="Default">
        <name>postOffsetUnset</name>
        <full_name>\OntologyWrapper\Node::postOffsetUnset()</full_name>
        <docblock line="468">
          <description>Handle offset after deleting it</description>
          <long-description>In this class we set the {@link isInited()} status.</long-description>
          <tag name="param" line="468" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="468" description="protected"/>
          <tag name="see" line="468" description="kTAG_TERM" link="\OntologyWrapper\kTAG_TAG"/>
          <tag name="uses" line="468" description="" link="isInited()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="507" package="Default">
        <name>lockedOffsets</name>
        <full_name>\OntologyWrapper\Node::lockedOffsets()</full_name>
        <docblock line="507">
          <description>Return list of locked offsets</description>
          <long-description>In this class we return the {@link kTAG_TAG} and the {@link kTAG_TERM} offsets.</long-description>
          <tag name="access" line="507" description="protected"/>
          <tag name="return" line="507" description="List of locked offsets." type="array">
            <type>array</type>
          </tag>
          <tag name="see" line="507" description="kTAG_TERM" link="\OntologyWrapper\kTAG_TAG"/>
        </docblock>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/traits/Description.php" generated-path="OntologyWrapper.traits.Description.html" hash="1c219d96aebded098aed4b4cc82ab8e5" package="Default">
    <docblock line="0">
      <description>Description.php</description>
      <long-description>This file contains the definition of the {@link Description} trait.</long-description>
    </docblock>
    <source>eJzFVs1u4zYQPktPMYc97BqulSz2lHW8cRM7MODYi8RpeyhQ0NLIJkKTAknFCRZ5hH2HPkz7Xh2Ssiz/pAUKBKuTRJEfZ775viG7X4plEcdJqxVDC67QpJoXlivZcePgR2dLbiDnAiFV0jIuDdglQoY5l9zNBZX7kW8XgsuHJsoLWM247RBMEseSrdAULEWYSquEWjz/qllRoP7dzzKfXSDnb/NQBNHRp9X8s0fAK7MO1r9NyI6yw8IERpul8QPAV4XAFUprgMEK7VJlkCsNKybZgstFVbMtjspzg7btYKrCPcz6139cDe4ub0dfZ6Pp5KVDG+AGzANhqD2XGX/kWclEE9LA/BkEk4uSJnZCiNEFK2m5jqIbLh4U9Dvw958PKud/fYfuqmPca3qRLjjTHaUXPb/kEbUhvOi0c3ICp5+Sk4/Jx5PTT15FIdsGIfG3OIp+sHK+3v88Hl3CdDi8G8ygf3k5uLub3sJoMhvcDvuXgx+sojiCOHoTggi51XTNscyit0jNpRU5dxA63HhpgkW9aurR/fP/vU0qGadMwhyhNJiBVcCyrA0areb4iMBkRgAC7Z7EN53OKdwjblTehvXSdcbaZUyIve5IfnSWXC+V66Bh90xJF0JlS4+468HhaDLyFqxs2mnkUjsSnwpMbXBkroRQawdYME19lrgwZ/Wibil6vlRdwXvdee8dLRlXKXSTee8sUFQvBQo2C8CbTKn5Z7jp9BafLKx94FG0ZtI6KkODCD2ja21vcj8edxN6gUcmSgSzVKXIQEnxXFeA59UmcxRAEUhlA6hGwWxVIjCUJ6c+0Wgue8n84nY4mgnPqCfSYjw4tXwS1CEVnUDMjXi+oi1ZYYNmJmdwi7bU8pUDsNCKJENR78ZZ4wz747tBBXQVZPY/gHhP0RzdTTjB9OUz+M+KZMo9ZcbXw5ConSJJ01wSFQXJnCCZqUsYQKNq00YYXB4Pw6k9XcKak8rnziMGNWG2HY12yTaA/r/GQriznhSPT9xYFwuVQj93KpqTHVESKe8WaKciqwlyfuaSCrcmaB9QJfwK31Xi1ZrNbu8HhzULJBGFc6TDER2HQMfJmkgh/0tLdid1rlTmFJP9S/mOYbLchrL8J+Q2+e3bvrsbSQJyX+IjAvbU77qt9lSomcd10ZC3yKM2XVZR+B8X3imVVly/braGnQvRrhY3C1f8CbNos9DbcPcedWiznfVzRW2R+XOjKr97dcUD+gRqQ4HfRsQsTdGQxcu54GkYqmiqg5m6PqNB4vpgtUHcb7Lhe9yfXN/3rwfhazb4bbZdRL3KVP1tEG5ZN47Iqe/N7z+4SUkchYggL2XqM2+w8B6avLahJgvOwVWORkL29O1lBgTqLjZVZjSfm596r4YQu6z30mrv5tXeJtaO9yvdiGgbyofP9SmeJHB+TjKNoxeg9+Y92d8uYj98cDejn/GXXvwPc1ySzA==</source>
  </file>
  <file path="OntologyWrapper/ServerObject.php" generated-path="OntologyWrapper.ServerObject.html" hash="63990486ef19875c786fda5ceb6bb8bf" package="Default">
    <docblock line="0">
      <description>ServerObject.php</description>
      <long-description>This file contains the definition of the {@link ServerObject} class.</long-description>
    </docblock>
    <class final="false" abstract="true" namespace="OntologyWrapper" line="29" package="Default">
      <extends>\OntologyWrapper\ConnectionObject</extends>
      <name>ServerObject</name>
      <full_name>\OntologyWrapper\ServerObject</full_name>
      <docblock line="29">
        <description>Server object</description>
        <long-description>This &lt;i&gt;abstract&lt;/i&gt; class is the ancestor of all classes representing server connection
instances, this class extends the {@link ConnectionObject} class to implement server
specific functionality prototypes.</long-description>
        <tag name="author" line="29" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="29" description="1.00 06/02/2014"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="61" package="Default">
        <name>Database</name>
        <full_name>\OntologyWrapper\ServerObject::Database()</full_name>
        <docblock line="61">
          <description>Return database connection</description>
          <long-description>This method can be used to return a database connection from the current server.

The method expects a single parameter which represents the database name, the method
should return an instance of a class derived from {@link DatabaseObject}.</long-description>
          <tag name="param" line="61" description="&lt;p&gt;Database name.&lt;/p&gt;" type="string" variable="$theName">
            <type>string</type>
          </tag>
          <tag name="param" line="61" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="61" description="public"/>
          <tag name="return" line="61" description="Database object." type="\OntologyWrapper\DatabaseObject">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
          <tag name="uses" line="61" description="" link="newDatabase()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="101" package="Default">
        <name>getStatistics</name>
        <full_name>\OntologyWrapper\ServerObject::getStatistics()</full_name>
        <docblock line="101">
          <description>Return statistics</description>
          <long-description>This method should return the server statistics, the result depends on the specific
driver.

The method should return the following retults:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;NULL&lt;/tt&gt;: The operation is not supported.
&lt;li&gt;&lt;tt&gt;FALSE&lt;/tt&gt;: The server is not connected.
&lt;li&gt;&lt;tt&gt;array&lt;/tt&gt;: The server statistics.
&lt;/ul&gt;

We implement the method in this class as a fall-back.</long-description>
          <tag name="access" line="101" description="public"/>
          <tag name="return" line="101" description="Server statistics, &lt;tt&gt;NULL&lt;/tt&gt; or &lt;tt&gt;FALSE&lt;/tt&gt;." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="127" package="Default">
        <name>DefaultOffsets</name>
        <full_name>\OntologyWrapper\ServerObject::DefaultOffsets()</full_name>
        <docblock line="127">
          <description>Return default offsets</description>
          <long-description>In this class we return {@link kTAG_CONN_PROTOCOL}, {@link kTAG_CONN_HOST},
{@link kTAG_CONN_PORT}, {@link kTAG_CONN_USER}, {@link kTAG_CONN_PASS} and
{@link kTAG_CONN_OPTS}.</long-description>
          <tag name="static" line="127" description=""/>
          <tag name="return" line="127" description="List of default offsets." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OntologyWrapper" line="168" package="Default">
        <name>newDatabase</name>
        <full_name>\OntologyWrapper\ServerObject::newDatabase()</full_name>
        <docblock line="168">
          <description>Return a new database instance</description>
          <long-description>This method should implemented by concrete derived classes, it expects a list of
offsets which include server information and should use them to instantiate a
{@link DatabaseObject} instance.

Derived classes must implement this method.

&lt;em&gt;When implementing this method you should not forget to set the dictionary&lt;/em&gt;.</long-description>
          <tag name="param" line="168" description="&lt;p&gt;Full database offsets.&lt;/p&gt;" type="array" variable="$theOffsets">
            <type>array</type>
          </tag>
          <tag name="param" line="168" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="168" description="protected"/>
          <tag name="return" line="168" description="Database instance." type="\OntologyWrapper\DatabaseObject">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffsets</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
    </class>
    <source>eJzdWMFu4zYQPUtfMYccksBrZxfFHmLHG6/jpAESK4gd5NAWAS1RMRtZFEhqs0aQT+g/9GPa/+qQoiRKdhZ7aJpifQgUivM4M+R7M9TgU7bMfL+3v+/DPsyo+EJFsPidhqqrX4AZni+ZhJglFEKeKsJSCWpJIaIxS5liPAUem5Gn44SlDw2YZwgTImUXcXq+n5IVlRkJKQSp4gm/X98KkmVU9H0/lxujv455miIILlGg9bWrR6/zQw+9rb999007Rdtnbdi/jss6pY2tA24cc/dtwIZkIZUgoRr02LDYDmDFFpI0pFJxoTeQJEnxkkoQNBNU0lSx9B5kAR1We6Gx8RAoY91BIEQrYOlXRdNIuoehvYX2QIDiwFZZQle4il1C48qMhixmIcR5aqxIwtQaMsEVV+uMmpOkU31McrXkwvMuWfLAYdSFv/984DH76w8YrLpSP4bH4T0josvF/dCY4BoSIb333YMDOPjYO/jQ+3Dw/idzNsskWffcfa7CasfiP/me98ZH8urm88X5GMbBdDoZz8+DKVyOpqOzyeVkOofz6XxyfToaT972jPoe+N6rZAmR970TosiCSLotLO814tIxeZp4iA7XVOUihcg64fIEX5sphogriuc1gpCksKCAahdpDojCmmyzh1jwleFSmAtR86TrANMSl35F5iiJSBJJi1qdEYFqq5C5j0sWLmtOW/Uu19Oa3DFDBZIBlkueJ1HlXVrx3SiF5UhEBfuCYRg3Ld3LvbBkr109Nv4Akgzd03uzg0tOcW18PHF96brTF5wnlKRmfsSDjJrHgVLD+fXNZNDDB+A46mTNWZKEKFASsnyRsLAYshE13XQ8KATUwci1Hqb0sZyxu6fHe75XoFY6VUHuQhlZB6zPcATaXUBTrRi9nvkDZ1S1drbeNNQ5O3HHjEnE2NFK+254T9VICLIe82y9u9fXElRjjqKoubVtnF/gYT46u9N6cfd5NJvAbwWy8diC2STZ9dzgwaLUoe31S7Lh6kdHQx8BngGfS5vua9Mf8zFTRDGpWCjfUgJk5cVW5jc5pQlnN722K3iINM0ThfTKTNXhdrKtjAY30szbLgSby8Q8SfijLuV6MFHysLIb5MnQJHGQsKGm1fTm4sLQ6tBgIrcEMccb40g5ntM8y7hQNOo2zE5HF7OJY2cjs0aWnG0jok/xplGdjkIKBj3rpPnvljp9Q61aKFBuI0K0EMbY0rxbkPDhuyTBeFO3eI1daWQGsF9qxtx9QRIaJ3N3rz6UTyXFNGjfe/bfvo/wZvPRHBuJ4PR0NtnoHH7g5oHGBDkRxLGk6k3lIyo8wQprXKnO7HnjZD/Sktq24tZyfnUdzINxcPHc2Xz3czCbP3cM3qZdcD3fZnMzm1xvG78azWbP2BRE2+GCq/nMLfyGSC9w7QK5oVuKVuwloQpTp8Y2NmvX1lMX9G5FxT3WKSxTKBCHh20LTEHxM7N3t2SvmuEBtBLYaSXthak6b51Wvl6YqnMFe98oog33+/8HndB5wpvG5MS9c7Tl4gcVC6cV2hbZfyYVRHekdZ9XNuffajuqookN+2KtS3KIvKFVE2+v/h1gyrlLJAU/Dajlpr1OsDRM8qiu9GnMxapoFVAZylX1Rx0s0itz3TdeKkZwVeJKR+vOUIVTa8hJ00lY5eiW2wZU4dY2A7oa3i6xQ63m6Q7ImQprnpd+6i4FA8CCrT2VtGgtIlZ8ghDYpSDaxmWmkjFzmalLyGmeJPXuuJr2795rBFemrfq+q00jrSiu1RePCqcW2mbPXwe3eaXpG875Rq02P51g8+9/Gvr/AL4QhXM=</source>
  </file>
  <file path="OntologyWrapper/CollectionObject.php" generated-path="OntologyWrapper.CollectionObject.html" hash="8ad0f997cc3065fe067f2a03cb37e9cf" package="Default">
    <docblock line="0">
      <description>CollectionObject.php</description>
      <long-description>This file contains the definition of the {@link CollectionObject} class.</long-description>
    </docblock>
    <class final="false" abstract="true" namespace="OntologyWrapper" line="30" package="Default">
      <extends>\OntologyWrapper\ConnectionObject</extends>
      <name>CollectionObject</name>
      <full_name>\OntologyWrapper\CollectionObject</full_name>
      <docblock line="30">
        <description>Collection object</description>
        <long-description>This &lt;i&gt;abstract&lt;/i&gt; class is the ancestor of all classes representing database
collection instances, this class extends the {@link ConnectionObject} class to implement
collection specific functionality prototypes.</long-description>
        <tag name="author" line="30" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="30" description="1.00 06/02/2014"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="62" package="Default">
        <name>__construct</name>
        <full_name>\OntologyWrapper\CollectionObject::__construct()</full_name>
        <docblock line="62">
          <description>Instantiate class.</description>
          <long-description>We overload the constructor to instantiate a database from the provided parameter if
the parent object was not provided.</long-description>
          <tag name="param" line="62" description="&lt;p&gt;Data source name or parameters.&lt;/p&gt;" type="mixed" variable="$theParameter">
            <type>mixed</type>
          </tag>
          <tag name="param" line="62" description="&lt;p&gt;Connection parent.&lt;/p&gt;" type="\OntologyWrapper\ConnectionObject" variable="$theParent">
            <type link="ConnectionObject.html">\OntologyWrapper\ConnectionObject</type>
          </tag>
          <tag name="access" line="62" description="public"/>
          <tag name="uses" line="62" description="" link="ServerObject::DefaultOffsets()"/>
          <tag name="uses" line="62" description="" link="DatabaseObject::DefaultOffsets()"/>
          <tag name="uses" line="62" description="" link="newDatabase()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theParameter</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theParent</name>
          <default>NULL</default>
          <type>\OntologyWrapper\ConnectionObject</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="OntologyWrapper" line="118" package="Default">
        <name>drop</name>
        <full_name>\OntologyWrapper\CollectionObject::drop()</full_name>
        <docblock line="118">
          <description>Drop the collection</description>
          <long-description>This method should drop the current collection.</long-description>
          <tag name="access" line="118" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="151" package="Default">
        <name>commit</name>
        <full_name>\OntologyWrapper\CollectionObject::commit()</full_name>
        <docblock line="151">
          <description>Insert an object</description>
          <long-description>The method expects the provided parameter to be either an array or an
{@link ArrayObject} instance.

The method will call the virtual {@link insertData()} method, passing the received
object to it, which will perform the actual commit.

The method will return the inserted object's identifier, {@link kTAG_NID}.

This method will also take care of setting the {@link kTAG_CLASS} offset.</long-description>
          <tag name="param" line="151" description="&lt;p&gt;Object to commit.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theObject">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="151" description="&lt;p&gt;Insert options.&lt;/p&gt;" type="array" variable="$theOptions">
            <type>array</type>
          </tag>
          <tag name="access" line="151" description="public"/>
          <tag name="return" line="151" description="Inserted object identifier." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="151" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="see" line="151" description="" link="\OntologyWrapper\kTAG_CLASS"/>
          <tag name="uses" line="151" description="" link="isConnected()"/>
          <tag name="uses" line="151" description="" link="insertData()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theObject</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theOptions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="OntologyWrapper" line="224" package="Default">
        <name>resolve</name>
        <full_name>\OntologyWrapper\CollectionObject::resolve()</full_name>
        <docblock line="224">
          <description>Resolve an object</description>
          <long-description>This method should select an object in the current collection matching the provided
identifier with the provided offset.

The method expects the following parameters:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;$theIdentifier&lt;/b&gt;: This parameter represents the value to match with the
	provided offset.
&lt;li&gt;&lt;b&gt;$theOffset&lt;/b&gt;: This parameter represents either the native or persistent
	identifier of the offset tag.
&lt;li&gt;&lt;b&gt;$asObject&lt;/b&gt;: This parameter determines what the method should return:
 &lt;ul&gt;
	&lt;li&gt;&lt;tt&gt;TRUE&lt;/tt&gt;: Return the object; if there are more than one objects
		selected, this method should only return the first.
	&lt;li&gt;&lt;tt&gt;FALSE&lt;/tt&gt;: Return the object array; if there are more than one objects
		selected, this method should only return the first.
	&lt;li&gt;&lt;tt&gt;NULL&lt;/tt&gt;: Return the objects count.
 &lt;/ul&gt;
&lt;/ul&gt;

Concrete derived classes should implement this method.</long-description>
          <tag name="param" line="224" description="&lt;p&gt;Object identifier.&lt;/p&gt;" type="mixed" variable="$theIdentifier">
            <type>mixed</type>
          </tag>
          <tag name="param" line="224" description="&lt;p&gt;Offset.&lt;/p&gt;" type="mixed" variable="$theOffset">
            <type>mixed</type>
          </tag>
          <tag name="param" line="224" description="&lt;p&gt;Return object if &lt;tt&gt;TRUE&lt;/tt&gt;.&lt;/p&gt;" type="mixed" variable="$asObject">
            <type>mixed</type>
          </tag>
          <tag name="access" line="224" description="public"/>
          <tag name="return" line="224" description="Found object, array, objects count or &lt;tt&gt;NULL&lt;/tt&gt;." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default>kTAG_NID</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$asObject</name>
          <default>TRUE</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="OntologyWrapper" line="242" package="Default">
        <name>getAll</name>
        <full_name>\OntologyWrapper\CollectionObject::getAll()</full_name>
        <docblock line="242">
          <description>Return all objects</description>
          <long-description>This method should select all the objects of the collection and return an iterator.

Concrete derived classes should implement this method.</long-description>
          <tag name="access" line="242" description="public"/>
          <tag name="return" line="242" description="Selection of all objects of the collection." type="\OntologyWrapper\Iterator">
            <type link="Iterator.html">\OntologyWrapper\Iterator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="280" package="Default">
        <name>setSequenceNumber</name>
        <full_name>\OntologyWrapper\CollectionObject::setSequenceNumber()</full_name>
        <docblock line="280">
          <description>Set sequence number</description>
          <long-description>This method should initialise a sequence number associated to the provided parameter.
This operation is equivalent to resetting an auto-number for a database.

Once the sequence is set, the next requested sequence number will hold the value set
by this method, so to start counting from &lt;tt&gt;1&lt;/tt&gt; you should provide this value to
this method.

This method is intended to be handled by database objects, in this class we simply
let the object's parent, a database, perform the action.

Derived classes should never need to overload this method.</long-description>
          <tag name="param" line="280" description="&lt;p&gt;Sequence selector.&lt;/p&gt;" type="string" variable="$theSequence">
            <type>string</type>
          </tag>
          <tag name="param" line="280" description="&lt;p&gt;Sequence number.&lt;/p&gt;" type="integer" variable="$theNumber">
            <type>integer</type>
          </tag>
          <tag name="access" line="280" description="public"/>
          <tag name="throws" line="280" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theSequence</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theNumber</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="325" package="Default">
        <name>getSequenceNumber</name>
        <full_name>\OntologyWrapper\CollectionObject::getSequenceNumber()</full_name>
        <docblock line="325">
          <description>Return sequence number</description>
          <long-description>This method should return a sequence number associated to the provided parameter.
This operation is equivalent to requesting an auto-number for a database.

Each time a sequence number is requested, the sequence seed is updated, so use this
method only when the sequence is required.

If the sequence selector is not found, a new one will be created starting with the
number &lt;tt&gt;1&lt;/tt&gt;, so, if you need to start with another number, use the
{@link setSequenceNumber()} before.

This method is intended to be handled by database objects, in this class we simply
let the object's parent, a database, perform the action.

Derived classes should never need to overload this method.</long-description>
          <tag name="param" line="325" description="&lt;p&gt;Sequence selector.&lt;/p&gt;" type="string" variable="$theSequence">
            <type>string</type>
          </tag>
          <tag name="access" line="325" description="public"/>
          <tag name="return" line="325" description="Sequence number." type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theSequence</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="361" package="Default">
        <name>DefaultOffsets</name>
        <full_name>\OntologyWrapper\CollectionObject::DefaultOffsets()</full_name>
        <docblock line="361">
          <description>Return default offsets</description>
          <long-description>In this class we return the {@link kTAG_CONN_COLL} offset.</long-description>
          <tag name="static" line="361" description=""/>
          <tag name="return" line="361" description="List of default offsets." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OntologyWrapper" line="399" package="Default">
        <name>newDatabase</name>
        <full_name>\OntologyWrapper\CollectionObject::newDatabase()</full_name>
        <docblock line="399">
          <description>Return a new database instance</description>
          <long-description>This method should be implemented by concrete derived classes, it expects a list of
offsets or a data source name containing the necessary elements to instantiate a
{@link DatabaseObject} instance which will be considered the current object's parent.

Note that these parameters must also include the {@link ServerObject} parameters.

Derived classes must implement this method.</long-description>
          <tag name="param" line="399" description="&lt;p&gt;Database parameters.&lt;/p&gt;" type="mixed" variable="$theParameter">
            <type>mixed</type>
          </tag>
          <tag name="param" line="399" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="399" description="protected"/>
          <tag name="return" line="399" description="Database instance." type="\OntologyWrapper\DatabaseObject">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theParameter</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OntologyWrapper" line="430" package="Default">
        <name>insertData</name>
        <full_name>\OntologyWrapper\CollectionObject::insertData()</full_name>
        <docblock line="430">
          <description>Insert provided data</description>
          <long-description>This method should be implemented by concrete derived classes, it should commit a
new record in the current collection featuring the provided data and return the
record identifier.

Derived classes must implement this method.</long-description>
          <tag name="param" line="430" description="&lt;p&gt;Data to commit.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theData">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="430" description="&lt;p&gt;Insert options.&lt;/p&gt;" type="array" variable="$theOptions">
            <type>array</type>
          </tag>
          <tag name="access" line="430" description="protected"/>
          <tag name="return" line="430" description="Object identifier." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theData</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theOptions</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/traits/Accessors.php" generated-path="OntologyWrapper.traits.Accessors.html" hash="0ec57826debc962c04818b593c96a3e6" package="Default">
    <docblock line="0">
      <description>Accessors.php</description>
      <long-description>This file contains the definition of the {@link Accessors} trait.</long-description>
    </docblock>
    <source>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</source>
  </file>
  <file path="definitions/Flags.inc.php" generated-path="definitions.Flags.inc.html" hash="a7dfdf338cd0df5e660d535a6fa1ad65" package="Default">
    <docblock line="0">
      <description>Status flags.</description>
      <long-description>This file contains the default status flags used to provide status managemnent to
classes.

These flags are stored in a bitfield property in which the first 31 bits can be used.</long-description>
      <tag name="author" line="0" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
      <tag name="version" line="0" description="1.00 03/05/2009&#10;&#9;&#9;&#9;2.00 23/11/2010&#10;&#9;&#9;&#9;3.00 13/02/2012&#10;&#9;&#9;&#9;4.00 03/09/2012"/>
    </docblock>
    <constant namespace="" line="33" package="Default">
      <name>kFLAG_DEFAULT</name>
      <full_name>\\kFLAG_DEFAULT</full_name>
      <value>0</value>
      <docblock line="33">
        <description>Default state.</description>
        <long-description>This bitfield value represents the default flags state: all flags &lt;tt&gt;OFF&lt;/tt&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="44" package="Default">
      <name>kFLAG_DEFAULT_MASK</name>
      <full_name>\\kFLAG_DEFAULT_MASK</full_name>
      <value>2147483647</value>
      <docblock line="44">
        <description>Status mask.</description>
        <long-description>This bitfield value represents the default flags mask.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="51" package="Default">
      <name>kFLAG_STATE_MASK</name>
      <full_name>\\kFLAG_STATE_MASK</full_name>
      <value>15</value>
      <docblock line="51">
        <description>State mask.</description>
        <long-description>This value masks all the state flags.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="66" package="Default">
      <name>kFLAG_STATE_INITED</name>
      <full_name>\\kFLAG_STATE_INITED</full_name>
      <value>1</value>
      <docblock line="66">
        <description>Initialised.</description>
        <long-description>This bitfield value indicates that the object has been initialised, this means that all
required data members are present.

If this flag is not set, it means that the object lacks required elements, thus it will
not work correctly.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="81" package="Default">
      <name>kFLAG_STATE_DIRTY</name>
      <full_name>\\kFLAG_STATE_DIRTY</full_name>
      <value>2</value>
      <docblock line="81">
        <description>Dirty.</description>
        <long-description>This bitfield value indicates that the object has been modified. In general this state is
only triggered by modifications to object offsets, or persistent properties; run time
members should not affect tjis flag.

In general, methods that modify an object offset value will set this flag and methods
that freeze the state of the object, such as the constructor or when an object is stored
persistently, will reset it.

If the flag is not set, this means that the object has not been modified;</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="92" package="Default">
      <name>kFLAG_STATE_COMMITTED</name>
      <full_name>\\kFLAG_STATE_COMMITTED</full_name>
      <value>4</value>
      <docblock line="92">
        <description>Committed.</description>
        <long-description>This bitfield value indicates that the object has been either loaded from a persistent
container, or that it has been saved to a persistent container.

If the flag is off, this means that the object was not instantiated from a persistent
container, or that it was not yet inserted into a persistent container.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="106" package="Default">
      <name>kFLAG_STATE_ENCODED</name>
      <full_name>\\kFLAG_STATE_ENCODED</full_name>
      <value>8</value>
      <docblock line="106">
        <description>Encoded.</description>
        <long-description>This bitfield value indicates an encoded state. This status is usually associated to
persistent objects that need to be transmitted via the network: an encoded object knows
how to serialise properties that cannot be directly represented in formats used to
transmit data over the internet, such as JSON.

In general, if this flag is set, the object has the knowledge on how to convert its
members before being transmitted and on how to convert the serialised values back to
native state.</long-description>
      </docblock>
    </constant>
    <source>eJzFVlFy2zYQ/bZOgclX69FIlJxOm9h1olpSR6ltzVRKZ/qVgciliIgEVACUot4hd8hh2nt1FwBFyrY8bTNO+ENpiV0s3nvY3YtX62zdanVPf3yap8VOTx58Tg++jHO+NB0h4w6mc2TNXe+nSfi022IIh9t6ZrktDUtdcmgg2zwTaBE5sFhJy4U0zGbAEkh5mVtmGi6sNJAwq9haq41IoPpYcMmXUEiQFr9iUBbn3Bio9mDzDAyEGFyTn9IYSUjG2ULYVECeUNA1aLsj8zYTcebySIU2lp31aJ1hMZdsAS6PKv/XvLSZ0icnNyJfKTbosL8/rVQq/vrILoqOoZ/x63gpuO4ovbx0LhvQRih50utEEYvOutF33X4UvQjs9MnaP+v2emjtRcF6RtYeru2TtR+sz6sILypr94nFNxyNB2+v5+y3wfXb0ewLKykIiQ0b6oCaZVTSns4Nz0tgGtYauZf2UFVeCs77JeN5HgwX1l5Ox+OLLr47Dkt0EBK+Yc9W4+vBz+/C4Z+16aTRhyg87NvzL4T6zWD2y9cCfVbdNrP635BXzseQfUcHdPBGH74f+yegu88B7qfgdyazcXTSxo7dutbc23E2H8xH9X41neOnp3P605vR1Zy5FL4SmxMprOC5qEvZg2wKmYgYgSQyuXXAqsV7iC3LOC4GkLhkH6mNCzBGAVwGB2SDQmv4oxRUcxNuOX4vFlgCXS0OYqlymKQ+BPHG8C0V3nKwbSZsM2wjj5zHyPp+A8ihIPFRKqhWdNsKnwOF2iq9wkajNXrmu0d0MbmdzEfDoMQgjF5TiUOBveIzkStUItAl6SAbbAkSNM/98b14haHgSuY7ZrVYLoEOuNgFPwyOTcRQQwyBVZoiVnh0pdmaeoyx1BNDZxNgzpkuJbOiAApc0WAyVWLahA9PUwpk3wcK9rTs82ujGza8JBzLpbJj2BcPcggYEPREX4NTLpMqAgV2QVIN8Cc0bq1KG3i1mSmxG3NfT3BKMFaXMbZwOuY2Qxzr3R101Nwpdg1Bvmv7XEhsuOpQbnBfbXdlfIc9WnfA4PlxJQ0nv85/PxRSvymkK1UUwtrPvoYg0KpZrniCKkm1KnC6qSFwY5GfsEA7hbhIohHB8I2fr5p+tdMRzJDwR/HaBrxwsrNcYqWw/y29yn8HLgYK2Y1uj6Z5hIqr6c3NZB7u9Z6N5002RjJWyb/lAnUHfn2YRPz6MJYKGlhLLIB4PYxRsT+5H1AbiXuYAm4SPAM4ZFqNaHplsI3gDlIJlirYy+bOAeaVVFt3ozK1pQgIlC/Kjevv98Ah1uuXJcLXwbpn+6k4Vbrgdj9vu3sasvEFXOEE6xJCHkBLaNzRN7Pp7UNVQ9wp7OGaHeiY/tI5ckiW+EFWZ0FucUNSg2nWrQVgooAvIZcHcFGNue/tykuFSiATg2D7CGeUWFA3UA+VR1Q0ur2aDu/2hh+ciFqvLlv/AOONFwE=</source>
  </file>
  <file path="OntologyWrapper/traits/DataType.php" generated-path="OntologyWrapper.traits.DataType.html" hash="f1f623895179c7643ca47fbc499fadc7" package="Default">
    <docblock line="0">
      <description>DataType.php</description>
      <long-description>This file contains the definition of the {@link DataType} trait.</long-description>
    </docblock>
    <source>eJzFVsFu2zgQPVNfMYceEsMrJUVPiePGTZyiQFoXsbOLBQoUtDSyiVCkIFF2giKf0H/Yj9n+V4ekLMmO056CGj5QQ/LNvJl5Iw3e5ss8CKJeL4AeXHLDZw85htYIzjRbihJSIRFirQwXqgSzREgwFUoYoRXo1Fm+nUuh7hqIRzAFFyYkjCgIFM+wzHmMMFFGS714+KfgeY7FF3eqPLUhnL3MjyJge3+97k6X+jNHnlx+mXhtvnbq4XPZrYgzgMhyiRkqUwKHDM1SJ5DqAjKu+EKohS8VgYCxKDpNSzR9C1JX6242ev/1cjQbfZ39+3n8GBI4boC4lHrtq+3wnKNNtYVKxEokFZeAmxB0apHtLqoqw4IbTIAchj5wds4rAi4Y+yjknYZRCD/+u9Op+P87DLKwtMv4PF4IXoS6WAzdlRUWJTUZOw6PjuD4TXT0Onp9dPzGdZXPwSZHwbeAsT/cRp9v311/uIDJ1dV0PIPRxcV4Op3cwIdPs/HN1ehi/Ie7KmAQsBdJECH3Ggnto8VegpflxKxUCB0+uh5tu90a3YbTS93TMVcwR6hK6kyjgSdJHwo0hcAVAlcJzTWJZqu9W/m0Xe1wV1xWWJ5aHK+PPa0P3CpzvdQS+9Zrd1LuaM9heoWGndgbOeJ9jrHxeky11aYVeM4LGq2GVHLSXBpUcugKMpBiOJgPX9GVv22wg2g+PPH5aO4R/bzA0gl4J35HENb05yR8ox0m81zDXQeT3N4iqe51IhJyIFKB3oneHHZBszZij2jM8NPt9fUgosUJ3KCpCrU3uD6IFGgG4L0oTdkHGn1bl8Nt0KvR9XRco176Qv8etYshhpouFINIEMJIPYB7rBOVIXcvR246OXNNsM+JR2V5oanPyCg8Q6rFSuiqk7uwTlG0VVXi8GqBZiKThg+dzYSiDK9tCKbtnLWQ0nY5ZfHZfM9ubsdP8+2JEe050msFLW+bmDV1NQlGGdKHfIBMJ7a0yS+yvQ+Tp8an8reQLfl2tSuPDklA4cqyv7a7PWKL3cZFcThkpQ2p2sTLOgZnPHdFgZLmhVrYudYoq/6AcHMi7J7NxD0mbHO2EQljzXLr+FzTpODKnffltUtbHKBH0LKm0YmJxzGW1C/VXIrYm+o0NL4JxtJWuH5yu0TcGUTtHs2rsh5tU4rFjaaDQ7sXBcz7g7RSsfsK3Az/A2iS0octznAGNulk9czo2bUIEKR9d9dR0x1R/jXc9RtYItuR9p3twJfj8Fm/rcPDU/86iiI4O6MuCtgj0Lr59HMvyMDZtr8taCd4Owx+AlBmJIs=</source>
  </file>
  <file path="definitions/Tokens.inc.php" generated-path="definitions.Tokens.inc.html" hash="df8fd325b89b89f0999fddeb76fda927" package="Default">
    <docblock line="0">
      <description>Tokens.</description>
      <long-description>This file contains the common tokens used in this library.</long-description>
      <tag name="author" line="0" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
      <tag name="version" line="0" description="1.00 07/02/2014"/>
    </docblock>
    <constant namespace="" line="27" package="Default">
      <name>kTOKEN_DOMAIN_SEPARATOR</name>
      <full_name>\\kTOKEN_DOMAIN_SEPARATOR</full_name>
      <value>'://'</value>
      <docblock line="27">
        <description>Domain separator token.</description>
        <long-description>This value defines the token that separates the object domain from other elements.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="34" package="Default">
      <name>kTOKEN_CLASS_SEPARATOR</name>
      <full_name>\\kTOKEN_CLASS_SEPARATOR</full_name>
      <value>'::'</value>
      <docblock line="34">
        <description>Class separator token.</description>
        <long-description>This value defines the token that separates the object class from other elements.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="41" package="Default">
      <name>kTOKEN_NAMESPACE_SEPARATOR</name>
      <full_name>\\kTOKEN_NAMESPACE_SEPARATOR</full_name>
      <value>':'</value>
      <docblock line="41">
        <description>Namespace separator token.</description>
        <long-description>This value defines the token used to separate namespaces from codes.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="48" package="Default">
      <name>kTOKEN_OFFSET_SEPARATOR</name>
      <full_name>\\kTOKEN_OFFSET_SEPARATOR</full_name>
      <value>'.'</value>
      <docblock line="48">
        <description>Sub-offset separator token.</description>
        <long-description>This value defines the token used to indicate sub-offsets.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="55" package="Default">
      <name>kTOKEN_INDEX_SEPARATOR</name>
      <full_name>\\kTOKEN_INDEX_SEPARATOR</full_name>
      <value>'/'</value>
      <docblock line="55">
        <description>Index separator token.</description>
        <long-description>This value defines the token used to separate index elements.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="63" package="Default">
      <name>kTOKEN_INDEX_OPEN_TAG</name>
      <full_name>\\kTOKEN_INDEX_OPEN_TAG</full_name>
      <value>'{'</value>
      <docblock line="63">
        <description>Namespace opening token.</description>
        <long-description>This token is used to enclose namespaces or parent identification when merged with other
identification sections, this value is used as a prefix.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="71" package="Default">
      <name>kTOKEN_INDEX_CLOSE_TAG</name>
      <full_name>\\kTOKEN_INDEX_CLOSE_TAG</full_name>
      <value>'}'</value>
      <docblock line="71">
        <description>Namespace closing token.</description>
        <long-description>This token is used to enclose namespaces or parent identification when merged with other
identification sections, this value is used as a postfix.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="78" package="Default">
      <name>kTOKEN_END_TAG</name>
      <full_name>\\kTOKEN_END_TAG</full_name>
      <value>';'</value>
      <docblock line="78">
        <description>Identification end token.</description>
        <long-description>This token should close all identification strings.</long-description>
      </docblock>
    </constant>
    <source>eJzNlNFumzAUhq/hKY560y3qcFpNmtR2bVFCp2gNRCUXu6scMMEL2Mh22k7THmHvsIfZ3mvGhCikkE1bM40LsPE5x9//+8D5ZZEWto16b/dz2dCzWq9eY2XKF4RJh7LI0TwdQdvp+yHuIRu0H+UGsMLSQzNLqYSEZgQizhSmTIJKy0mecwbKxMJSkhionpbBGZ0JLD6tClhXeKlSLixrTLMFB9eBH98WPKHfv8J57shyGF1Fc4qFw8X8wqTcEyEpZ9ax0+9D/w3qn6CT/vFrvYb2fGzT4L3nh//c/Nr7Ic+1xSBJgQVWXFQGN87iHmdLAjFJKCPVWZgYPcKqTlwt8NlHEimIq6KJ4Dlw/V4AyUhOmDKHjOyq1gs4WBj1d8Ng7I78u9CbuLfuNLg9OLKsw1OEDuHlmTYCoU7MWsYgw1I+s4rI1PxtEYMbNwy3NZyuJJQaOhhrCT7OiSxwRP5IhvkgFF8rAVaXW0mIeEw6yH137IUTd+A16A832XfA1fzhcvaKJ4kk6q8EUBbTqBQg1/U6sIPr69CbbjnubEAHHTQ18YjF5PF53Kam1O4GGflD78MWLtrA7cB52h+8IIyyeQtvRUflGpCwKOOy0Q26st5BYwKN9Z0mpd363wcPqc7NiZjr1Aeq0qrry9pbgVJ/Hfopj6rfb2VSvSmWgKEQWvvjLhuCiR5O3XfGhc/tnaawUKDwvM2DUtZ/7gGX6hcmDG6C0Fu78KXVBcLipgejJohZ7zBBpnyZxVDJx1n2RIQS2sOOdvX8YY2m4c42G7WFwBDalxf2T2erlJI=</source>
  </file>
  <file path="OntologyWrapper/traits/Status.php" generated-path="OntologyWrapper.traits.Status.html" hash="925d76fac71709803337d8557f935802" package="Default">
    <docblock line="0">
      <description>Status.php</description>
      <long-description>This file contains the definition of the {@link Status} trait.</long-description>
    </docblock>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/MongoCollection.php" generated-path="OntologyWrapper.MongoCollection.html" hash="799e1de8173c33b312abe35c239fa8cd" package="Default">
    <docblock line="0">
      <description>MongoCollection.php</description>
      <long-description>This file contains the definition of the {@link MongoCollection} class.</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="OntologyWrapper" line="29" package="Default">
      <extends>\OntologyWrapper\CollectionObject</extends>
      <name>MongoCollection</name>
      <full_name>\OntologyWrapper\MongoCollection</full_name>
      <docblock line="29">
        <description>Mongo database</description>
        <long-description>This class is a &lt;i&gt;concrete&lt;/i&gt; implementation of the {@link CollectionObject} wrapping a
{@link MongoDB} class.</long-description>
        <tag name="author" line="29" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="29" description="1.00 07/02/2014"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="54" package="Default">
        <name>drop</name>
        <full_name>\OntologyWrapper\MongoCollection::drop()</full_name>
        <docblock line="54">
          <description>Drop the database</description>
          <long-description>This method will drop the current collection.</long-description>
          <tag name="access" line="54" description="public"/>
          <tag name="throws" line="54" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="91" package="Default">
        <name>isConnected</name>
        <full_name>\OntologyWrapper\MongoCollection::isConnected()</full_name>
        <docblock line="91">
          <description>Check if connection is open</description>
          <long-description>We overload this method to assume the object is connected if the resource is a
{@link MongoDB}.</long-description>
          <tag name="access" line="91" description="public"/>
          <tag name="return" line="91" description="&lt;tt&gt;TRUE&lt;/tt&gt; is open." type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="126" package="Default">
        <name>resolve</name>
        <full_name>\OntologyWrapper\MongoCollection::resolve()</full_name>
        <docblock line="126">
          <description>Resolve an identifier</description>
          <long-description>We first check if the current collection is connected, if that is not the case, we
raise an exception.</long-description>
          <tag name="param" line="126" description="&lt;p&gt;Object identifier.&lt;/p&gt;" type="mixed" variable="$theIdentifier">
            <type>mixed</type>
          </tag>
          <tag name="param" line="126" description="&lt;p&gt;Offset.&lt;/p&gt;" type="mixed" variable="$theOffset">
            <type>mixed</type>
          </tag>
          <tag name="param" line="126" description="&lt;p&gt;Return object if &lt;tt&gt;TRUE&lt;/tt&gt;.&lt;/p&gt;" type="mixed" variable="$asObject">
            <type>mixed</type>
          </tag>
          <tag name="access" line="126" description="public"/>
          <tag name="return" line="126" description="Found object, array, objects count or &lt;tt&gt;NULL&lt;/tt&gt;." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="126" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default>kTAG_NID</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$asObject</name>
          <default>TRUE</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="212" package="Default">
        <name>getAll</name>
        <full_name>\OntologyWrapper\MongoCollection::getAll()</full_name>
        <docblock line="212">
          <description>Return all objects</description>
          <long-description>In this class we return a { @link MongoCursor} object.</long-description>
          <tag name="access" line="212" description="public"/>
          <tag name="return" line="212" description="Selection of all objects of the collection." type="\OntologyWrapper\Iterator">
            <type link="Iterator.html">\OntologyWrapper\Iterator</type>
          </tag>
          <tag name="throws" line="212" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="256" package="Default">
        <name>connectionOpen</name>
        <full_name>\OntologyWrapper\MongoCollection::connectionOpen()</full_name>
        <docblock line="256">
          <description>Open connection</description>
          <long-description>This method will instantiate a {@link \MongoCollection} object and set it in the
{@link Connection()} data member.

This method expects the caller to have checked whether the connection is already
open.

If the operation fails, the method will raise an exception.</long-description>
          <tag name="access" line="256" description="protected"/>
          <tag name="return" line="256" description="The native connection." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="256" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="305" package="Default">
        <name>connectionClose</name>
        <full_name>\OntologyWrapper\MongoCollection::connectionClose()</full_name>
        <docblock line="305">
          <description>Close connection</description>
          <long-description>We overload this method to reset the connection resource.</long-description>
          <tag name="access" line="305" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="332" package="Default">
        <name>newDatabase</name>
        <full_name>\OntologyWrapper\MongoCollection::newDatabase()</full_name>
        <docblock line="332">
          <description>Return a new database instance</description>
          <long-description>We implement the method to return a {@link MongoServer} instance.</long-description>
          <tag name="param" line="332" description="&lt;p&gt;Server parameters.&lt;/p&gt;" type="mixed" variable="$theParameter">
            <type>mixed</type>
          </tag>
          <tag name="param" line="332" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="access" line="332" description="protected"/>
          <tag name="return" line="332" description="Database instance." type="\OntologyWrapper\DatabaseObject">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theParameter</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="379" package="Default">
        <name>insertData</name>
        <full_name>\OntologyWrapper\MongoCollection::insertData()</full_name>
        <docblock line="379">
          <description>Insert provided data</description>
          <long-description>In this class we commit the provided array and return its {@link kTAG_NID} value.</long-description>
          <tag name="param" line="379" description="&lt;p&gt;Data to commit.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theData">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="379" description="&lt;p&gt;Insert options.&lt;/p&gt;" type="array" variable="$theOptions">
            <type>array</type>
          </tag>
          <tag name="access" line="379" description="protected"/>
          <tag name="return" line="379" description="Object identifier." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theData</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theOptions</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="definitions/Tags.inc.php" generated-path="definitions.Tags.inc.html" hash="f53308aca4166e77edf3dbdc2609fded" package="Default">
    <docblock line="0">
      <description>Default attribute tags.</description>
      <long-description>This file contains the default ontology tag definitions, these offsets represent the
default tags used in the objects comprising the ontology and the core objects of this
library.

Each entry is a definitions that holds the &lt;em&gt;global identifier&lt;/em&gt; of the tag.</long-description>
      <tag name="author" line="0" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
      <tag name="version" line="0" description="1.00 13/01/2014"/>
    </docblock>
    <constant namespace="" line="33" package="Default">
      <name>kTAG_NID</name>
      <full_name>\\kTAG_NID</full_name>
      <value>'_id'</value>
      <docblock line="33">
        <description>Native identifier (&lt;code&gt;_id&lt;/code&gt;)</description>
        <long-description>This offset is the &lt;em&gt;primary key&lt;/em&gt; of all persistent objects, it doesn't have a
specific data type and all objects must have it. This attribute is internal and it is not
defined in the ontology.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="42" package="Default">
      <name>kTAG_CLASS</name>
      <full_name>\\kTAG_CLASS</full_name>
      <value>'_class'</value>
      <docblock line="42">
        <description>Class (&lt;code&gt;_class&lt;/code&gt;)</description>
        <long-description>This offset represents the &lt;em&gt;object class name&lt;/em&gt;, this string is used to
instantiate the correct object once loaded from a container. This attribute is internal
and it is not defined in the ontology.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="56" package="Default">
      <name>kTAG_DOMAIN</name>
      <full_name>\\kTAG_DOMAIN</full_name>
      <value>1</value>
      <docblock line="56">
        <description>Domain (&lt;code&gt;:domain&lt;/code&gt;)</description>
        <long-description>This tag represents the &lt;em&gt;domain&lt;/em&gt; of an object, it is an &lt;em&gt;enumerated set&lt;/em&gt; of
&lt;em&gt;term object references&lt;/em&gt; which represent the &lt;em&gt;kind&lt;/em&gt; or &lt;em&gt;nature&lt;/em&gt; of
the object, this type of property is used to &lt;em&gt;disambiguate objects of different
domains within a single collection.&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="65" package="Default">
      <name>kTAG_AUTHORITY</name>
      <full_name>\\kTAG_AUTHORITY</full_name>
      <value>2</value>
      <docblock line="65">
        <description>Authority (&lt;code&gt;:authority&lt;/code&gt;)</description>
        <long-description>This tag is a &lt;em&gt;string&lt;/em&gt; representing the &lt;em&gt;native identifier&lt;/em&gt; of the
&lt;em&gt;entity object&lt;/em&gt; which is responsible for the &lt;em&gt;identification&lt;/em&gt; of an object,
or which is the &lt;em&gt;author of the information&lt;/em&gt; regarding an object.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="74" package="Default">
      <name>kTAG_COLLECTION</name>
      <full_name>\\kTAG_COLLECTION</full_name>
      <value>3</value>
      <docblock line="74">
        <description>Collection (&lt;code&gt;:collection&lt;/code&gt;)</description>
        <long-description>This tag is a &lt;em&gt;string&lt;/em&gt; representing the &lt;em&gt;name&lt;/em&gt; or &lt;em&gt;code&lt;/em&gt; of the
&lt;em&gt;collection&lt;/em&gt; to which an object belongs. It has the same function as the
namespace, except that it is may not be an enumerated set.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="84" package="Default">
      <name>kTAG_NAMESPACE</name>
      <full_name>\\kTAG_NAMESPACE</full_name>
      <value>4</value>
      <docblock line="84">
        <description>Namespace (&lt;code&gt;:namespace&lt;/code&gt;)</description>
        <long-description>This tag is a &lt;em&gt;reference to a term object&lt;/em&gt;, it is a &lt;em&gt;string&lt;/em&gt; representing
the &lt;em&gt;native identifier&lt;/em&gt; of a term. Namespaces are used to &lt;em&gt;disambiguate
homonym local identifiers&lt;/em&gt; in order to come up with a global unique identifier. This
identifier is &lt;em&gt;persistent&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="94" package="Default">
      <name>kTAG_ID_LOCAL</name>
      <full_name>\\kTAG_ID_LOCAL</full_name>
      <value>5</value>
      <docblock line="94">
        <description>Local identifier (&lt;code&gt;:id-local&lt;/code&gt;)</description>
        <long-description>This tag is a &lt;em&gt;string&lt;/em&gt; which represents the &lt;em&gt;local identifier&lt;/em&gt; of an
object. Local identifiers are &lt;em&gt;unique within their namespace&lt;/em&gt; and are
&lt;em&gt;persistent&lt;/em&gt;. In general, the namespace is concatenated to the local identifier to
form the persistent identifier.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="105" package="Default">
      <name>kTAG_ID_PERSISTENT</name>
      <full_name>\\kTAG_ID_PERSISTENT</full_name>
      <value>6</value>
      <docblock line="105">
        <description>Persistent identifier (&lt;code&gt;:id-persistent&lt;/code&gt;)</description>
        <long-description>This tag is a &lt;em&gt;string&lt;/em&gt; which represents the &lt;em&gt;persistent identifier&lt;/em&gt; of an
object. Persistent identifiers are &lt;em&gt;unique across namespaces&lt;/em&gt;, they are
&lt;em&gt;global&lt;/em&gt;, in that they &lt;em&gt;include the namespace&lt;/em&gt; and they are
&lt;em&gt;persistent&lt;/em&gt;. In general, this identifier is the concatenation of the namespace
and the local identifier.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="115" package="Default">
      <name>kTAG_ID_VALID</name>
      <full_name>\\kTAG_ID_VALID</full_name>
      <value>7</value>
      <docblock line="115">
        <description>Valid identifier (&lt;code&gt;:id-valid&lt;/code&gt;)</description>
        <long-description>This tag is a &lt;em&gt;string&lt;/em&gt; which represents the &lt;em&gt;persistent global identifier&lt;/em&gt;
of the object that is &lt;em&gt;considered the valid choice&lt;/em&gt;. This is generally used by
&lt;em&gt;legacy&lt;/em&gt; or &lt;em&gt;obsolete&lt;/em&gt; objects for referring to the &lt;em&gt;valid&lt;/em&gt;,
&lt;em&gt;current&lt;/em&gt; or &lt;em&gt;official&lt;/em&gt; object.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="125" package="Default">
      <name>kTAG_ID_SEQUENCE</name>
      <full_name>\\kTAG_ID_SEQUENCE</full_name>
      <value>8</value>
      <docblock line="125">
        <description>Sequence number (&lt;code&gt;:id-sequence&lt;/code&gt;)</description>
        <long-description>This tag is an &lt;em&gt;integer sequence number&lt;/em&gt; which is &lt;em&gt;automatically assigned&lt;/em&gt;
to objects just before they are &lt;em&gt;committed&lt;/em&gt;. This represents an &lt;em&gt;identifier
unique to the collection&lt;/em&gt; to which the object belongs. This identifier is &lt;em&gt;not
persistent&lt;/em&gt;, in that it depends on the order in which the object was committed.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="135" package="Default">
      <name>kTAG_VERSION</name>
      <full_name>\\kTAG_VERSION</full_name>
      <value>9</value>
      <docblock line="135">
        <description>Version (&lt;code&gt;:version&lt;/code&gt;)</description>
        <long-description>This tag is a &lt;em&gt;string&lt;/em&gt; representing a &lt;em&gt;version&lt;/em&gt; or an &lt;em&gt;iteration&lt;/em&gt;.
It is generally used to identify different versions of an object by &lt;em&gt;disambiguating
duplicate persistent identifiers&lt;/em&gt;, or to provide a &lt;em&gt;time-stamp&lt;/em&gt; to the object
information it identifies.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="147" package="Default">
      <name>kTAG_TAG</name>
      <full_name>\\kTAG_TAG</full_name>
      <value>10</value>
      <docblock line="147">
        <description>Tag (&lt;code&gt;:tag&lt;/code&gt;)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; representing a &lt;em&gt;tag object reference&lt;/em&gt;, it is the
&lt;em&gt;tag native identifier&lt;/em&gt; of the &lt;em&gt;tag object&lt;/em&gt; it references.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="156" package="Default">
      <name>kTAG_TAGS</name>
      <full_name>\\kTAG_TAGS</full_name>
      <value>11</value>
      <docblock line="156">
        <description>Tags (&lt;code&gt;:tags&lt;/code&gt;)</description>
        <long-description>This tag holds a &lt;em&gt;list of strings&lt;/em&gt; representing &lt;em&gt;tag object references&lt;/em&gt;,
these elements are the &lt;em&gt;native identifiers&lt;/em&gt; of the &lt;em&gt;tag objects&lt;/em&gt; they
reference.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="164" package="Default">
      <name>kTAG_TERM</name>
      <full_name>\\kTAG_TERM</full_name>
      <value>12</value>
      <docblock line="164">
        <description>Term (&lt;code&gt;:term&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; representing a &lt;em&gt;term object reference&lt;/em&gt;, it is the
&lt;em&gt;native identifier&lt;/em&gt; of the &lt;em&gt;term object&lt;/em&gt; it references.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="173" package="Default">
      <name>kTAG_TERMS</name>
      <full_name>\\kTAG_TERMS</full_name>
      <value>13</value>
      <docblock line="173">
        <description>Terms (&lt;code&gt;:terms&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;list of strings&lt;/em&gt; representing &lt;em&gt;term object references&lt;/em&gt;,
these elements are the &lt;em&gt;native identifiers&lt;/em&gt; of the &lt;em&gt;term objects&lt;/em&gt; they
reference.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="182" package="Default">
      <name>kTAG_SUBJECT</name>
      <full_name>\\kTAG_SUBJECT</full_name>
      <value>14</value>
      <docblock line="182">
        <description>Relationship subject (&lt;code&gt;:relationship:subject&lt;/code)</description>
        <long-description>This tag holds an &lt;em&gt;integer&lt;/em&gt; representing a &lt;em&gt;node native identifier&lt;/em&gt;, it is
a &lt;em&gt;reference to a node object&lt;/em&gt; through its &lt;em&gt;sequence number&lt;/em&gt;. This tag
describes the &lt;em&gt;origin vertex of a directed graph relationship&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="191" package="Default">
      <name>kTAG_PREDICATE</name>
      <full_name>\\kTAG_PREDICATE</full_name>
      <value>15</value>
      <docblock line="191">
        <description>Relationship predicate (&lt;code&gt;:relationship:predicate&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;term object reference&lt;/em&gt;, it is a &lt;em&gt;string&lt;/em&gt; that represents
the term &lt;em&gt;native identifier&lt;/em&gt;. This tag describes the &lt;em&gt;predicate of a directed
graph relationship&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="200" package="Default">
      <name>kTAG_OBJECT</name>
      <full_name>\\kTAG_OBJECT</full_name>
      <value>16</value>
      <docblock line="200">
        <description>Relationship object (&lt;code&gt;:relationship:object&lt;/code)</description>
        <long-description>This tag holds an &lt;em&gt;integer&lt;/em&gt; representing a &lt;em&gt;node native identifier&lt;/em&gt;, it is
a &lt;em&gt;reference to a node object&lt;/em&gt; through its &lt;em&gt;sequence number&lt;/em&gt;. This tag
describes the &lt;em&gt;destination vertex of a directed graph relationship&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="209" package="Default">
      <name>kTAG_AFFILIATION</name>
      <full_name>\\kTAG_AFFILIATION</full_name>
      <value>17</value>
      <docblock line="209">
        <description>Affiliation (&lt;code&gt;:affiliation&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; representing an &lt;em&gt;entity native identifier&lt;/em&gt;, it is
a &lt;em&gt;reference to the entity object which represents the affiliation of the current
entity object&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="221" package="Default">
      <name>kTAG_CATEGORY</name>
      <full_name>\\kTAG_CATEGORY</full_name>
      <value>18</value>
      <docblock line="221">
        <description>Category (&lt;code&gt;:category&lt;/code)</description>
        <long-description>This tag holds an &lt;em&gt;enumerated set&lt;/em&gt; of &lt;em&gt;term object references&lt;/em&gt; which
represent the &lt;em&gt;different categories to which an object belongs&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="230" package="Default">
      <name>kTAG_DATA_TYPE</name>
      <full_name>\\kTAG_DATA_TYPE</full_name>
      <value>19</value>
      <docblock line="230">
        <description>Data type (&lt;code&gt;:type:data&lt;/code)</description>
        <long-description>This tag holds an &lt;em&gt;enumerated set&lt;/em&gt; of &lt;em&gt;term object references&lt;/em&gt; which
indicate the &lt;em&gt;data type&lt;/em&gt; of a data property. This type corresponds to the
&lt;em&gt;primitive data representation and structure of a data property&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="239" package="Default">
      <name>kTAG_DATA_KIND</name>
      <full_name>\\kTAG_DATA_KIND</full_name>
      <value>20</value>
      <docblock line="239">
        <description>Data kind (&lt;code&gt;:type:kind&lt;/code)</description>
        <long-description>This tag holds an &lt;em&gt;enumerated set&lt;/em&gt; of &lt;em&gt;term object references&lt;/em&gt; which
indicate the &lt;em&gt;cardinality&lt;/em&gt; and &lt;em&gt;requirements&lt;/em&gt; of a data property. This type
corresponds to the &lt;em&gt;attributes of a data property&lt;/em&gt;, &lt;em&gt;not to its type&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="252" package="Default">
      <name>kTAG_NAME</name>
      <full_name>\\kTAG_NAME</full_name>
      <value>21</value>
      <docblock line="252">
        <description>Name (&lt;code&gt;:name&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; representing the &lt;en&gt;name of an object&lt;/em&gt;. This is
generally the way humans refer to the object and it is &lt;em&gt;not related to a specific
language&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="261" package="Default">
      <name>kTAG_LABEL</name>
      <full_name>\\kTAG_LABEL</full_name>
      <value>22</value>
      <docblock line="261">
        <description>Label (&lt;code&gt;:label&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;list of strings&lt;em&gt; representing &lt;en&gt;labels of an object in several
languages&lt;/em&gt;. Each element holds the &lt;em&gt;language&lt;/em&gt; in which the label is expressed
in and the &lt;em&gt;text&lt;/em&gt; of the label.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="271" package="Default">
      <name>kTAG_DEFINITION</name>
      <full_name>\\kTAG_DEFINITION</full_name>
      <value>23</value>
      <docblock line="271">
        <description>Definition (&lt;code&gt;:definition&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;list of texts&lt;em&gt; representing &lt;en&gt;definitions of an object in
several languages&lt;/em&gt;. Each element holds the &lt;em&gt;language&lt;/em&gt; in which the definition
is expressed in and the &lt;em&gt;text&lt;/em&gt; of the definition. &lt;em&gt;A definition should provide
detailed information on an object without reference to the context&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="281" package="Default">
      <name>kTAG_DESCRIPTION</name>
      <full_name>\\kTAG_DESCRIPTION</full_name>
      <value>24</value>
      <docblock line="281">
        <description>Description (&lt;code&gt;:description&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;list of texts&lt;em&gt; representing &lt;en&gt;descriptions of an object in
several languages&lt;/em&gt;. Each element holds the &lt;em&gt;language&lt;/em&gt; in which the description
is expressed in and the &lt;em&gt;text&lt;/em&gt; of the description. &lt;em&gt;A description should add
context related information to the definition of the object&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="289" package="Default">
      <name>kTAG_NOTES</name>
      <full_name>\\kTAG_NOTES</full_name>
      <value>25</value>
      <docblock line="289">
        <description>Notes (&lt;code&gt;:notes&lt;/code)</description>
        <long-description>This tag holds a series of &lt;em&gt;notes&lt;em&gt; or &lt;em&gt;comments&lt;/em&gt; in a single text unrelated
to a specific language.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="302" package="Default">
      <name>kTAG_UNIT_COUNT</name>
      <full_name>\\kTAG_UNIT_COUNT</full_name>
      <value>26</value>
      <docblock line="302">
        <description>Units count (&lt;code&gt;:unit-count&lt;/code)</description>
        <long-description>This tag holds an &lt;em&gt;integer&lt;/em&gt; value representing the &lt;em&gt;number of unit objects
featuring a specific property&lt;/em&gt;. This is generally used to assess &lt;em&gt;tag usage
frequency in unit objects&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="311" package="Default">
      <name>kTAG_ENTITY_COUNT</name>
      <full_name>\\kTAG_ENTITY_COUNT</full_name>
      <value>27</value>
      <docblock line="311">
        <description>Entity count (&lt;code&gt;:entity-count&lt;/code)</description>
        <long-description>This tag holds an &lt;em&gt;integer&lt;/em&gt; value representing the &lt;em&gt;number of entity objects
featuring a specific property&lt;/em&gt;. This is generally used to assess &lt;em&gt;tag usage
frequency in entity objects&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="324" package="Default">
      <name>kTAG_LANGUAGE</name>
      <full_name>\\kTAG_LANGUAGE</full_name>
      <value>28</value>
      <docblock line="324">
        <description>Language (&lt;code&gt;:language&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; which represents a specific &lt;em&gt;language name or
code&lt;/em&gt;, this tag is generally used as an element of a structure for indicating the
element's language.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="332" package="Default">
      <name>kTAG_TEXT</name>
      <full_name>\\kTAG_TEXT</full_name>
      <value>29</value>
      <docblock line="332">
        <description>Text (&lt;code&gt;:text&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; which represents a &lt;em&gt;text&lt;/em&gt;, this tag is generally
used as an element of a structure for indicating the element's text.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="344" package="Default">
      <name>kTAG_CONN_PROTOCOL</name>
      <full_name>\\kTAG_CONN_PROTOCOL</full_name>
      <value>30</value>
      <docblock line="344">
        <description>Connection protocol (&lt;code&gt;:connection:protocol&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; which identifies a specific network connection
&lt;em&gt;protocol&lt;/em&gt; or &lt;em&gt;scheme&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="352" package="Default">
      <name>kTAG_CONN_HOST</name>
      <full_name>\\kTAG_CONN_HOST</full_name>
      <value>31</value>
      <docblock line="352">
        <description>Connection host (&lt;code&gt;:connection:host&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; which identifies a specific network connection
&lt;em&gt;domain name&lt;/em&gt; or &lt;em&gt;internet address&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="360" package="Default">
      <name>kTAG_CONN_PORT</name>
      <full_name>\\kTAG_CONN_PORT</full_name>
      <value>32</value>
      <docblock line="360">
        <description>Connection port (&lt;code&gt;:connection:port&lt;/code)</description>
        <long-description>This tag holds an &lt;em&gt;integer&lt;/em&gt; which identifies a specific network &lt;em&gt;TCP or UDP
port number&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="368" package="Default">
      <name>kTAG_CONN_USER</name>
      <full_name>\\kTAG_CONN_USER</full_name>
      <value>33</value>
      <docblock line="368">
        <description>Connection user code (&lt;code&gt;:connection:user&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; which identifies a specific &lt;em&gt;user code&lt;/em&gt; used to
&lt;em&gt;authenticate with a service&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="376" package="Default">
      <name>kTAG_CONN_PASS</name>
      <full_name>\\kTAG_CONN_PASS</full_name>
      <value>34</value>
      <docblock line="376">
        <description>Connection user password (&lt;code&gt;:connection:password&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; which identifies a specific &lt;em&gt;user password&lt;/em&gt; which
allows to &lt;em&gt;authenticate with a service&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="383" package="Default">
      <name>kTAG_CONN_BASE</name>
      <full_name>\\kTAG_CONN_BASE</full_name>
      <value>35</value>
      <docblock line="383">
        <description>Database name (&lt;code&gt;:connection:database&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; which identifies a specific &lt;em&gt;database&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="391" package="Default">
      <name>kTAG_CONN_COLL</name>
      <full_name>\\kTAG_CONN_COLL</full_name>
      <value>36</value>
      <docblock line="391">
        <description>Collection name (&lt;code&gt;:connection:collection&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;string&lt;/em&gt; which identifies a specific &lt;em&gt;database
collection&lt;/em&gt;.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="400" package="Default">
      <name>kTAG_CONN_OPTS</name>
      <full_name>\\kTAG_CONN_OPTS</full_name>
      <value>37</value>
      <docblock line="400">
        <description>Connection options (&lt;code&gt;:connection:options&lt;/code)</description>
        <long-description>This tag holds a &lt;em&gt;list of key/value pairs&lt;/em&gt; which represent the &lt;em&gt;options for a
network connection&lt;/em&gt;. The key part identifies the option, the value part provides the
option value.</long-description>
      </docblock>
    </constant>
    <constant namespace="" line="411" package="Default">
      <name>kTAG_SEQUENCE_START</name>
      <full_name>\\kTAG_SEQUENCE_START</full_name>
      <value>101</value>
      <docblock line="411">
        <description>Dynamic tag sequence origin</description>
        <long-description>This defines the first dynamically assigned sequence tag number.</long-description>
      </docblock>
    </constant>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/Edge.php" generated-path="OntologyWrapper.Edge.html" hash="7bd99362b8867ec950b593908af2e3f9" package="Default">
    <docblock line="0">
      <description>Edge.php</description>
      <long-description>This file contains the definition of the {@link Edge} class.</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="OntologyWrapper" line="76" package="Default">
      <extends>\OntologyWrapper\PersistentObject</extends>
      <name>Edge</name>
      <full_name>\OntologyWrapper\Edge</full_name>
      <docblock line="76">
        <description>Edge</description>
        <long-description>This class implements a &lt;em&gt;directed graph&lt;/em&gt; by &lt;em&gt;relating a subject vertex&lt;/em&gt;
with an &lt;em&gt;object vertex&lt;/em&gt; through a &lt;em&gt;predicate&lt;/em&gt;, the direction of the
relationship is &lt;em&gt;from the subject to the object&lt;/em&gt;.

The vertices of this relatonship, the subject and object, are {@link Node} instance
references, while the relationship predicate is represented by a {@link Term}
instance reference.

The class features the following default offsets:

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;{@link kTAG_NID}&lt;/tt&gt;: &lt;em&gt;Native identifier&lt;/em&gt;. This required attribute holds
	a &lt;em&gt;string&lt;/em&gt; which represents the &lt;em&gt;combination of the subject, predicate and
	object&lt;/em&gt; of the relationship. This attribute must be managed with its offset,
	although in derived classes it will be set automatically.
&lt;li&gt;&lt;tt&gt;{@link kTAG_SUBJECT}&lt;/tt&gt;: &lt;em&gt;Subject&lt;/em&gt;. This attribute represents the
	&lt;em&gt;origin of the relationship&lt;/em&gt;, it is an &lt;em&gt;integer&lt;/em&gt; value representing
	the &lt;em&gt;reference to a {@link Node} instance&lt;/em&gt;. This attribute must be
	managed with its offset.
&lt;li&gt;&lt;tt&gt;{@link kTAG_PREDICATE}&lt;/tt&gt;: &lt;em&gt;Predicate&lt;/em&gt;. This attribute represents the
	&lt;em&gt;type of relationship&lt;/em&gt;, it is a &lt;em&gt;string&lt;/em&gt; value representing the
	&lt;em&gt;reference to a {@link Term} instance&lt;/em&gt;. This attribute must be managed
	with its offset.
&lt;li&gt;&lt;tt&gt;{@link kTAG_OBJECT}&lt;/tt&gt;: &lt;em&gt;Object&lt;/em&gt;. This attribute represents the
	&lt;em&gt;destination of the relationship&lt;/em&gt;, it is an &lt;em&gt;integer&lt;/em&gt; value
	representing the &lt;em&gt;reference to a {@link Node} instance&lt;/em&gt;. This attribute
	must be managed with its offset.
&lt;/ul&gt;

The {@link __toString()} method will return the value stored in the native identifier,
if set, or the computed native identifier, which is the concatenation of the subject,
predicate and object references separated by the {@link kTOKEN_INDEX_SEPARATOR} token.

Objects of this class feature a primary key which is not persistent: the vertices
referenced in the native identifier are integer sequences which depend on the order these
objects were inserted: this means that both {@link Node} and {@link Edge}
instances must be re-created when exported.

Objects of this class can hold any additional attribute that is considered necessary or
useful to define and share the current node. In this class we define only those
attributes that constitute the core functionality of the object, derived classes will add
attributes specific to the domain in which the object will operate.

The object is considered initialised, {@link isInited()}, if it has at least the subject,
predicate and object references.</long-description>
        <tag name="author" line="76" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="76" description="1.00 11/02/2014"/>
      </docblock>
      <constant namespace="OntologyWrapper" line="86" package="Default">
        <name>kSEQ_NAME</name>
        <full_name>\OntologyWrapper\Edge::kSEQ_NAME</full_name>
        <value>'_edges'</value>
        <docblock line="86">
          <description>Default collection name.</description>
          <long-description>This constant provides the &lt;i&gt;default collection name&lt;/i&gt; in which objects of this
class are stored.</long-description>
          <tag name="var" line="86" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="118" package="Default">
        <name>__construct</name>
        <full_name>\OntologyWrapper\Edge::__construct()</full_name>
        <docblock line="118">
          <description>Instantiate class.</description>
          <long-description>In this class we link the inited status with the presence of the subject, predicate
and object.</long-description>
          <tag name="param" line="118" description="&lt;p&gt;Persistent store.&lt;/p&gt;" type="\OntologyWrapper\ConnectionObject" variable="$theContainer">
            <type link="ConnectionObject.html">\OntologyWrapper\ConnectionObject</type>
          </tag>
          <tag name="param" line="118" description="&lt;p&gt;Object identifier.&lt;/p&gt;" type="mixed" variable="$theIdentifier">
            <type>mixed</type>
          </tag>
          <tag name="access" line="118" description="public"/>
          <tag name="see" line="118" description="kTAG_PREDICATE kTAG_OBJECT" link="\OntologyWrapper\kTAG_SUBJECT"/>
          <tag name="uses" line="118" description="" link="instantiateObject()"/>
          <tag name="uses" line="118" description="" link="isInited()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theContainer</name>
          <default>NULL</default>
          <type>\OntologyWrapper\ConnectionObject</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theIdentifier</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="148" package="Default">
        <name>__toString</name>
        <full_name>\OntologyWrapper\Edge::__toString()</full_name>
        <docblock line="148">
          <description>&lt;h4&gt;Return global identifier&lt;/h4&gt;</description>
          <long-description>The global identifier of the current object is represented by the subject, predicate
and object references separated by the {@link kTOKEN_INDEX_SEPARATOR} token.</long-description>
          <tag name="access" line="148" description="public"/>
          <tag name="return" line="148" description="The global identifier." type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="190" package="Default">
        <name>ResolveDatabase</name>
        <full_name>\OntologyWrapper\Edge::ResolveDatabase()</full_name>
        <docblock line="190">
          <description>Resolve the database</description>
          <long-description>In this class we return the metadata database.</long-description>
          <tag name="param" line="190" description="&lt;p&gt;Wrapper.&lt;/p&gt;" type="\OntologyWrapper\Wrapper" variable="$theWrapper">
            <type link="Wrapper.html">\OntologyWrapper\Wrapper</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;Raise exception if unable.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="param" line="190" description="&lt;tt&gt;TRUE&lt;/tt&gt; open connection." type="boolean" variable="$doOpen">
            <type>boolean</type>
          </tag>
          <tag name="static" line="190" description=""/>
          <tag name="return" line="190" description="Database or &lt;tt&gt;NULL&lt;/tt&gt;." type="\OntologyWrapper\DatabaseObject">
            <type link="DatabaseObject.html">\OntologyWrapper\DatabaseObject</type>
          </tag>
          <tag name="throws" line="190" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theWrapper</name>
          <default></default>
          <type>\OntologyWrapper\Wrapper</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doOpen</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="242" package="Default">
        <name>preCommitIdentify</name>
        <full_name>\OntologyWrapper\Edge::preCommitIdentify()</full_name>
        <docblock line="242">
          <description>Set object identifiers before commit</description>
          <long-description>In this class we set the native identifier, if not yet filled, with the global
identifier generated by the {@link __toString()} method.</long-description>
          <tag name="access" line="242" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="271" package="Default">
        <name>postCommit</name>
        <full_name>\OntologyWrapper\Edge::postCommit()</full_name>
        <docblock line="271">
          <description>Cleanup object after commit</description>
          <long-description>In this class we do nothing... yet.</long-description>
          <tag name="param" line="271" description="&lt;p&gt;Operation code.&lt;/p&gt;" type="\OntologyWrapper\bitfield" variable="$theOperation">
            <type link="bitfield.html">\OntologyWrapper\bitfield</type>
          </tag>
          <tag name="access" line="271" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOperation</name>
          <default>0</default>
          <type>\OntologyWrapper\bitfield</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="300" package="Default">
        <name>isReady</name>
        <full_name>\OntologyWrapper\Edge::isReady()</full_name>
        <docblock line="300">
          <description>Check if object is ready</description>
          <long-description>In this class we ensure the object has the native identifier, {@link kTAG_NID}.</long-description>
          <tag name="access" line="300" description="protected"/>
          <tag name="return" line="300" description="&lt;tt&gt;TRUE&lt;/tt&gt; means ready." type="Boolean">
            <type>Boolean</type>
          </tag>
          <tag name="see" line="300" description="" link="\OntologyWrapper\kTAG_NID"/>
          <tag name="uses" line="300" description="" link="isReady()"/>
          <tag name="uses" line="300" description="" link="isInited()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="338" package="Default">
        <name>preOffsetSet</name>
        <full_name>\OntologyWrapper\Edge::preOffsetSet()</full_name>
        <docblock line="338">
          <description>Handle offset and value before setting it</description>
          <long-description>In this class we cast the value of the relationship vertices into node reference, and
the value of the predicate into a term reference, if provided as objects; we also
ensure the provided objects arer of the correct type.</long-description>
          <tag name="param" line="338" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="338" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="338" description="protected"/>
          <tag name="return" line="338" description="&lt;tt&gt;NULL&lt;/tt&gt; set offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="338" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="see" line="338" description="kTAG_PREDICATE kTAG_OBJECT" link="\OntologyWrapper\kTAG_SUBJECT"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="440" package="Default">
        <name>postOffsetSet</name>
        <full_name>\OntologyWrapper\Edge::postOffsetSet()</full_name>
        <docblock line="440">
          <description>Handle offset and value after setting it</description>
          <long-description>In this class we set the {@link isInited()} status.</long-description>
          <tag name="param" line="440" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="440" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="440" description="protected"/>
          <tag name="see" line="440" description="kTAG_PREDICATE kTAG_OBJECT" link="\OntologyWrapper\kTAG_SUBJECT"/>
          <tag name="uses" line="440" description="" link="isInited()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="474" package="Default">
        <name>postOffsetUnset</name>
        <full_name>\OntologyWrapper\Edge::postOffsetUnset()</full_name>
        <docblock line="474">
          <description>Handle offset after deleting it</description>
          <long-description>In this class we set the {@link isInited()} status.</long-description>
          <tag name="param" line="474" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="474" description="protected"/>
          <tag name="see" line="474" description="kTAG_PREDICATE kTAG_OBJECT" link="\OntologyWrapper\kTAG_SUBJECT"/>
          <tag name="uses" line="474" description="" link="isInited()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="514" package="Default">
        <name>lockedOffsets</name>
        <full_name>\OntologyWrapper\Edge::lockedOffsets()</full_name>
        <docblock line="514">
          <description>Return list of locked offsets</description>
          <long-description>In this class we add the subject, predicate and object offsets.</long-description>
          <tag name="access" line="514" description="protected"/>
          <tag name="return" line="514" description="List of locked offsets." type="array">
            <type>array</type>
          </tag>
          <tag name="see" line="514" description="kTAG_PREDICATE kTAG_OBJECT" link="\OntologyWrapper\kTAG_SUBJECT"/>
        </docblock>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="OntologyWrapper/OntologyObject.php" generated-path="OntologyWrapper.OntologyObject.html" hash="ba5164f3d860f12353be98fd3e5aab3b" package="Default">
    <docblock line="0">
      <description>OntologyObject.php</description>
      <long-description>This file contains the definition of the {@link OntologyObject} class.</long-description>
    </docblock>
    <class final="false" abstract="true" namespace="OntologyWrapper" line="108" package="Default">
      <extends>\OntologyWrapper\ContainerObject</extends>
      <name>OntologyObject</name>
      <full_name>\OntologyWrapper\OntologyObject</full_name>
      <docblock line="108">
        <description>Ontology object</description>
        <long-description>Objects derived from this &lt;i&gt;abstract&lt;/i&gt; class hold two types of data:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Run-time data&lt;/em&gt;, which is stored in the object member properties.
&lt;li&gt;&lt;em&gt;Persistent data&lt;/em&gt;, which is stored in the inherited array part of the object.
&lt;/ul&gt;

The main purpose of this class is to ensure that all persistent data elements are
&lt;i&gt;referenced&lt;/i&gt;, &lt;i&gt;annotated&lt;/i&gt; and &lt;i&gt;documented&lt;/i&gt; in an ontology.

Persistent data is stored as &lt;i&gt;key/value&lt;/i&gt; pair elements of the inherited array, the
key part of the elements we call by convention &lt;em&gt;offset&lt;/em&gt;, these offsets, in this
class, represent a reference to an object of the ontology that holds all the necessary
information to &lt;i&gt;identify&lt;/i&gt;, &lt;i&gt;describe&lt;/i&gt; and &lt;i&gt;validate&lt;/i&gt; the value part of the
array element pairs.

This class implements the bridge between object persistent data and the ontology,
ensuring that all data holds a reference to the ontology, which, itself, is implemented
by objects derived from this same class: this means that the whole system is self
sufficient and self documenting.

Offsets can be uniquely identified in two ways: by native identifier, which is an integer
value which may change across implementations, and a global identifier, which is a sring
that will not change across implementations. This class provides a transparent interface
that allows referring to offsets both by their &lt;i&gt;native&lt;/i&gt; identifier or by their
&lt;i&gt;global&lt;/i&gt; identifier. Offsets, however, &lt;em&gt;will only hold the native
identifier&lt;/em&gt;, which means that all persistent data offsets must be integers. This is
because global identifiers may become large strings, which poses a problem if these are
used as field names for data stored in a persistent container.

Whenever the object is provided an offset, if this is a string, it will be fed to a
protected method, {@link resolveOffset()}, which will check if the string represents the
global identifier of an ontology Tag object, in that case, the method will return the
Tag's native integer identifier which will be used as the data offset. The class
features a public method, {@link InternalOffsets()}, that returns the list of exceptions.

This means that to ensure referential integrity it is advisable to use integer constants
as offsets when available, or string offsets if the integer constant is not known or
available.

The resolution of these offsets is provided by a {@link Dictionary} object which records
all the &lt;em&gt;Tag&lt;/em&gt; objects of the ontology which are the entities that all offsets
reference: persistent data offsets represent these Tag native identifiers, while these
Tag object global identifiers are decoded by the {@link Dictionary} object to retrieve
the corresponding integer native identifier.

The class declares the {@link __toString()} method as virtual, it is essential that all
derived classes implement this method which should return the current object's &lt;em&gt;global
identifier string&lt;/em&gt;. The global identifier of an object can be considered its
signature or unique identifier, although a global identifier not need to be unique; all
objects derived from this class, just as the Tag object described above, must feature a
global identifier, which may or may not coincide with their native identifier.

The class declares a method, {@link reference()}, which returns the current object's
&lt;i&gt;reference&lt;/i&gt;, this will generally be the value of the {@link kTAG_NID} offset. If the
offset is not set, the method will raise an exception. This method will be put to use by
derived classes: when providing an object to an offset expecting an object reference, by
using this method one can be assured the provided object does have a reference.

Finally, the</long-description>
        <tag name="author" line="108" description="Milko A. Škofič" link="mailto:m.skofic@cgiar.org"/>
        <tag name="version" line="108" description="1.00 10/01/2014"/>
      </docblock>
      <property static="false" visibility="protected" line="117" namespace="OntologyWrapper" package="Default">
        <name>$mDictionary</name>
        <default>NULL</default>
        <docblock line="117">
          <description>Dictionary.</description>
          <long-description>This protected data member holds the data dictionary reference.</long-description>
          <tag name="var" line="117" description="" type="\OntologyWrapper\Dictionary" variable="">
            <type link="Dictionary.html">\OntologyWrapper\Dictionary</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="OntologyWrapper" line="143" package="Default">
        <name>__toString</name>
        <full_name>\OntologyWrapper\OntologyObject::__toString()</full_name>
        <docblock line="143">
          <description>&lt;h4&gt;Return global identifier&lt;/h4&gt;</description>
          <long-description>This method should return the current object's global identifier.

All derived concrete classes must implement this method.</long-description>
          <tag name="access" line="143" description="public"/>
          <tag name="return" line="143" description="The global identifier." type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="192" package="Default">
        <name>dictionary</name>
        <full_name>\OntologyWrapper\OntologyObject::dictionary()</full_name>
        <docblock line="192">
          <description>Set or return data dictionary</description>
          <long-description>This method can be used to set or retrieve the object's data dictionary, which is
required by all derived objects to resolve offsets.

You should set this data member as soon as the object has been instantiated, before
adding offsets to it.

The method expects the following parameters:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;$theDictionary&lt;/b&gt;: Data dictionary or operation:
 &lt;ul&gt;
	&lt;li&gt;&lt;tt&gt;NULL&lt;/tt&gt;: Return current dictionary.
	&lt;li&gt;&lt;tt&gt;{@link Dictionary}&lt;/tt&gt;: Set dictionary with provided value.
 &lt;/ul&gt;
&lt;li&gt;&lt;b&gt;$getOld&lt;/b&gt;: This parameter is a boolean which if &lt;tt&gt;TRUE&lt;/tt&gt; will return
	the &lt;i&gt;old&lt;/i&gt; dictionary when replacing, if &lt;tt&gt;FALSE&lt;/tt&gt;, it will return the
	current value.
&lt;/ul&gt;

The method will raise an exception if the dictionary holds any other type except the
above.</long-description>
          <tag name="param" line="192" description="&lt;p&gt;New dictionary or &lt;tt&gt;NULL&lt;/tt&gt;.&lt;/p&gt;" type="mixed" variable="$theDictionary">
            <type>mixed</type>
          </tag>
          <tag name="param" line="192" description="&lt;tt&gt;TRUE&lt;/tt&gt; get old value." type="boolean" variable="$getOld">
            <type>boolean</type>
          </tag>
          <tag name="access" line="192" description="public"/>
          <tag name="return" line="192" description="Object data dictionary." type="\OntologyWrapper\Dictionary">
            <type link="Dictionary.html">\OntologyWrapper\Dictionary</type>
          </tag>
          <tag name="throws" line="192" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theDictionary</name>
          <default>NULL</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$getOld</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OntologyWrapper" line="259" package="Default">
        <name>reference</name>
        <full_name>\OntologyWrapper\OntologyObject::reference()</full_name>
        <docblock line="259">
          <description>Return object reference</description>
          <long-description>This method will return the current object's reference. This value should uniquely
identify the referenced object, making it easy to retrieve the object given this
reference.

In this class, and generally in all classes, the reference of an object is its native
identifier, {@link kTAG_NID}.

The method must raise an exception if the reference cannot be provided.</long-description>
          <tag name="access" line="259" description="public"/>
          <tag name="return" line="259" description="Object reference." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="259" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="299" package="Default">
        <name>InternalOffsets</name>
        <full_name>\OntologyWrapper\OntologyObject::InternalOffsets()</full_name>
        <docblock line="299">
          <description>Return internal offsets</description>
          <long-description>This method will return the current object list of internal offsets, these offsets
are not defined in the data dictionary and are private to the object. This method
is used to exclude these offsets from the default offset resolution workflow.

In this class we return {@link kTAG_NID} and {@link kTAG_CLASS}, which all persistent
objects share.</long-description>
          <tag name="static" line="299" description=""/>
          <tag name="return" line="299" description="List of internal offsets." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OntologyWrapper" line="320" package="Default">
        <name>DefaultOffsets</name>
        <full_name>\OntologyWrapper\OntologyObject::DefaultOffsets()</full_name>
        <docblock line="320">
          <description>Return default offsets</description>
          <long-description>This method will return the current object list of default offsets, these offsets
represent the default offsets of the object, which means that all objects derived
from this class may feature these offsets. This method is used to exclude these
offsets from statistical procedures, such as {@link CollectOffsets()}, since it is
implied that these offsets will be there.

In this class we return an empty array.</long-description>
          <tag name="static" line="320" description=""/>
          <tag name="return" line="320" description="List of default offsets." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="348" package="Default">
        <name>preOffsetExists</name>
        <full_name>\OntologyWrapper\OntologyObject::preOffsetExists()</full_name>
        <docblock line="348">
          <description>Handle offset before checking it</description>
          <long-description>In this class we resolve the offset.</long-description>
          <tag name="param" line="348" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="348" description="protected"/>
          <tag name="return" line="348" description="&lt;tt&gt;NULL&lt;/tt&gt; check offset, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="348" description="" link="resolveOffset()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="378" package="Default">
        <name>preOffsetGet</name>
        <full_name>\OntologyWrapper\OntologyObject::preOffsetGet()</full_name>
        <docblock line="378">
          <description>Handle offset before getting it</description>
          <long-description>In this class we resolve the offset.</long-description>
          <tag name="param" line="378" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="378" description="protected"/>
          <tag name="return" line="378" description="&lt;tt&gt;NULL&lt;/tt&gt; get offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="378" description="" link="resolveOffset()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="409" package="Default">
        <name>preOffsetSet</name>
        <full_name>\OntologyWrapper\OntologyObject::preOffsetSet()</full_name>
        <docblock line="409">
          <description>Handle offset and value before setting it</description>
          <long-description>In this class we resolve the offset.</long-description>
          <tag name="param" line="409" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="409" description="&lt;p&gt;Offset value reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="409" description="protected"/>
          <tag name="return" line="409" description="&lt;tt&gt;NULL&lt;/tt&gt; set offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="409" description="" link="resolveOffset()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="439" package="Default">
        <name>preOffsetUnset</name>
        <full_name>\OntologyWrapper\OntologyObject::preOffsetUnset()</full_name>
        <docblock line="439">
          <description>Handle offset and value before deleting it</description>
          <long-description>In this class we resolve the offset.</long-description>
          <tag name="param" line="439" description="&lt;p&gt;Offset reference.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffset">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="439" description="protected"/>
          <tag name="return" line="439" description="&lt;tt&gt;NULL&lt;/tt&gt; delete offset value, other, return." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="439" description="" link="resolveOffset()"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theOffset</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="495" package="Default">
        <name>resolveOffset</name>
        <full_name>\OntologyWrapper\OntologyObject::resolveOffset()</full_name>
        <docblock line="495">
          <description>Resolve offset</description>
          <long-description>This method will resolve the provided offset into a {@link Tag} native
identifier, this is done by using a {@link Dictionary} object stored in the current
object's {@link $mDictionary} data member.

If you provide an integer or a numeric string, the method will simply cast the value
to an integer and return it.

All other types of offsets, except those returned by the {@link InternalOffsets()}
method, will be used to locate the tag native identifier using a {@link Dictionary}
object stored in the current object's {@link $mDictionary} data member; if the
provided offset cannot be resolved, the method will raise an exception if the second
parameter is &lt;tt&gt;TRUE&lt;/tt&gt;, or &lt;tt&gt;NULL&lt;/tt&gt; if the second parameter is
&lt;tt&gt;FALSE&lt;/tt&gt;.

The method will raise an exception if the tag cache is not set.</long-description>
          <tag name="param" line="495" description="&lt;p&gt;Data offset.&lt;/p&gt;" type="mixed" variable="$theOffset">
            <type>mixed</type>
          </tag>
          <tag name="param" line="495" description="&lt;p&gt;Assert offset tag reference.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="access" line="495" description="protected"/>
          <tag name="return" line="495" description="Resolved offset." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="495" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="495" description="" link="InternalOffsets()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="569" package="Default">
        <name>resolveOffsetType</name>
        <full_name>\OntologyWrapper\OntologyObject::resolveOffsetType()</full_name>
        <docblock line="569">
          <description>Resolve type</description>
          <long-description>This method will resolve the provided offset into a {@link Tag} object and return in
the provided reference parameters the data type and kind corresaponding to the
provided offset; this is done by using a {@link Dictionary} object stored in the
current object's {@link $mDictionary} data member.

This method expects the following parameters:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;$theOffset&lt;/b&gt;: This is the data property offset, it should represent the
	tag sequence number; if it holds an internal offset, the method will return
	&lt;tt&gt;NULL&lt;/tt&gt;, regardless of the last parameter.
&lt;li&gt;&lt;b&gt;$theType&lt;/b&gt;: This parameter will receive the data type of the referenced
	tag, if the tag could not be resolved, the parameter will hold an empty array.
&lt;li&gt;&lt;b&gt;$theKind&lt;/b&gt;: This parameter will receive the data kind of the referenced
	tag, if the tag could not be resolved, or if the tag has no data kind, the
	parameter will hold an empty array.
&lt;li&gt;&lt;b&gt;$doAssert&lt;/b&gt;: If &lt;tt&gt;TRUE&lt;/tt&gt; and the tag could not be resolved, the method
	will raise an exception; if the offset is an internal offset this setting has
	no effect: the method will return &lt;tt&gt;NULL&lt;/tt&gt; and it will not set any type or
	kind.
&lt;/ul&gt;

The method will raise an exception if the provided offset is not an integer, a
numeric string or part of the internal offsets.

The method will return &lt;tt&gt;TRUE&lt;/tt&gt; if the tag was resolved; &lt;tt&gt;FALSE&lt;/tt&gt; if the
tag was not resolved and &lt;tt&gt;NULL&lt;/tt&gt; if the offset is internal.</long-description>
          <tag name="param" line="569" description="&lt;p&gt;Tag sequence number.&lt;/p&gt;" type="int" variable="$theOffset">
            <type>int</type>
          </tag>
          <tag name="param" line="569" description="&lt;p&gt;Receives data type.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theType">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="569" description="&lt;p&gt;Receives data kind.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theKind">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="569" description="&lt;p&gt;Assert offset tag reference.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="access" line="569" description="protected"/>
          <tag name="return" line="569" description="&lt;tt&gt;TRUE&lt;/tt&gt;, &lt;tt&gt;FALSE&lt;/tt&gt; or &lt;tt&gt;NULL&lt;/tt&gt;." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="569" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
          <tag name="uses" line="569" description="" link="InternalOffsets()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>int</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theType</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theKind</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="667" package="Default">
        <name>castOffsetValue</name>
        <full_name>\OntologyWrapper\OntologyObject::castOffsetValue()</full_name>
        <docblock line="667">
          <description>Cast offset</description>
          <long-description>This method can be used to cast a value to the data type of its referred Tag.

The method will first resolve the offset into a Tag and then it will use the Tag's
data type to cast the value.

The value will be cast only if the Tag has &lt;em&gt;one&lt;/em&gt; data type, if the provided
value is an array, the method will cast each element to that data type.

If the method is unable to resolve the offset and the assert flag parameter is set,
the method will raise an exception.

This method will handle in-line the data types of a series of default tags, this is
necessary when loading the default ontology for the first time: since there are no
tags in the system yet, any attempt to resolve these tags would fail; if you plan on
changing the data type of default tags, you should edit this method accordingly.</long-description>
          <tag name="param" line="667" description="&lt;p&gt;Value to cast.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theValue">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="667" description="&lt;p&gt;Data offset.&lt;/p&gt;" type="mixed" variable="$theOffset">
            <type>mixed</type>
          </tag>
          <tag name="param" line="667" description="&lt;p&gt;Assert offset tag reference.&lt;/p&gt;" type="boolean" variable="$doAssert">
            <type>boolean</type>
          </tag>
          <tag name="access" line="667" description="protected"/>
          <tag name="throws" line="667" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$theValue</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$doAssert</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1097" package="Default">
        <name>traverse</name>
        <full_name>\OntologyWrapper\OntologyObject::traverse()</full_name>
        <docblock line="1097">
          <description>Traverse object</description>
          <long-description>This method will traverse the object's offsets and perform a series of actions:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Collect offsets&lt;/em&gt;: The method will collect all the offsets used in the
	object returning their enumerated set. The returned array will have the tag
	sequence number as key and the list of offsets using that tag as value.
&lt;li&gt;&lt;em&gt;Verify offsets&lt;/em&gt;: The method will verify all the traversed elements.
&lt;li&gt;&lt;em&gt;Cast offsets&lt;/em&gt;: The method will cast the value of all offsets which have
	a single data type.
&lt;/ul&gt;

Derived classes can overload the two methods that respectively verify and cast the
offsets, {@link traverseVerifyStructure()} and {@link traverseCastValue()}.</long-description>
          <tag name="access" line="1097" description="protected"/>
          <tag name="return" line="1097" description="Object offsets." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1158" package="Default">
        <name>traverseOffsets</name>
        <full_name>\OntologyWrapper\OntologyObject::traverseOffsets()</full_name>
        <docblock line="1158">
          <description>Handle offset value</description>
          <long-description>This method will be called for each offset of the current object structure, its duty
is to:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Collect offset paths&lt;/em&gt;. The method will fill the &lt;em&gt;$theOffsets&lt;/em&gt;
	parameter with the list of tags and offsets used in the object, this array will
	be structured as follows:
 &lt;ul&gt;
	&lt;li&gt;&lt;tt&gt;key&lt;/tt&gt;: The tag serial number.
	&lt;li&gt;&lt;tt&gt;value&lt;/tt&gt;: The list of object offsets in which the tag is used.
 &lt;/ul&gt;
&lt;li&gt;&lt;em&gt;Verify offset values&lt;/em&gt;. The method will verify if the offset value
	contains the correct structure and will cast the value to the correct type.
&lt;/ul&gt;

The method expects the following parameters:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;$theIterator&lt;/b&gt;: This parameter is the iterator pointing to the current
	traversal element.
&lt;li&gt;&lt;b&gt;$theOffsets&lt;/b&gt;: This reference parameter will receive the offsets list.
&lt;li&gt;&lt;b&gt;$thePath&lt;/b&gt;: This reference parameter will receive the current offset path.
&lt;/ul&gt;</long-description>
          <tag name="param" line="1158" description="&lt;p&gt;Iterator.&lt;/p&gt;" type="\OntologyWrapper\Iterator" variable="$theIterator">
            <type link="Iterator.html">\OntologyWrapper\Iterator</type>
          </tag>
          <tag name="param" line="1158" description="&lt;p&gt;Receives the offsets list.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffsets">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1158" description="&lt;p&gt;Receives the current path.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$thePath">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="1158" description="protected"/>
          <tag name="return" line="1158" description="&lt;tt&gt;TRUE&lt;/tt&gt;, or &lt;tt&gt;FALSE&lt;/tt&gt; to stop the traversal." type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="1158" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIterator</name>
          <default></default>
          <type>\OntologyWrapper\Iterator</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theOffsets</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$thePath</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1317" package="Default">
        <name>traverseCollectOffset</name>
        <full_name>\OntologyWrapper\OntologyObject::traverseCollectOffset()</full_name>
        <docblock line="1317">
          <description>Collect offsets</description>
          <long-description>This method will be called for each offset of the current object structure, its duty
is to collect the list of offsets and tag references.

The method expects the following parameters:

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;$theIterator&lt;/b&gt;: This parameter is the iterator pointing to the current
	traversal element, this element must be an offset and not an offset sub-element.
&lt;li&gt;&lt;b&gt;$theOffsets&lt;/b&gt;: This reference parameter will receive the offsets list, it
	is an array of elements structured as follows:
 &lt;ul&gt;
	&lt;li&gt;&lt;tt&gt;key&lt;/tt&gt;: The tag serial number.
	&lt;li&gt;&lt;tt&gt;value&lt;/tt&gt;: The list of object offsets in which the tag is used.
 &lt;/ul&gt;
&lt;li&gt;&lt;b&gt;$thePath&lt;/b&gt;: This reference parameter will receive the current offset path.
&lt;li&gt;&lt;b&gt;$theType&lt;/b&gt;: This parameter will receive the data type of the referenced
	tag, if the tag could not be resolved, the parameter will hold an empty array.
&lt;li&gt;&lt;b&gt;$theKind&lt;/b&gt;: This parameter will receive the data kind of the referenced
	tag, if the tag could not be resolved, or if the tag has no data kind, the
	parameter will hold an empty array.
&lt;/ul&gt;

The method will return the current offset.</long-description>
          <tag name="param" line="1317" description="&lt;p&gt;Iterator.&lt;/p&gt;" type="\OntologyWrapper\Iterator" variable="$theIterator">
            <type link="Iterator.html">\OntologyWrapper\Iterator</type>
          </tag>
          <tag name="param" line="1317" description="&lt;p&gt;Receives the offsets list.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theOffsets">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1317" description="&lt;p&gt;Receives the current path.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$thePath">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1317" description="&lt;p&gt;Receives data type.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theType">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1317" description="&lt;p&gt;Receives data kind.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theKind">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="access" line="1317" description="protected"/>
          <tag name="return" line="1317" description="Current offset." type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="1317" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIterator</name>
          <default></default>
          <type>\OntologyWrapper\Iterator</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theOffsets</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$thePath</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theType</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theKind</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1385" package="Default">
        <name>traverseVerifyStructure</name>
        <full_name>\OntologyWrapper\OntologyObject::traverseVerifyStructure()</full_name>
        <docblock line="1385">
          <description>Verify offset</description>
          <long-description>This method should verify that the current element of the provided iterator has the
correct structure and content.

In this class we verify whether lists, structures and structured types are indeed
arrays and raise an exception if that is not the case. Note that we only check
structured data types if the offset has a single data type.

The method will return &lt;tt&gt;TRUE&lt;/tt&gt; if the offset value is either a structure or a
list, and &lt;tt&gt;FALSE&lt;/tt&gt; if the offset value is a scalar data type; in derived
classes you can call the parent method and perform custom checks if the parent method
returned &lt;tt&gt;FALSE&lt;/tt&gt;.</long-description>
          <tag name="param" line="1385" description="&lt;p&gt;Iterator.&lt;/p&gt;" type="\OntologyWrapper\Iterator" variable="$theIterator">
            <type link="Iterator.html">\OntologyWrapper\Iterator</type>
          </tag>
          <tag name="param" line="1385" description="&lt;p&gt;Data type.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theType">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1385" description="&lt;p&gt;Data kind.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theKind">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1385" description="&lt;p&gt;Current offset.&lt;/p&gt;" type="string" variable="$theOffset">
            <type>string</type>
          </tag>
          <tag name="access" line="1385" description="protected"/>
          <tag name="return" line="1385" description="&lt;tt&gt;TRUE&lt;/tt&gt; if structure or list." type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="1385" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIterator</name>
          <default></default>
          <type>\OntologyWrapper\Iterator</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theType</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theKind</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1458" package="Default">
        <name>traverseVerifyValue</name>
        <full_name>\OntologyWrapper\OntologyObject::traverseVerifyValue()</full_name>
        <docblock line="1458">
          <description>Verify offset value</description>
          <long-description>This method should verify the current offset value, this method is called by the
{@link traverseVerifyStructure()} method if the current offset is not a structure or a list.

In this class we assert that structured types are arrays if there is only one offset
type.

The method will return &lt;tt&gt;NULL&lt;/tt&gt; if the offset has more than one type,
&lt;tt&gt;TRUE&lt;/tt&gt; if the value type was verified and &lt;tt&gt;FALSE&lt;/tt&gt; if it was not
verified.</long-description>
          <tag name="param" line="1458" description="&lt;p&gt;Iterator.&lt;/p&gt;" type="\OntologyWrapper\Iterator" variable="$theIterator">
            <type link="Iterator.html">\OntologyWrapper\Iterator</type>
          </tag>
          <tag name="param" line="1458" description="&lt;p&gt;Data type.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theType">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1458" description="&lt;p&gt;Data kind.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theKind">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1458" description="&lt;p&gt;Current offset.&lt;/p&gt;" type="string" variable="$theOffset">
            <type>string</type>
          </tag>
          <tag name="access" line="1458" description="protected"/>
          <tag name="return" line="1458" description="&lt;tt&gt;NULL&lt;/tt&gt;, &lt;tt&gt;TRUE&lt;/tt&gt; or &lt;tt&gt;FALSE&lt;/tt&gt;." type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="1458" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIterator</name>
          <default></default>
          <type>\OntologyWrapper\Iterator</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theType</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theKind</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OntologyWrapper" line="1517" package="Default">
        <name>traverseCastValue</name>
        <full_name>\OntologyWrapper\OntologyObject::traverseCastValue()</full_name>
        <docblock line="1517">
          <description>Cast offset</description>
          <long-description>This method should cast the current element of the provided iterator to the correct
data type. This method can also be used to verify structured type elements.

The method will return &lt;tt&gt;TRUE&lt;/tt&gt; if the value was cast, &lt;tt&gt;FALSE&lt;/tt&gt; if not and
&lt;tt&gt;NULL&lt;/tt&gt; if the offset has more than one data type.</long-description>
          <tag name="param" line="1517" description="&lt;p&gt;Iterator.&lt;/p&gt;" type="\OntologyWrapper\Iterator" variable="$theIterator">
            <type link="Iterator.html">\OntologyWrapper\Iterator</type>
          </tag>
          <tag name="param" line="1517" description="&lt;p&gt;Data type.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theType">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1517" description="&lt;p&gt;Data kind.&lt;/p&gt;" type="\OntologyWrapper\reference" variable="$theKind">
            <type link="reference.html">\OntologyWrapper\reference</type>
          </tag>
          <tag name="param" line="1517" description="&lt;p&gt;Current offset.&lt;/p&gt;" type="string" variable="$theOffset">
            <type>string</type>
          </tag>
          <tag name="access" line="1517" description="protected"/>
          <tag name="return" line="1517" description="&lt;tt&gt;TRUE&lt;/tt&gt; value was cast." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="1517" description="" type="\OntologyWrapper\Exception">
            <type link="Exception.html">\OntologyWrapper\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$theIterator</name>
          <default></default>
          <type>\OntologyWrapper\Iterator</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theType</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$theKind</name>
          <default></default>
          <type>\OntologyWrapper\reference</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$theOffset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <source></source>
  </file>
  <file path="OntologyWrapper/traits/DataKind.php" generated-path="OntologyWrapper.traits.DataKind.html" hash="e56e0dd01882f78d3216ae5d1c0d1c6c" package="Default">
    <docblock line="0">
      <description>DataKind.php</description>
      <long-description>This file contains the definition of the {@link DataKind} trait.</long-description>
    </docblock>
    <source>eJzFVs1u2zgQPlNPMYceEsMrJUVPiePGTZwiaBoXsbN7KVDQ0sgmLJGCRNkJijxC32EfZvteOyRl/ThOewpq+EANyW/+vm+kwftsmXle0Ot50INLrvknISPfGMGaZktRQCwShFBJzYUsQC8RIoyFFFooCSq2lu/niZCrGuIJdM6F9gkj8DzJUywyHiJMpFaJWjz+k/Msw/yrPVWcmhDOXudHEbC9v157p536C0eeXX6deE29dvrhatnuiDWASLMEU5S6AA4p6qWKIFY5pFzyhZAL1yoCgZVBUXFcoO4bkKpbq9no47fL0Wz07dP17eWTT+C4BeJJojau2xbPOtp2m+DEWkQlTwC3IajYIJtdlGWKOdcYATn0XeDsnJcEnDP2WSQrBSMffv67UrH47wcMUr8wy/A8XAie+ypfDO2VNeYFkYwd+0dHcPwuOHobvD06fmdZ5WqwrZH33WPsD9Poy/2Hm+sLmFxdTcczGF1cjKfTyR1c387Gd1eji/EfZpXHwGOvUiBC7tUS2pcWe428TE7MSIXQ4bPlaMN2Y7QbVi8Vp0MuYY5QFsRMrYBHUR9y1LnANQIniUTEZt2hdyOfhtUWd82TEotTg+P0sYf6wI0yN0uVYN94bU/KHe1ZTKdQvxV7LUd8yDDUTo+xMto0As94TqNVk0pO6kuDMhnahgwSMRzMh2/oyt8m2EEwH564etT3KP0sx8IKeCd+myBs6M9J+FpZTOZy9XcdTDJzi6S614mIyIGIBTonanvYBs2aiB2i1sPb+5ubQUCLE7hDXeZyb3B9EDHQDMAHUeiiDzT6Opf9LujV6GY6rlAvXaN/j9rGEENFF/JBIAhhJB/BPlaFSpHblyPXrZpZEuxz4lBZliviGRmFy5B6sRaqbNXOr0oUdLpKObxZoJ4kUZ0PnU2FpApvTAi6Yc5GJIlhOVXxxXrP7u7Hz+vtEqO050ivFTR5m8JsiNUkGKlJH8kjpCoyrY1+Ue19mDzWrpS/hWySb1a78mglCShsW/b3dpcjptlNXBSHRZZKk6p1uKxisMZz2xQoaF7IhZlrtbKqDwjQj5mTxvZsKh7QDcSOSBirl53jc0WTgkt73rXXLE1zgB5BJVUarZh4GGJBfCnniQidqSpD7ZtgTNoSN89uF4g7g6jZo3lVVKNtSrHY0XRwaPYCjzl/EJcytF+B2+F/AHVR+tDJGc7AFJ2sLjN6thQBgjTv7ipquiOKv4a7fj2TSDfSvrUduHYcvui3cXh46l5HQQBnZ8Qijz0BretPP/uC9Kyt+21BO977ofc/0oEiyw==</source>
  </file>
  <package name="Default" full_name="Default"/>
  <namespace name="global" full_name="global"/>
  <namespace name="OntologyWrapper" full_name="OntologyWrapper"/>
  <deprecated count="0"/>
</project>
